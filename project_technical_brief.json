{
    "project": "LLM-based Software Developer Project",
    "directory_summaries": {
        "cmd/api": "This directory contains the main entry point (main.go) for a server application that integrates various services. The primary purpose is to set up and run a server with connections to PostgreSQL, Redis, and a Language Model (LLM) client. \n\nKey functionalities include:\n1. Initializing and connecting to services (PostgreSQL, Redis, LLM)\n2. Setting up server configuration and handlers\n3. Implementing a health check endpoint\n4. Graceful shutdown handling\n\nThe main.go file follows a modular design, separating concerns for different services and implementing a health check mechanism. It exposes an HTTP server with at least one endpoint for health checks.\n\nThe architecture appears to follow a service-oriented approach, with dependencies on external services (database, cache, LLM) being initialized and managed centrally. The main function serves as the orchestrator, bringing together all components.\n\nThe directory structure is flat, with no subdirectories, suggesting a simple, focused implementation. The code is marked as \"in_progress,\" indicating ongoing development. Future improvements may include more comprehensive error handling and detailed health checks.",
        "cmd/worker": "This directory contains the main entry point for a worker application, implemented in Go. The primary file, main.go, orchestrates the application's lifecycle, including initialization, worker management, and graceful shutdown. Key functionalities include:\n\n1. Application startup and configuration loading\n2. Worker initialization and execution with retry logic\n3. Graceful shutdown handling\n\nThe main.go file implements three main functions:\n1. main: Initializes the application and manages the overall lifecycle\n2. startWorker: Launches the worker with exponential backoff retry logic\n3. gracefulShutdown: Handles graceful termination of the worker\n\nThe application uses a context-based approach for managing lifecycles and timeouts. It also implements error handling and recovery mechanisms, particularly in the worker startup process. The code structure suggests a focus on reliability and robustness, with TODO comments indicating areas for potential improvement in configuration validation, logging, and error handling.\n\nWhile there are no subdirectories, the presence of a worker package (worker.Worker) implies a modular design with separate concerns for worker implementation and main application flow.",
        "cmd/llm_service": "This directory contains a FastAPI application implementing an LLM (Language Model) service. The main.py file is the core component, offering functionalities for code generation, requirement analysis, code refinement, code execution, and web searching. The service integrates with the Claude API for AI-powered tasks and the Bing Search API for web searches, with Redis caching for search results.\n\nKey functionalities include:\n1. Interacting with Claude API for various AI tasks\n2. Executing code in a sandboxed environment\n3. Performing web searches with caching\n4. Logging requests and responses\n\nThe application follows a modular design with separate functions for each major feature. It implements middleware for request logging and includes startup and shutdown events for initialization and cleanup. The code structure suggests a RESTful API design pattern.\n\nThe service exposes endpoints for code-related operations and web searches, providing a comprehensive interface for AI-assisted development and information retrieval. The TODO comments indicate ongoing improvements in areas such as error handling, security, and performance optimization.",
        "internal/api/handlers": "This directory contains handler files for a web application, implementing HTTP request handling for projects, tasks, and health checks. The main components are:\n\n1. ProjectHandler: Manages CRUD operations for projects, including listing with pagination and filtering.\n2. TaskHandler: Handles CRUD operations for tasks, with caching support and pagination.\n3. HealthHandler: Provides health, readiness, and liveness checks for the application.\n\nThese handlers follow a consistent structure, using dependency injection for services and implementing RESTful API endpoints. They share common patterns for pagination, ID extraction, and data validation.\n\nThe directory exposes APIs for project and task management, as well as application health monitoring. It demonstrates a clean separation of concerns, with each handler focusing on a specific domain.\n\nKey design patterns include:\n- Use of interfaces for dependency injection\n- Separation of business logic from HTTP handling\n- Consistent error handling and response formatting\n\nThe handlers rely on external services (e.g., ProjectService, TaskService, CacheService) and models, suggesting a layered architecture. The health handler also interacts with configuration and database components, indicating its role in system-wide monitoring.",
        "internal/api/middleware": "This directory implements middleware components for a Go-based web application, focusing on authentication, logging, and rate limiting. The main functionalities include:\n\n1. Authentication middleware (auth_middleware.go): Handles JWT token validation, user context management, and token revocation using Redis.\n\n2. Logging middleware (logging_middleware.go): Provides configurable HTTP request and response logging, including error logging and custom log formatting.\n\n3. Rate limiting middleware (rate_limiter.go): Implements IP-based rate limiting for incoming requests, with features for managing and customizing limits.\n\nThe files are designed to work together as middleware components in a web application, with each focusing on a specific aspect of request processing. They follow a consistent pattern of implementing middleware functions that wrap HTTP handlers.\n\nKey interfaces include AuthMiddleware, LoggingMiddleware, and RateLimitMiddleware, which can be easily integrated into an HTTP server's request handling chain. The directory exposes APIs for token management, log configuration, and rate limit customization.\n\nThe overall design emphasizes modularity and configurability, allowing for easy integration and customization in various web application scenarios.",
        "internal/api/router": "This directory contains a single file, router.go, which is responsible for setting up and configuring the API's routing using the Gin framework. The main purpose is to define the structure and behavior of the API's endpoints.\n\nKey functionalities include:\n1. Initializing the Gin router with middleware and route groups (SetupRouter function)\n2. Implementing rate limiting (rateLimiter function)\n3. Handling and logging errors (errorHandler function)\n\nThe router.go file serves as the central point for organizing API routes and applying middleware. It likely interfaces with other parts of the application, such as handlers and services, to process requests and generate responses.\n\nThe directory follows a modular approach, separating routing concerns from other application logic. This design promotes maintainability and scalability of the API.\n\nThe exposed API is defined through the route groups and individual endpoints set up in the SetupRouter function. The rate limiting and error handling middleware provide additional layers of functionality and security for the API.\n\nFurther improvements are suggested for error handling, logging, and rate limiting strategies.",
        "internal/core/orchestrator": "This directory contains the core orchestration logic for managing and executing project tasks. The main component is the Orchestrator struct in orchestrator.go, which handles the entire process of analyzing requirements, generating tasks, building a task graph, and executing tasks in parallel.\n\nKey functionalities include:\n1. Project processing and task management\n2. Task graph construction and cycle detection\n3. Parallel task execution with worker goroutines\n4. Project state management (saving, loading, and updating)\n5. Action execution based on task analysis\n\nThe Orchestrator relies on external services like LLM, action executor, and code executor, which are injected as dependencies. It implements a workflow that processes tasks, generates code, executes it, analyzes results, and performs actions based on the analysis.\n\nThe directory follows a modular design, separating concerns into different functions. It uses a combination of concurrent execution and prioritization to optimize task processing. The exposed API primarily consists of the NewOrchestrator function and the ProcessProject method, which serve as the main entry points for orchestrating project execution.",
        "internal/core/analyzer": "This directory contains a single file, \"requirement_analyzer.go,\" which implements a RequirementAnalyzer for processing and analyzing software requirements. The main functionalities include:\n\n1. Loading and validating configuration files\n2. Analyzing requirements from input files\n3. Extracting keywords from requirements\n4. Categorizing requirements into types (e.g., functional, non-functional, security)\n5. Prioritizing requirements based on various factors\n\nThe RequirementAnalyzer struct serves as the main interface for interacting with these functions. The file follows a modular design, with separate functions for each major task. The code structure suggests a potential for future expansion, such as adding more sophisticated analysis techniques or integrating with other components of a larger software development toolchain.\n\nKey APIs include NewRequirementAnalyzer for initialization, AnalyzeRequirements for processing input files, and various utility functions like ExtractKeywords, CategorizeRequirements, and PrioritizeRequirements.\n\nThe code includes TODO comments indicating areas for potential improvement, such as enhancing error handling, implementing machine learning techniques for categorization, and improving the prioritization algorithm.",
        "internal/core/distributor": "This directory implements a task distribution system for concurrent processing. The main component is the `task_distributor.go` file, which contains:\n\n1. A TaskDistributor struct for managing task distribution and worker coordination.\n2. A Worker struct for processing individual tasks.\n\nKey functionalities include:\n- Task distribution with configurable concurrency\n- Worker management and lifecycle (start/stop)\n- Task processing with retry mechanisms\n- Integration with LLM, executor, and file system services\n\nThe system follows a producer-consumer pattern, where the TaskDistributor acts as the producer, distributing tasks to a pool of Workers (consumers). It uses Go's concurrency primitives (goroutines and channels) for efficient task handling.\n\nThe main interfaces exposed are:\n- NewTaskDistributor: Creates a new TaskDistributor\n- DistributeTasks: Distributes tasks to workers\n- Start/Stop: Controls the TaskDistributor lifecycle\n\nThe implementation is modular, allowing for easy extension and customization of task processing logic. There's a focus on error handling and retry mechanisms, though some areas are marked for improvement in TODO comments.\n\nThis directory serves as the core of a distributed task processing system, likely part of a larger application architecture.",
        "internal/core/executor": "This directory contains a single file, executor.go, which implements an Executor struct for executing code in various programming languages using Docker containers, file operations, and web searches. The main functionalities include:\n\n1. Creating a new Executor instance with a Docker client\n2. Executing code in Docker containers for different programming languages\n3. Reading and writing files with proper locking and error handling\n4. Performing web searches using an external API with caching\n\nThe Executor struct exposes several key methods:\n- ExecuteCode: Runs code in specified languages using Docker\n- ReadFile and WriteFile: Handle file operations\n- PerformWebSearch: Conducts web searches with caching\n\nThe design follows a modular approach, encapsulating different functionalities within the Executor struct. It utilizes Docker for code execution, ensuring isolation and flexibility. The file operations include locking mechanisms for thread safety, while the web search function incorporates caching for efficiency.\n\nThe directory's components provide a versatile set of tools for code execution, file manipulation, and web searches, which can be used as building blocks for larger systems requiring these functionalities.",
        "internal/executor/actions": "This directory implements a comprehensive file management and web search system. The main components are:\n\n1. ActionExecutor (action_executor.go): Centralizes file operations and web searches, providing a unified interface for executing various actions.\n\n2. FileManager (file_operations.go): Handles thread-safe file operations, including reading, writing, deleting, and listing files and directories.\n\n3. WebSearch (web_search.go): Implements web search functionality using the Google Custom Search API, with caching and rate limiting.\n\nThe directory follows a modular design, separating concerns into distinct files. It uses interfaces (e.g., WebSearcher) to allow for flexible implementations and easier testing. The ActionExecutor acts as a facade, coordinating between file operations and web searches.\n\nKey functionalities include file manipulation, directory listing, web searches, and caching mechanisms. The system emphasizes thread safety, error handling, and user confirmation for critical operations like file deletion.\n\nThe directory exposes APIs for file operations, web searches, and action execution, making it easy to integrate these functionalities into larger applications. It also demonstrates considerations for performance and resource management, such as disk space checks and rate limiting for API calls.",
        "internal/executor/sandbox": "This directory implements a sandbox container management system using Docker. Its main components are:\n\n1. SandboxManager (sandbox_manager.go): Manages multiple containers, providing high-level operations like creating containers, executing code, and managing resources.\n\n2. Container (container.go): Represents individual containers with operations for starting, stopping, executing commands, copying files, and managing resources.\n\nThe system's purpose is to create isolated environments for executing arbitrary code safely. Key functionalities include:\n\n- Container lifecycle management (create, start, stop, restart)\n- Code execution within containers\n- Resource limit management\n- File transfer between host and containers\n- Log retrieval and container status monitoring\n\nThe architecture follows a manager-container pattern, where SandboxManager orchestrates multiple Container instances. Both components interact with the Docker API to perform operations.\n\nThe system exposes APIs for container creation, code execution, resource management, and cleanup. It's designed to be flexible, allowing for future expansion to support different programming languages and execution environments.\n\nImportant considerations include error handling, resource cleanup, and potential security implications of running arbitrary code in containers.",
        "internal/llm/client": "This directory implements an LLM (Language Model) client for code-related tasks. The main file, llm_client.go, provides a comprehensive set of functionalities for interacting with an LLM API. Key features include:\n\n1. Code generation based on prompts and parameters\n2. Project requirements analysis\n3. Code explanation with customizable detail levels\n4. Suggesting code improvements with focus on specific categories and priorities\n\nThe LLMClient struct serves as the primary interface, exposing methods for these functionalities. The client implementation includes caching mechanisms and request retrying with exponential backoff. The design follows a modular approach, allowing for easy extension and customization through client options.\n\nThe file uses the context package for request handling and implements the http.RoundTripper interface for custom request processing. The architecture emphasizes flexibility and extensibility, with TODO comments suggesting potential future improvements such as cache invalidation, support for more advanced code generation options, and customizable analysis templates.\n\nThis directory provides a robust foundation for integrating LLM-powered code analysis and generation capabilities into larger applications or services.",
        "internal/llm/prompts": "This directory implements a prompt generation system for various software development tasks. The main components are:\n\n1. PromptGenerator: Defined in prompt_generator.go, it provides methods for generating specific prompts for tasks like code generation, code review, error analysis, and more.\n\n2. PromptTemplates: Defined in prompt_templates.go, it stores and initializes text templates for different types of prompts.\n\nThe PromptGenerator uses the templates from PromptTemplates to create tailored prompts for different scenarios. The system follows a modular design, allowing for easy extension and customization of prompt types.\n\nKey functionalities include generating prompts for:\n- Initial project planning\n- Code generation and review\n- Error analysis\n- Web searches\n- File operations\n- Test generation\n- Requirement analysis\n- Task decomposition\n- Progress updates\n\nThe directory exposes an API through the PromptGenerator struct, which can be instantiated with custom options. This design allows for flexible integration into larger systems that require natural language prompts for various development tasks.\n\nThe structure suggests a focus on maintainability and extensibility, with clear separation of prompt generation logic and template definitions.",
        "internal/models": "This directory represents a core domain model for a project management system. It contains four main files: project.go, task.go, result.go, and user.go, each defining a crucial entity in the system.\n\nThe files implement GORM models with associated methods for CRUD operations, validations, and business logic. Key functionalities include project and task management, result tracking, and user authentication.\n\nProject and Task models have a parent-child relationship, while Result is associated with Task. The User model handles authentication and authorization.\n\nThe code follows a repository pattern, with each model having methods for database interactions. It also implements GORM hooks for automated timestamp management.\n\nThe directory exposes APIs for creating, updating, and querying projects, tasks, results, and users. It includes methods for managing project and task statuses, calculating progress, and handling user roles and permissions.\n\nOverall, this directory forms the backbone of a task management system, providing a robust data model and business logic layer for building higher-level application features.",
        "internal/storage/cache": "This directory contains a Redis cache implementation in Go, focusing on providing a robust and feature-rich client for interacting with Redis. The main file, redis_cache.go, implements a RedisCache struct with methods for various Redis operations, including:\n\n1. Key-value operations (Set, Get, Delete)\n2. Bulk operations (MSet, MGet, MDelete)\n3. Hash operations (HSet, HGet, HDelete)\n4. Incrementing operations (Incr, IncrBy, IncrByFloat)\n5. Existence checks and pattern-based deletions\n\nThe implementation includes JSON serialization and compression for stored values, improving efficiency. It also provides methods for graceful shutdown and connection management. The client supports context-based operations for better control over timeouts and cancellations.\n\nThe design follows a modular approach, with each Redis command implemented as a separate method. This structure allows for easy extension and maintenance. The client exposes a comprehensive API for interacting with Redis, making it suitable for various caching scenarios in Go applications.\n\nKey features include bulk operations, hash support, and custom methods like DeletePattern and BulkSetNX, enhancing the standard Redis functionality.",
        "internal/storage/database": "This directory contains Go files for managing a PostgreSQL database in a project management system. The main components are:\n\n1. postgres_db.go: Implements database operations for projects, tasks, code executions, and LLM requests. It provides CRUD operations and listing functionalities with pagination support.\n\n2. migrations.go: Handles database migrations, offering functions to apply, rollback, and manage migration versions.\n\nThe directory focuses on database interaction and schema management. Key functionalities include:\n\n- Connection pool management\n- Project and task management\n- Code execution and LLM request tracking\n- Database migration control\n\nThe files work together to provide a comprehensive database layer for the application. The postgres_db.go file exposes the main API for interacting with the database, while migrations.go ensures schema consistency and versioning.\n\nThe structure follows a modular approach, separating core database operations from migration management. This design allows for easy maintenance and scalability of the database layer.\n\nThe directory exposes interfaces for database operations and migration management, providing a clean API for other parts of the application to interact with the database.",
        "pkg/logger": "This directory contains a logging system implemented in Go, focusing on flexibility and advanced features. The main file, logger.go, provides a comprehensive set of functions for logging at different levels (Info, Error, Debug, Warn) and structured logging with additional data.\n\nKey functionalities include:\n1. Logger initialization with custom configurations\n2. Log rotation based on file size\n3. Log file compression using gzip\n4. Structured logging with JSON support\n5. Cleanup of old log files\n\nThe logging system is designed to be easily integrated into larger applications, offering a simple API for basic logging needs while also providing advanced features for more complex use cases. The implementation follows a modular approach, separating concerns such as log initialization, message formatting, and file management.\n\nThe directory exposes interfaces for initializing the logger, logging messages at various levels, and managing log files. It also demonstrates consideration for performance and scalability through TODOs for optimization and support for multiple log files.\n\nOverall, this directory provides a robust logging solution suitable for various Go applications, with room for future enhancements in areas such as custom formatters and additional compression algorithms.",
        "pkg/config": "This directory contains configuration management functionality for the application, implemented in a single file, config.go. The main purpose is to handle loading, validating, and accessing configuration settings. Key functionalities include:\n\n1. Loading configuration from a JSON file (LoadConfig)\n2. Overriding config values with environment variables (overrideWithEnv)\n3. Validating configuration (validateConfig)\n4. Caching and retrieving specific config values (e.g., GetDatabaseURL, GetRedisURL)\n5. Providing access to the overall configuration (GetConfig)\n\nThe design follows a singleton pattern for configuration management, with caching mechanisms for efficient access to frequently used values. The file exposes several APIs for retrieving specific configuration values, such as database URLs, API port, and log level.\n\nThe implementation includes error handling and supports potential future enhancements, as indicated by TODO comments. These include adding support for different file formats, custom environment variable prefixes, and runtime log level changes.\n\nThe directory structure is simple, containing only one file, suggesting that configuration management is centralized and self-contained within this component of the application.",
        "pkg/utils": "This directory contains a collection of utility files for Go applications, focusing on common helper functions, data validation, and error handling. The main components are:\n\n1. helpers.go: Provides utility functions for file operations, string manipulation, JSON handling, and other common tasks. It includes functions for reading/writing files, directory management, UUID generation, and time-related operations.\n\n2. validators.go: Offers a comprehensive set of validation functions for various data types, including email addresses, URLs, IP addresses, passwords, credit card numbers, and more. It provides customizable validation rules and supports international formats.\n\n3. errors.go: Implements custom error types and utility functions for error handling. It defines a CustomError type with additional context and specialized error types for common HTTP status codes. The file also includes functions for creating, wrapping, and checking error types.\n\nThese files work together to provide a robust set of utilities for Go applications, enhancing code reusability and standardizing common operations. The directory structure suggests a modular approach, allowing developers to easily import and use specific functionalities as needed. The exposed functions and types form a cohesive API for handling various application requirements, from data validation to error management.",
        "pkg/metrics": "This directory contains a single file, prometheus.go, which implements Prometheus metrics for comprehensive monitoring of a complex application. The file provides functions to track and measure various aspects of the system, including:\n\n1. Request handling (total requests and durations)\n2. Error tracking\n3. Code execution (counts and durations)\n4. LLM (Language Model) interactions\n5. Caching performance\n6. File operations\n7. Web searches\n\nThe functions in prometheus.go are designed to be called from different parts of the application to increment counters or observe durations for specific events. This centralized approach to metrics collection allows for consistent monitoring across the entire system.\n\nThe file exposes a clear API for other components to use, with each function focusing on a specific metric. The design follows a modular pattern, making it easy to add new metrics or modify existing ones.\n\nThe directory's purpose is to provide a unified metrics collection system, enabling detailed monitoring and analysis of the application's performance and behavior. This can be particularly useful for identifying bottlenecks, tracking usage patterns, and maintaining system reliability.",
        "llm_service/api": "This directory implements a FastAPI-based backend for an AI-powered code generation and task management service. The main components are:\n\n1. main.py: Implements core functionality including requirement analysis, code generation and execution, web search, file operations, and task scheduling.\n\n2. routes.py: Defines API routes for the FastAPI application, handling requests for all main functionalities.\n\nThe system uses a modular approach, separating core logic (main.py) from API routing (routes.py). Key functionalities include:\n\n- Project requirement analysis\n- Code generation, optimization, and security checking\n- Sandboxed code execution\n- Web search and result analysis\n- File operations (read, write, delete, update, list)\n- Task scheduling and prioritization\n- Task result retrieval and analysis\n\nThe application extensively uses asynchronous programming and background tasks. It interfaces with external systems like LLMs for code generation and analysis. Security measures are implemented throughout, especially in code execution and file operations.\n\nThe API design follows RESTful principles, with clear input/output structures for each endpoint. Error handling and input validation are implemented, with plans for further improvements in robustness and advanced features.",
        "llm_service/models": "This directory contains a single file, models.py, which defines the database models for a project management system using SQLAlchemy ORM. The main components include Project, Task, CodeSnippet, Requirement, ExecutionResult, WebSearch, and TeamMember models. These models represent various aspects of project management, including task tracking, code management, requirement handling, and team collaboration.\n\nKey relationships are established between models, such as projects having tasks and requirements, tasks being associated with code snippets and execution results, and team members being linked to projects and tasks. The models use enumerations for status and type fields, providing standardized options for various attributes.\n\nThe directory's purpose is to provide a comprehensive data structure for managing software development projects, incorporating features like task tracking, code version control, requirement management, and team collaboration. The models are designed to support a wide range of project management functionalities, including progress tracking, code snippet management, and web search integration.\n\nThe structure suggests a modular approach to project management, with each model focusing on a specific aspect of the development process. This design allows for easy extension and maintenance of the system.",
        "llm_service/llm": "This directory implements a client interface for interacting with a Language Learning Model (LLM) API, focusing on AI-assisted software development tasks. The main components are:\n\n1. llm_client.py: An asynchronous client (LLMClient) for making API calls, handling code generation, requirement analysis, solution suggestion, and concurrent task execution.\n\n2. prompt_generator.py: A PromptGenerator class for creating specialized prompts and parsing AI responses for various tasks.\n\nThe directory's purpose is to provide a robust, extensible framework for integrating AI-powered assistance into software development workflows. Key functionalities include code generation, requirement analysis, problem-solving, and task execution.\n\nThe files are closely related, with llm_client.py likely using prompt_generator.py to create prompts for API requests and parse responses. The architecture follows a modular design, separating client logic from prompt generation and response parsing.\n\nThe main interface is exposed through the LLMClient class, which offers methods for different AI-assisted tasks. The design supports asynchronous operations, caching, and concurrent execution, making it suitable for integration into larger applications or development environments.",
        "llm_service/utils": "This directory contains a single file, \"helpers.py\", which serves as a utility module for the LLM service. The file implements various helper functions that support common operations across the project. Key functionalities include:\n\n1. File operations: reading, writing, and validating files\n2. Web interactions: executing web searches and making API requests\n3. Configuration management: loading and validating project configurations\n4. Data processing: parsing requirements, sanitizing inputs, and extracting text from HTML\n5. Caching: interacting with Redis for result caching\n6. Logging: error logging with configurable levels\n7. URL and directory operations\n\nThe helper functions are designed to be reusable across the project, providing a centralized location for common utilities. The file follows a functional programming approach, with each function handling a specific task. There's a focus on error handling, input validation, and flexibility in function parameters.\n\nThe directory exposes these utility functions as an API for other parts of the LLM service to use, promoting code reuse and maintainability. The \"helpers.py\" file is still in progress, with several TODO items for future improvements and expansions of functionality.",
        "tests/unit/api": "This directory contains test files for an API project, focusing on handler functions and middleware components. The main functionalities tested include:\n\n1. API handlers: code generation, code execution, and file operations.\n2. Middleware: CORS, authentication, logging, and rate limiting.\n\nThe tests use mock services to simulate external dependencies, such as Redis for rate limiting. They cover various scenarios, including success cases, error handling, and edge cases.\n\nKey components:\n\n1. handler_test.go: Tests API handler functions.\n2. middleware_test.go: Tests middleware functions and includes mock implementations for Redis commands.\n\nThe directory structure suggests a separation of concerns between handler logic and middleware. The tests demonstrate a focus on robust error handling, security (authentication and rate limiting), and cross-origin resource sharing.\n\nThe tests expose the main API endpoints and middleware functionalities, providing insight into the expected behavior of the system. They also highlight important dependencies, such as Redis for rate limiting.\n\nOverall, this directory serves as a comprehensive test suite for the API's core functionalities and middleware components, ensuring proper behavior and error handling across various scenarios.",
        "tests/unit/core": "This directory contains unit tests for a software system that processes requirements, analyzes them, and executes tasks. The main components tested are:\n\n1. Orchestrator: Manages the overall process of handling requirements and tasks.\n2. Analyzer: Analyzes requirements and generates tasks using an LLM service.\n3. Executor: Executes different types of tasks, including code execution and file operations.\n\nThe test files (orchestrator_test.go, analyzer_test.go, and executor_test.go) cover various scenarios, including success cases, error handling, and edge cases. They use mocks to simulate dependencies like LLM services, filesystems, and code execution environments.\n\nThe tests demonstrate a modular architecture where each component has well-defined responsibilities. The Orchestrator coordinates the Analyzer and Executor, showcasing a potential mediator pattern. The use of interfaces for dependencies allows for easy mocking in tests.\n\nKey functionalities tested include requirement processing, task generation, and task execution. The tests cover important aspects such as error handling, context cancellation, timeouts, and special character handling, ensuring robustness of the system.",
        "tests/unit/executor": "This directory contains unit tests for various components of a system that handles file operations, action execution, and sandboxed code execution. The main functionalities tested include:\n\n1. ActionExecutor: Executes different types of actions like ReadFile, WriteFile, and WebSearch.\n2. FileOperations: Handles reading, writing, and listing files with various scenarios and edge cases.\n3. Sandbox: Manages code execution with resource limits and isolation.\n\nThe tests cover a wide range of scenarios, including handling large files, UTF-8 content, special characters, long paths, and concurrent operations. They also test error cases and edge scenarios to ensure robustness.\n\nThe directory follows a standard Go testing structure, with each file focusing on a specific component. Mock implementations are used for dependencies, allowing for isolated testing of each component.\n\nThe tests reveal a design that emphasizes modularity and separation of concerns, with distinct components for file operations, action execution, and sandboxed environments. The exposed APIs include methods for executing actions, performing file operations, and running code in a sandboxed environment with resource limits.\n\nOverall, this directory serves as a comprehensive test suite for the system's core functionalities, ensuring reliability and correctness.",
        "tests/unit/llm_service": "This directory contains unit tests for a system that interacts with a language model API, focusing on code generation, analysis, and improvement. The main components are:\n\n1. llm_client_test.py: Tests the LLMClient class, which handles API interactions for various tasks like code generation, requirement analysis, code improvement suggestions, and code explanations.\n\n2. prompt_generator_test.py: Tests the PromptGenerator class, responsible for creating specialized prompts for different purposes, including code generation, analysis, improvements, and explanations.\n\nThe tests cover various scenarios, input types, and error handling for each functionality. They ensure robustness in API communication, prompt generation, and result processing. The directory implements a modular design, separating client interactions and prompt generation into distinct classes.\n\nKey functionalities tested include:\n- Sending requests to the language model API\n- Generating code based on requirements\n- Analyzing project requirements\n- Suggesting code improvements\n- Explaining code snippets\n\nThe tests also cover advanced scenarios like language-specific prompts, multi-language support, and handling various constraints or focuses in the prompts. This structure suggests a flexible and extensible system for AI-assisted software development tasks.",
        "tests/integration": "This directory contains integration tests for the DevLM project, focusing on API endpoints, worker functionality, and LLM service. The main components include:\n\n1. API integration tests (api_integration_test.go): Covers CRUD operations for projects, code generation, and execution.\n2. Worker integration tests (worker_integration_test.go): Tests task processing, code generation, code execution, and file operations.\n3. LLM service integration tests (llm_service_integration_test.py): Verifies endpoints for code generation, requirement analysis, code review, explanation, and improvement suggestions.\n\nThe tests are designed to ensure proper functionality and integration between different components of the DevLM system. They cover various scenarios, edge cases, and concurrent operations to validate the system's robustness and reliability.\n\nThe structure follows a modular approach, separating tests for different services while maintaining a consistent testing pattern across files. This allows for easy expansion and maintenance of the test suite as the project evolves.\n\nKey functionalities tested include project management, code generation and execution, task processing, and LLM-powered code analysis and improvement. These tests serve as a crucial tool for maintaining the overall quality and reliability of the DevLM project.",
        "tests/e2e": "This directory contains end-to-end tests for a Go web server application, implemented in a single file: e2e_test.go. The main purpose is to validate the entire development workflow and server functionality. Key components include:\n\n1. TestE2EWorkflow: Orchestrates the complete end-to-end test workflow.\n2. Individual test functions for requirement analysis, code generation, code execution, web search, code updates, and final execution.\n3. Server functionality tests, including concurrent requests, stress testing, and large payload handling.\n\nThe tests interact with an API client, suggesting a client-server architecture. The workflow follows a sequential pattern: from requirement analysis to code generation, execution, and updates, culminating in final execution and server testing.\n\nThe directory exposes a comprehensive test suite for the application, covering both the development process and server performance. It emphasizes testing various aspects of the server, including concurrency, stress handling, and payload processing.\n\nThe structure indicates a focus on thorough testing of both the development workflow and the resulting server application, providing a robust framework for ensuring the quality and reliability of the Go web server application.",
        "tests/performance": "This directory contains performance and load testing functions for an API, implemented in a single Go file named \"load_test.go\". The file includes various test functions designed to evaluate different aspects of the API's performance and reliability:\n\n1. Load testing under various scenarios\n2. Benchmarking API response times\n3. Handling concurrent requests\n4. Testing specific API endpoints\n5. Measuring and asserting on latency\n6. Evaluating long-term stability\n\nThe tests use Go's testing package and focus on measuring response times, success rates, and concurrent request handling. The file is still in progress, with several TODO items for adjusting thresholds, adding more scenarios, and completing implementations based on production requirements.\n\nThe directory structure suggests a focused approach to API testing, with all performance-related tests consolidated in a single file. This organization allows for easy maintenance and expansion of the test suite. The tests are designed to be configurable, allowing for adjustments based on specific production performance targets and requirements.\n\nOverall, this directory serves as a comprehensive performance testing suite for the API, enabling developers to assess and maintain the API's performance characteristics.",
        "deploy/docker": "This directory contains Dockerfiles for three distinct services: an API, a worker, and an LLM service. The overall purpose is to define containerized environments for these services, ensuring consistent deployment and execution across different platforms.\n\nThe main functionalities implemented include:\n1. Multi-stage builds for optimized container images\n2. Compilation and execution of Go-based applications (API and worker)\n3. Setup of a Python-based LLM service\n4. Implementation of health checks for all services\n5. Security measures such as non-root user configuration\n\nThe Dockerfiles share common patterns, including:\n1. Separation of build and runtime stages\n2. Use of environment variables for configuration\n3. Implementation of health checks\n4. Graceful shutdown handling (for API and worker)\n\nThe directory structure suggests a microservices architecture, with each service containerized independently. This allows for scalability and easier maintenance of individual components.\n\nKey interfaces exposed include:\n1. API endpoints (including a /health endpoint)\n2. Worker process for background tasks\n3. LLM service endpoints for language model interactions\n\nThe Dockerfiles provide a foundation for deploying and orchestrating these services in a production environment.",
        "deploy/kubernetes": "This directory contains Kubernetes configuration files for deploying and managing the DevLM application, a distributed system comprising multiple services. The main components include:\n\n1. API deployment (api-deployment.yaml)\n2. Worker deployment (worker-deployment.yaml)\n3. LLM service deployment (llm-service-deployment.yaml)\n4. Ingress configuration (ingress.yaml)\n5. Secrets management (secrets.yaml)\n\nEach deployment file defines resources such as Deployments, Services, and HorizontalPodAutoscalers for their respective components. The ingress.yaml file configures traffic routing, rate limiting, and security measures for accessing the services. The secrets.yaml file manages sensitive information and includes configurations for secure secret management using SealedSecrets.\n\nThe directory implements a microservices architecture with horizontal scaling and load balancing. It emphasizes security through network policies, ingress protection, and encrypted secrets. The configurations expose APIs for external access while maintaining internal communication between services.\n\nKey interfaces include the main API endpoint, internal API services, metrics endpoints, and webhook endpoints. The directory structure reflects a separation of concerns, with each file focusing on a specific aspect of the application's infrastructure.",
        "deploy/terraform": "This directory contains Terraform configuration files for deploying a comprehensive AWS infrastructure for the DevLM project. The main components include:\n\n1. main.tf: Defines core AWS resources like VPC, EC2, RDS, ElastiCache, ECS, and ALB.\n2. variables.tf: Declares input variables with validation rules for resource configuration.\n3. outputs.tf: Specifies output values for created resources.\n4. modules.tf: Organizes infrastructure into reusable modules for VPC, security groups, EC2, RDS, ElastiCache, ECS, ALB, S3, Route53, and IAM.\n\nThe configuration follows a modular approach, enabling easy customization and maintenance. It implements a multi-tier architecture with public and private subnets, supporting both Golang backend services on EC2 and Python LLM services on ECS. The infrastructure includes database (PostgreSQL), caching (Redis), load balancing, and DNS management.\n\nKey design decisions include the use of Terraform modules for better organization, implementation of security best practices, and support for different environments (dev, staging, prod). The directory exposes interfaces for resource configuration through variables and provides essential information about created resources through outputs.",
        "scripts": "This directory contains a set of shell scripts for managing the DevLM project, a microservices-based application. The main components include:\n\n1. setup.sh: Configures the development environment, installing dependencies and setting up the project structure.\n2. build.sh: Compiles Go and Python services, builds Docker images, and generates build reports.\n3. run_tests.sh: Executes various test suites (Go, Python, integration, performance) and generates test reports.\n4. lint.sh: Performs linting for Go, Python, Shell scripts, and Dockerfiles with customizable configurations.\n5. deploy.sh: Orchestrates the deployment of microservices (API Gateway, LLM Service, Action Executor, Code Execution Engine) and databases (Redis, PostgreSQL) using Docker.\n6. monitoring.sh: Monitors system resources, Docker containers, databases, and service health.\n\nThese scripts work together to provide a complete development lifecycle management solution for the DevLM project. They implement common patterns such as parallel execution, error handling, and comprehensive logging. The scripts expose interfaces for customization and configuration, allowing flexibility in the development and deployment processes. The overall architecture supports a microservices-based approach with Docker containerization and emphasizes automated testing, linting, and monitoring for maintaining code quality and system health.",
        "docs/api": "This directory contains API documentation and endpoint implementations for the DevLM project, a comprehensive development assistance system. The main components are:\n\n1. API documentation (api.md): Outlines endpoints for project management, requirement analysis, code generation, improvement, execution, testing, file operations, and web search.\n\n2. Endpoint implementations (endpoints.md): Provides functions to interact with the DevLM API, mirroring the documented endpoints.\n\nThe directory focuses on defining and implementing a RESTful API for managing software development projects and automating various aspects of the development process. Key functionalities include project CRUD operations, code generation and improvement, requirement analysis, code execution and testing, file operations, and web search capabilities.\n\nThe structure suggests a separation between API documentation and implementation, promoting maintainability and clarity. The endpoints file implements a base URL and a generic API call function, indicating a centralized approach to API communication.\n\nThe exposed API provides a comprehensive interface for interacting with the DevLM system, enabling integration with various development tools and workflows. The implementation includes TODOs for future improvements, such as input validation, caching, and enhanced security measures.",
        "docs/architecture": "This directory contains the core architecture and component definitions for DevLM, an AI-powered software development assistant. The main files (architecture.md, components.md, and data_flow.md) outline the system's structure, implementations, and data flow.\n\nKey functionalities include:\n1. API Gateway for request handling and authentication\n2. Golang Backend Service for request processing\n3. Python LLM Service for AI-driven task processing\n4. Action Executor for various operations\n5. Code Execution Engine for running code in Docker containers\n6. Redis Cache for efficient data storage\n7. PostgreSQL Database for persistent data storage\n\nThe system follows a microservices architecture, with clear separation of concerns between components. It utilizes external services like Claude Sonnet for AI processing and implements caching and rate limiting for efficiency.\n\nThe data flow is well-defined, starting from client requests through the API Gateway, then processed by the Golang Backend Service, which interacts with other components as needed. The system exposes APIs for client interaction and inter-component communication.\n\nKey design patterns include dependency injection, asynchronous processing, and the use of interfaces for modular component interaction.",
        "docs/development": "This directory contains essential documentation for the DevLM project, focusing on contribution guidelines, coding standards, and security practices. The main components are:\n\n1. contributing.md: Provides comprehensive guidance for project contributors, covering setup, development workflow, pull requests, bug reporting, and release processes.\n\n2. coding_standards.md: Outlines coding standards for both Go and Python, including function examples for name formatting, user processing, API handling, and error management.\n\n3. security.md: Implements security-related functions for handling sensitive data, preventing secret commits, secure API key storage, and environment variable management.\n\nThe files are interconnected, with coding standards and security practices being integral to the contribution process. The directory follows a modular approach, separating concerns into distinct files while maintaining a cohesive project structure.\n\nKey functionalities include environment setup, pull request management, bug reporting, user data processing, API interaction, and secure data handling. The directory exposes interfaces for contributor onboarding, code quality maintenance, and security implementation.\n\nOverall, this directory serves as a central hub for project documentation, ensuring consistent development practices, secure coding, and smooth collaboration among contributors.",
        "docs/operations": "This directory contains essential documentation for deploying, monitoring, and troubleshooting a system called DevLM. The main components are:\n\n1. Deployment (deployment.md): Covers local and production deployment using Docker, Docker Compose, and Kubernetes. It includes functions for cloning repositories, checking prerequisites, and deploying in different environments.\n\n2. Monitoring (monitoring.md): Focuses on user behavior analysis, visualization, and automated scaling of Kubernetes deployments. It implements functions for analyzing log data, creating visualizations, and dynamically adjusting deployment replicas based on custom metrics.\n\n3. Troubleshooting (troubleshooting.md): Provides functions to diagnose and resolve issues in various system components, including API Gateway, LLM Service, Code Execution Engine, Database, and Redis. It includes connection checks, automated remediation steps, and performance metric analysis.\n\nThe directory emphasizes automation and scalability, with a focus on Kubernetes-based deployments. It exposes interfaces for deployment, monitoring, and troubleshooting, allowing for easy integration with other systems or scripts. The structure suggests a microservices architecture with separate components for API Gateway, LLM Service, and Code Execution Engine, all supported by a database and Redis for caching.",
        "config": "This directory contains configuration files for a DevLM application, focusing on environment variables, general settings, and specific configurations for production, staging, and LLM components. The main functionalities include database setup, Redis configuration, API integrations (LLM, search), code execution, security settings, and performance tuning.\n\nKey files include:\n1. .env.example: Environment variables template\n2. config.yaml: General application configuration\n3. config.production.yaml: Production-specific settings\n4. config.staging.yaml: Staging environment configuration\n5. llm_config.yaml: Detailed LLM system configuration\n\nThe files implement functions for loading, validating, and applying configurations, as well as managing API keys, feature flags, and monitoring. There's a clear separation of concerns between different environments and components.\n\nThe directory structure suggests a modular approach to configuration management, allowing for easy customization across different deployment scenarios. The configurations expose interfaces for database connections, API requests, code execution, logging, and security checks.\n\nOverall, this directory serves as the central hub for managing and coordinating various aspects of the DevLM application's behavior and integrations.",
        "api": "This directory contains the OpenAPI specification for the DevLM API, an AI-powered software development assistant. The main file, openapi.yaml, defines various endpoints for project management, code generation, and analysis. Key functionalities include:\n\n1. Project management (create, retrieve, update)\n2. Requirements handling and analysis\n3. Code generation and execution\n4. File management within projects\n5. Web search integration for additional information\n\nThe API exposes endpoints for creating and managing projects, updating and analyzing requirements, generating and executing code, and managing project files. It also includes a web search feature for gathering related information.\n\nThe structure suggests a RESTful API design with clear separation of concerns for different aspects of software development. The API seems to follow best practices for versioning, pagination, and error handling.\n\nNotable design patterns include the use of UUIDs for project identification and pagination for file listing. The API appears to be designed for scalability and extensibility, with provisions for caching and performance optimization.\n\nThe TODO comments indicate ongoing development, with focus areas including input validation, caching, conflict resolution, and secure code execution.",
        "build": "This directory contains a Makefile for the DevLM project, serving as the central build and management system. The Makefile implements various commands for building, testing, running, and maintaining the project's services, including both Go and Python components. Key functionalities include:\n\n1. Build and test automation for Go and Python services\n2. Docker-based deployment and management\n3. Code linting and formatting\n4. Database migrations\n5. Documentation generation\n6. Development environment setup\n7. Continuous Integration tasks\n8. Production deployment\n9. Monitoring and backup operations\n\nThe Makefile demonstrates a comprehensive approach to project management, covering the entire development lifecycle from setup to deployment and maintenance. It suggests a microservices architecture with polyglot services (Go and Python) and Docker-based containerization. The structure implies a focus on maintainability, code quality, and automation of routine tasks.\n\nThe Makefile exposes a consistent interface for interacting with the project, allowing developers to easily build, test, and deploy services. It also highlights the project's emphasis on documentation, testing, and monitoring, indicating a robust and well-structured development process.",
        ".": "The root directory contains essential configuration and documentation files for the DevLM project, an AI-powered software development assistant using Large Language Models. Key files include:\n\n1. README.md: Project overview and documentation\n2. CHANGELOG.md: Version history and notable changes\n3. LICENSE: MIT License for the project\n4. go.mod and go.sum: Go dependency management\n5. requirements.txt: Python dependencies\n6. .gitignore: Specifies files to exclude from version control\n7. docker-compose.yml: Defines multi-service architecture for development\n8. .golangci.yml: Go linter configuration\n9. .pre-commit-config.yaml: Pre-commit hooks for code quality\n\nThese files establish the project structure, manage dependencies, ensure code quality, and provide documentation. The Docker Compose file outlines the project's microservices architecture, including API gateway, backend services, databases, and caching. Configuration files for linters and pre-commit hooks enforce coding standards across multiple languages. The project uses both Go and Python, with their respective dependency management systems in place. Overall, these files create a well-organized foundation for collaborative development and maintenance of the DevLM project.",
        ".github/workflows": "This directory contains a CI workflow configuration file (ci.yml) for a multi-language project using GitHub Actions. The workflow implements a comprehensive CI/CD pipeline with four main stages:\n\n1. Lint: Performs code quality checks for Go, Python, and JavaScript.\n2. Test: Runs unit and integration tests for Go and Python components, generating coverage reports.\n3. Build: Compiles Go binaries, prepares Python services, and creates Docker images for all components.\n4. Deploy: Deploys Docker images to a Kubernetes cluster in the staging environment.\n\nThe workflow is designed to ensure code quality, maintain test coverage, and automate the build and deployment process. It supports multiple programming languages and uses containerization for consistent deployments.\n\nKey functionalities include linting, testing, building binaries and Docker images, and Kubernetes deployment. The workflow exposes interfaces for customizing language versions and Kubernetes configurations.\n\nThe structure suggests a microservices architecture with separate components for different languages. Future improvements include adding more language-specific linters, expanding integration tests, optimizing Docker builds, and implementing canary deployments.\n\nThis CI/CD setup enables rapid development and deployment cycles while maintaining code quality and reliability."
    },
    "directories": {
        "files": [
            {
                "name": "README.md",
                "functions": [
                    {
                        "name": "analyze_requirements",
                        "inputs": [
                            "file"
                        ],
                        "input_types": [
                            "str"
                        ],
                        "outputs": [
                            "analysis_result"
                        ],
                        "output_types": [
                            "Dict[str, Any]"
                        ],
                        "summary": "Analyzes project requirements from a given file using LLM",
                        "todo": "Implement actual requirement analysis logic using LLM"
                    },
                    {
                        "name": "generate_code",
                        "inputs": [
                            "language",
                            "description"
                        ],
                        "input_types": [
                            "str",
                            "str"
                        ],
                        "outputs": [
                            "generated_code"
                        ],
                        "output_types": [
                            "str"
                        ],
                        "summary": "Generates code based on the given language and description using LLM",
                        "todo": "Implement actual code generation logic using LLM"
                    },
                    {
                        "name": "execute_code",
                        "inputs": [
                            "code"
                        ],
                        "input_types": [
                            "str"
                        ],
                        "outputs": [
                            "execution_result"
                        ],
                        "output_types": [
                            "Dict[str, Any]"
                        ],
                        "summary": "Executes the given code in a sandboxed Docker environment",
                        "todo": "Enhance containerization security measures"
                    },
                    {
                        "name": "deploy_staging",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [
                            "deployment_result"
                        ],
                        "output_types": [
                            "Dict[str, Any]"
                        ],
                        "summary": "Deploys the project to the staging environment",
                        "todo": "Implement actual staging deployment logic"
                    },
                    {
                        "name": "deploy_production",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [
                            "deployment_result"
                        ],
                        "output_types": [
                            "Dict[str, Any]"
                        ],
                        "summary": "Deploys the project to the production environment",
                        "todo": "Implement actual production deployment logic"
                    },
                    {
                        "name": "call_llm_api",
                        "inputs": [
                            "endpoint",
                            "data"
                        ],
                        "input_types": [
                            "str",
                            "Any"
                        ],
                        "outputs": [
                            "response"
                        ],
                        "output_types": [
                            "Dict[str, Any]"
                        ],
                        "summary": "Makes an API call to the LLM service",
                        "todo": "Implement the actual API call to the LLM service"
                    },
                    {
                        "name": "get_current_version",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [
                            "version"
                        ],
                        "output_types": [
                            "str"
                        ],
                        "summary": "Retrieves the current version of the project",
                        "todo": "Implement version retrieval logic"
                    }
                ],
                "status": "in_progress",
                "summary": "Documentation for DevLM, an AI-powered software development assistant using Large Language Models (LLMs) to aid in code development. It covers project overview, key features, architecture, installation, usage, development, deployment, and future improvements.",
                "last_updated_iteration": 5
            },
            {
                "name": "CHANGELOG.md",
                "functions": [
                    {
                        "name": "update_changelog",
                        "inputs": [
                            "new_changes"
                        ],
                        "input_types": [
                            "list"
                        ],
                        "outputs": [
                            "updated_changelog"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Updates the changelog with new changes, categorizing them appropriately.",
                        "todo": "Implement automated categorization of changes based on commit messages"
                    },
                    {
                        "name": "compare_versions",
                        "inputs": [
                            "version1",
                            "version2"
                        ],
                        "input_types": [
                            "string",
                            "string"
                        ],
                        "outputs": [
                            "comparison_result"
                        ],
                        "output_types": [
                            "integer"
                        ],
                        "summary": "Compares two version strings and returns the result.",
                        "todo": "Enhance version comparison to handle complex pre-release and build metadata"
                    },
                    {
                        "name": "generate_release_notes",
                        "inputs": [
                            "version",
                            "changes"
                        ],
                        "input_types": [
                            "string",
                            "list"
                        ],
                        "outputs": [
                            "release_notes"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Generates release notes for a specific version based on the changes.",
                        "todo": "Implement support for multiple output formats (Markdown, HTML, plain text)"
                    },
                    {
                        "name": "update_unreleased_link",
                        "inputs": [
                            "latest_version"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "updated_link"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Updates the 'Unreleased' comparison link in the changelog.",
                        "todo": "Add error handling for repository URL format changes"
                    },
                    {
                        "name": "validate_changelog_format",
                        "inputs": [
                            "changelog_content"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "is_valid",
                            "errors"
                        ],
                        "output_types": [
                            "boolean",
                            "list"
                        ],
                        "summary": "Validates the changelog content against the Keep a Changelog format.",
                        "todo": "Implement stricter validation rules and provide suggestions for improvements"
                    },
                    {
                        "name": "automate_semantic_versioning",
                        "inputs": [
                            "commit_messages"
                        ],
                        "input_types": [
                            "list"
                        ],
                        "outputs": [
                            "new_version"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Determines the next semantic version based on commit messages.",
                        "todo": "Implement automated semantic versioning based on commit messages"
                    }
                ],
                "status": "in_progress",
                "summary": "This file documents all notable changes to the project, following the Keep a Changelog format and adhering to Semantic Versioning. It includes sections for Unreleased changes and released versions, categorizing changes into Added, Changed, Deprecated, Removed, Fixed, and Security.",
                "last_updated_iteration": 5
            },
            {
                "name": "LICENSE",
                "functions": [
                    {
                        "name": "grant_permission",
                        "inputs": [
                            "person",
                            "software"
                        ],
                        "input_types": [
                            "string",
                            "object"
                        ],
                        "outputs": [
                            "permission_granted"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Grants permission to a person to use, modify, and distribute the software",
                        "todo": "None"
                    },
                    {
                        "name": "include_notice",
                        "inputs": [
                            "software_copy"
                        ],
                        "input_types": [
                            "object"
                        ],
                        "outputs": [
                            "notice_included"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Ensures that the copyright notice and permission notice are included in all copies of the software",
                        "todo": "None"
                    },
                    {
                        "name": "provide_as_is",
                        "inputs": [
                            "software"
                        ],
                        "input_types": [
                            "object"
                        ],
                        "outputs": [
                            "warranty_status"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Specifies that the software is provided 'as is' without warranty of any kind",
                        "todo": "None"
                    },
                    {
                        "name": "limit_liability",
                        "inputs": [
                            "authors",
                            "copyright_holders"
                        ],
                        "input_types": [
                            "array",
                            "array"
                        ],
                        "outputs": [
                            "liability_limited"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Limits the liability of authors and copyright holders for any claims, damages, or other liability",
                        "todo": "None"
                    }
                ],
                "status": "done",
                "summary": "This file contains the MIT License, which grants permission to use, modify, and distribute the software under certain conditions.",
                "last_updated_iteration": 4
            },
            {
                "name": "go.mod",
                "functions": [
                    {
                        "name": "module_definition",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [
                            "module_name"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Defines the module name for the project",
                        "todo": "Consider updating the module name if the repository changes"
                    },
                    {
                        "name": "go_version",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [
                            "version"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Specifies the Go version used for the project",
                        "todo": "Regularly check for new Go versions and update if necessary"
                    },
                    {
                        "name": "require",
                        "inputs": [
                            "dependencies"
                        ],
                        "input_types": [
                            "list of strings"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Lists the direct dependencies required for the project with their versions",
                        "todo": "Periodically review and update dependencies to their latest stable versions"
                    },
                    {
                        "name": "indirect_dependencies",
                        "inputs": [
                            "indirect_deps"
                        ],
                        "input_types": [
                            "list of strings"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Lists the indirect dependencies required by the project's direct dependencies",
                        "todo": "Monitor indirect dependencies for security updates and potential conflicts"
                    }
                ],
                "status": "in_progress",
                "summary": "This file defines the module dependencies and version constraints for the GitHub project github.com/Nero7991/devlm. It specifies the Go version and lists both direct and indirect dependencies required for the project.",
                "last_updated_iteration": 5
            },
            {
                "name": "go.sum",
                "functions": [
                    {
                        "name": "Dependency Verification",
                        "inputs": [
                            "Module path",
                            "Version"
                        ],
                        "input_types": [
                            "string",
                            "string"
                        ],
                        "outputs": [
                            "Verification result"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Verifies the integrity of a downloaded package by comparing its cryptographic hash with the one recorded in the go.sum file",
                        "todo": "None"
                    },
                    {
                        "name": "Version Tracking",
                        "inputs": [
                            "Module path"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "Version information"
                        ],
                        "output_types": [
                            "string"
                        ],
                        "summary": "Retrieves the exact version information for a given module path",
                        "todo": "None"
                    }
                ],
                "status": "done",
                "summary": "This file is used by Go's dependency management system to record the exact versions of dependencies used in a project. It contains cryptographic hashes to verify the integrity of the downloaded packages.",
                "last_updated_iteration": 4
            },
            {
                "name": "requirements.txt",
                "functions": [
                    {
                        "name": "install_dependencies",
                        "inputs": [
                            "requirements_file"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "installation_status"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Installs all the dependencies listed in the requirements.txt file using pip",
                        "todo": "Implement version conflict resolution and consider using a virtual environment"
                    },
                    {
                        "name": "update_dependencies",
                        "inputs": [
                            "requirements_file"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "updated_packages"
                        ],
                        "output_types": [
                            "list"
                        ],
                        "summary": "Updates all the dependencies to their latest compatible versions",
                        "todo": "Add functionality to generate a changelog of updated packages"
                    },
                    {
                        "name": "check_compatibility",
                        "inputs": [
                            "requirements_file",
                            "python_version"
                        ],
                        "input_types": [
                            "string",
                            "string"
                        ],
                        "outputs": [
                            "compatibility_report"
                        ],
                        "output_types": [
                            "dict"
                        ],
                        "summary": "Checks the compatibility of all dependencies with the specified Python version",
                        "todo": "Implement checks for system-specific dependencies (e.g., psycopg2-binary)"
                    },
                    {
                        "name": "generate_dependency_graph",
                        "inputs": [
                            "requirements_file"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "dependency_graph"
                        ],
                        "output_types": [
                            "object"
                        ],
                        "summary": "Generates a graph representation of the dependencies and their relationships",
                        "todo": "Add visualization options for the dependency graph"
                    },
                    {
                        "name": "validate_requirements",
                        "inputs": [
                            "requirements_file"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Validates the format and content of the requirements.txt file",
                        "todo": "Implement checks for deprecated packages and known vulnerabilities"
                    }
                ],
                "status": "in_progress",
                "summary": "This file lists all the Python dependencies required for the DevLM project, including core dependencies, AI/ML libraries, testing tools, monitoring utilities, and various other packages for development, performance, and functionality.",
                "last_updated_iteration": 5
            },
            {
                "name": ".gitignore",
                "functions": [
                    {
                        "name": "ignore_os_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Ignores operating system-specific files and directories, such as .DS_Store for macOS and Thumbs.db for Windows.",
                        "todo": "Consider adding more OS-specific files for other operating systems if needed."
                    },
                    {
                        "name": "ignore_ide_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Excludes files and directories generated by various IDEs and text editors, including .idea/, .vscode/, and *.sublime-project.",
                        "todo": "Regularly update with new IDE-specific files as development environments evolve."
                    },
                    {
                        "name": "ignore_language_specific_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Ignores language-specific files and directories for various programming languages, including Python, Go, Node.js, Rust, Swift, Kotlin, Elixir, R, Julia, and Haskell.",
                        "todo": "Keep updated with new language versions and their specific ignore patterns."
                    },
                    {
                        "name": "ignore_build_and_dependency_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Excludes build outputs, dependency directories, and package management files for various languages and frameworks.",
                        "todo": "Regularly review and update for new build tools and package managers."
                    },
                    {
                        "name": "ignore_environment_and_config_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Ignores environment variable files, local configuration files, and other sensitive information that should not be version controlled.",
                        "todo": "Ensure all potential configuration file patterns are covered for different frameworks and tools."
                    },
                    {
                        "name": "ignore_logs_and_temporary_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Excludes log files, temporary files, and cache directories generated during development and runtime.",
                        "todo": "Regularly update to cover new log formats and temporary file patterns."
                    },
                    {
                        "name": "ignore_media_and_large_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Ignores large media files and other binary files that should not be version controlled.",
                        "todo": "Consider adding more media file formats as needed for specific projects."
                    },
                    {
                        "name": "ignore_project_specific_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Excludes project-specific files and directories, such as /config/secrets.yaml, /data/, and /logs/.",
                        "todo": "Update regularly based on project requirements and structure changes."
                    },
                    {
                        "name": "ignore_version_control_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Ignores files and directories specific to version control systems other than Git, such as .svn/, .hg/, and .bzr/.",
                        "todo": "Keep updated with new version control systems if they become relevant to the project."
                    },
                    {
                        "name": "ignore_devlm_specific_files",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Excludes DevLM-specific files and directories, such as /llm_cache/, /model_checkpoints/, and /api_keys.json.",
                        "todo": "Update as new DevLM-specific files or directories are introduced in the development process."
                    }
                ],
                "status": "in_progress",
                "last_updated_iteration": 5,
                "summary": "A configuration file used by Git to specify which files and directories should be ignored in version control. It helps maintain a clean repository by excluding unnecessary files, build artifacts, and sensitive information."
            },
            {
                "name": "docker-compose.yml",
                "functions": [
                    {
                        "name": "api_gateway",
                        "inputs": [
                            "GOLANG_BACKEND_URL",
                            "PYTHON_LLM_SERVICE_URL",
                            "ACTION_EXECUTOR_URL",
                            "CODE_EXECUTION_ENGINE_URL"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Acts as the entry point for the application, routing requests to appropriate services.",
                        "todo": "Implement load balancing and rate limiting"
                    },
                    {
                        "name": "golang_backend",
                        "inputs": [
                            "POSTGRES_URL",
                            "REDIS_URL",
                            "LOG_LEVEL"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Handles backend logic and database operations using Go.",
                        "todo": "Implement caching strategies and optimize database queries"
                    },
                    {
                        "name": "python_llm_service",
                        "inputs": [
                            "CLAUDE_API_KEY",
                            "POSTGRES_URL",
                            "REDIS_URL",
                            "LOG_LEVEL",
                            "MAX_CONCURRENT_REQUESTS"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "string",
                            "string",
                            "integer"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Manages interactions with the Claude API for language model processing.",
                        "todo": "Implement error handling and retries for API calls"
                    },
                    {
                        "name": "action_executor",
                        "inputs": [
                            "SEARCH_API_KEY",
                            "LOG_LEVEL",
                            "MAX_CONCURRENT_ACTIONS"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "integer"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Executes actions based on processed requests, including search operations.",
                        "todo": "Implement more action types and improve concurrency handling"
                    },
                    {
                        "name": "code_execution_engine",
                        "inputs": [
                            "MAX_EXECUTION_TIME",
                            "MAX_MEMORY",
                            "MAX_CPU",
                            "LOG_LEVEL",
                            "SUPPORTED_LANGUAGES"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "float",
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Executes code in a secure environment with resource limitations.",
                        "todo": "Implement sandboxing and improve security measures"
                    },
                    {
                        "name": "postgres",
                        "inputs": [
                            "POSTGRES_USER",
                            "POSTGRES_PASSWORD",
                            "POSTGRES_DB"
                        ],
                        "input_types": [
                            "string",
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Provides a PostgreSQL database for persistent data storage.",
                        "todo": "Implement regular backups and optimize for performance"
                    },
                    {
                        "name": "redis",
                        "inputs": [],
                        "input_types": [],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Provides a Redis cache for improved performance and data caching.",
                        "todo": "Implement data expiration policies and monitoring"
                    }
                ],
                "status": "in_progress",
                "summary": "This Docker Compose file defines a multi-service architecture for a development environment, including an API gateway, Golang backend, Python LLM service, action executor, code execution engine, PostgreSQL database, and Redis cache. It sets up the necessary configurations, dependencies, and networking for these services to work together.",
                "last_updated_iteration": 5
            },
            {
                "name": ".golangci.yml",
                "functions": [
                    {
                        "name": "run",
                        "inputs": [
                            "timeout",
                            "modules-download-mode"
                        ],
                        "input_types": [
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Configures the runtime settings for golangci-lint",
                        "todo": "Consider adjusting timeout if needed for larger projects"
                    },
                    {
                        "name": "linters",
                        "inputs": [
                            "enable"
                        ],
                        "input_types": [
                            "array of strings"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Specifies which linters to enable for the project",
                        "todo": "Regularly review and update the list of enabled linters"
                    },
                    {
                        "name": "linters-settings",
                        "inputs": [
                            "various linter-specific settings"
                        ],
                        "input_types": [
                            "mixed"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Configures specific settings for individual linters",
                        "todo": "Periodically review and adjust linter settings based on project needs"
                    },
                    {
                        "name": "issues",
                        "inputs": [
                            "exclude-use-default",
                            "max-issues-per-linter",
                            "max-same-issues",
                            "exclude-rules"
                        ],
                        "input_types": [
                            "boolean",
                            "number",
                            "number",
                            "array of objects"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Configures how issues are reported and which ones to exclude",
                        "todo": "Regularly review exclude rules to ensure they're still relevant"
                    },
                    {
                        "name": "output",
                        "inputs": [
                            "format",
                            "print-issued-lines",
                            "print-linter-name",
                            "sort-results",
                            "uniq-by-line"
                        ],
                        "input_types": [
                            "string",
                            "boolean",
                            "boolean",
                            "boolean",
                            "boolean"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Configures how the linter output is formatted and displayed",
                        "todo": "Consider adjusting output format based on CI/CD pipeline requirements"
                    },
                    {
                        "name": "severity",
                        "inputs": [
                            "default-severity",
                            "rules"
                        ],
                        "input_types": [
                            "string",
                            "array of objects"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Sets the severity levels for different linters and rules",
                        "todo": "Periodically review severity levels to ensure they align with project standards"
                    },
                    {
                        "name": "custom",
                        "inputs": [
                            "project-name",
                            "maintainer-email"
                        ],
                        "input_types": [
                            "string",
                            "string"
                        ],
                        "outputs": [],
                        "output_types": [],
                        "summary": "Defines custom project-specific information",
                        "todo": "Update maintainer email if it changes"
                    }
                ],
                "status": "in_progress",
                "summary": "Configuration file for golangci-lint, a fast Go linters runner. It specifies various linters, their settings, and custom rules for the project.",
                "last_updated_iteration": 5
            },
            {
                "name": ".pre-commit-config.yaml",
                "functions": [
                    {
                        "name": "pre-commit-hooks",
                        "inputs": [
                            "git_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "modified_files"
                        ],
                        "output_types": [
                            "file_list"
                        ],
                        "summary": "Runs various pre-commit hooks to check for trailing whitespace, end-of-file issues, YAML validity, and large file additions.",
                        "todo": "Consider adding more specific hooks for project requirements."
                    },
                    {
                        "name": "black",
                        "inputs": [
                            "python_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "formatted_python_files"
                        ],
                        "output_types": [
                            "file_list"
                        ],
                        "summary": "Formats Python code using the Black formatter with a specified line length.",
                        "todo": "Ensure all team members are using the same Black version for consistency."
                    },
                    {
                        "name": "isort",
                        "inputs": [
                            "python_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "sorted_python_files"
                        ],
                        "output_types": [
                            "file_list"
                        ],
                        "summary": "Sorts Python imports using isort, configured to be compatible with Black.",
                        "todo": "Consider adding custom import sections if needed for the project."
                    },
                    {
                        "name": "flake8",
                        "inputs": [
                            "python_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "linting_results"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Lints Python code using Flake8 with custom line length and ignore rules.",
                        "todo": "Review ignored rules and consider addressing them in the codebase."
                    },
                    {
                        "name": "mypy",
                        "inputs": [
                            "python_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "type_check_results"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Performs static type checking on Python code using mypy.",
                        "todo": "Gradually remove the '--ignore-missing-imports' flag by adding proper type stubs."
                    },
                    {
                        "name": "golangci-lint",
                        "inputs": [
                            "go_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "linting_results"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Runs golangci-lint on Go code with a custom configuration.",
                        "todo": "Review and update .golangci.yml regularly to match project needs."
                    },
                    {
                        "name": "go-hooks",
                        "inputs": [
                            "go_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "formatted_go_files",
                            "vet_results",
                            "cyclo_results",
                            "test_results"
                        ],
                        "output_types": [
                            "file_list",
                            "report",
                            "report",
                            "report"
                        ],
                        "summary": "Runs various Go-related hooks including formatting, vetting, cyclomatic complexity checking, and testing.",
                        "todo": "Consider adjusting the cyclomatic complexity threshold if needed."
                    },
                    {
                        "name": "check-dev-txt",
                        "inputs": [
                            "dev.txt"
                        ],
                        "input_types": [
                            "file"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Checks the dev.txt file for consistency and correctness.",
                        "todo": "Implement the check_dev_txt.py script with specific validation rules."
                    },
                    {
                        "name": "update-changelog",
                        "inputs": [
                            "CHANGELOG.md",
                            "version.txt"
                        ],
                        "input_types": [
                            "file",
                            "file"
                        ],
                        "outputs": [
                            "updated_changelog"
                        ],
                        "output_types": [
                            "file"
                        ],
                        "summary": "Updates the CHANGELOG.md file based on version changes.",
                        "todo": "Ensure the update_changelog.py script follows the project's changelog format."
                    },
                    {
                        "name": "run-tests",
                        "inputs": [
                            "go_files",
                            "python_files"
                        ],
                        "input_types": [
                            "file_list",
                            "file_list"
                        ],
                        "outputs": [
                            "test_results"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Runs tests for both Go and Python code.",
                        "todo": "Optimize test runtime and consider parallel test execution."
                    },
                    {
                        "name": "check-api-docs",
                        "inputs": [
                            "api_files",
                            "doc_files"
                        ],
                        "input_types": [
                            "file_list",
                            "file_list"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks API documentation for completeness and accuracy.",
                        "todo": "Implement the check_api_docs.py script with comprehensive validation rules."
                    },
                    {
                        "name": "check-security",
                        "inputs": [
                            "project_dependencies"
                        ],
                        "input_types": [
                            "list"
                        ],
                        "outputs": [
                            "security_report"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks for security vulnerabilities in project dependencies using Safety.",
                        "todo": "Set up a process for regular security updates and patches."
                    },
                    {
                        "name": "check-dependencies",
                        "inputs": [
                            "project_dependencies"
                        ],
                        "input_types": [
                            "list"
                        ],
                        "outputs": [
                            "outdated_dependencies"
                        ],
                        "output_types": [
                            "list"
                        ],
                        "summary": "Checks for outdated dependencies in the project.",
                        "todo": "Implement a strategy for keeping dependencies up-to-date."
                    },
                    {
                        "name": "check-code-complexity",
                        "inputs": [
                            "python_files",
                            "go_files"
                        ],
                        "input_types": [
                            "file_list",
                            "file_list"
                        ],
                        "outputs": [
                            "complexity_report"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks code complexity for Python and Go files.",
                        "todo": "Define complexity thresholds and implement the check_complexity.py script."
                    },
                    {
                        "name": "validate-ci-config",
                        "inputs": [
                            "ci_config_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Validates CI configuration files.",
                        "todo": "Implement the validate_ci_config.py script with specific CI configuration rules."
                    },
                    {
                        "name": "check-env-variables",
                        "inputs": [
                            ".env.example"
                        ],
                        "input_types": [
                            "file"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks environment variables for consistency and completeness.",
                        "todo": "Implement the check_env_variables.py script with environment variable validation rules."
                    },
                    {
                        "name": "lint-dockerfile",
                        "inputs": [
                            "Dockerfile"
                        ],
                        "input_types": [
                            "file"
                        ],
                        "outputs": [
                            "linting_results"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Lints Dockerfile using Hadolint.",
                        "todo": "Regularly update Hadolint and review its rules for relevance to the project."
                    },
                    {
                        "name": "check-api-versioning",
                        "inputs": [
                            "api_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "versioning_report"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks API versioning for consistency and correctness.",
                        "todo": "Implement the check_api_versioning.py script with specific versioning rules."
                    },
                    {
                        "name": "check-commit-message",
                        "inputs": [
                            "commit_message"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Checks commit messages for adherence to project standards.",
                        "todo": "Implement the check_commit_message.py script with commit message format rules."
                    },
                    {
                        "name": "check-branch-name",
                        "inputs": [
                            "branch_name"
                        ],
                        "input_types": [
                            "string"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "boolean"
                        ],
                        "summary": "Checks branch names for adherence to project standards.",
                        "todo": "Implement the check_branch_name.py script with branch naming conventions."
                    },
                    {
                        "name": "generate-api-docs",
                        "inputs": [
                            "api_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "generated_docs"
                        ],
                        "output_types": [
                            "file_list"
                        ],
                        "summary": "Generates API documentation from source files.",
                        "todo": "Implement the generate_api_docs.py script with the chosen documentation generation tool."
                    },
                    {
                        "name": "update-requirements",
                        "inputs": [
                            "requirements.in"
                        ],
                        "input_types": [
                            "file"
                        ],
                        "outputs": [
                            "requirements.txt"
                        ],
                        "output_types": [
                            "file"
                        ],
                        "summary": "Updates requirements.txt file based on requirements.in.",
                        "todo": "Ensure all developers use the same pip-tools version for consistency."
                    },
                    {
                        "name": "check-file-encoding",
                        "inputs": [
                            "text_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "encoding_report"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks text files for correct encoding.",
                        "todo": "Implement the check_file_encoding.py script with project-specific encoding rules."
                    },
                    {
                        "name": "check-database-migrations",
                        "inputs": [
                            "migration_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks database migration files for correctness and conflicts.",
                        "todo": "Implement the check_database_migrations.py script with specific migration validation rules."
                    },
                    {
                        "name": "validate-json",
                        "inputs": [
                            "json_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Validates JSON files for correct syntax and structure.",
                        "todo": "Implement the validate_json.py script with any project-specific JSON validation rules."
                    },
                    {
                        "name": "check-api-response-schemas",
                        "inputs": [
                            "api_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "validation_result"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks API response schemas for consistency and correctness.",
                        "todo": "Implement the check_api_response_schemas.py script with specific schema validation rules."
                    },
                    {
                        "name": "check-python-debug-statements",
                        "inputs": [
                            "python_files"
                        ],
                        "input_types": [
                            "file_list"
                        ],
                        "outputs": [
                            "debug_statement_report"
                        ],
                        "output_types": [
                            "report"
                        ],
                        "summary": "Checks Python files for debug statements that should not be in production code.",
                        "todo": "Implement the check_python_debug_statements.py script with rules for identifying debug statements."
                    }
                ],
                "status": "in_progress",
                "summary": "Configuration file for pre-commit hooks to enforce code quality, formatting, and testing standards across multiple programming languages and tools.",
                "last_updated_iteration": 5
            }
        ],
        "directories": {
            "cmd": {
                "files": [],
                "directories": {
                    "api": {
                        "files": [
                            {
                                "name": "main.go",
                                "functions": [
                                    {
                                        "name": "main",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "The main function initializes all services, sets up the server, and handles graceful shutdown. It loads configuration, connects to PostgreSQL and Redis, initializes services and handlers, sets up health check endpoint, and starts the server with retry logic.",
                                        "todo": "Consider implementing more comprehensive error handling and recovery mechanisms."
                                    },
                                    {
                                        "name": "health check handler",
                                        "inputs": [
                                            "w",
                                            "r"
                                        ],
                                        "input_types": [
                                            "http.ResponseWriter",
                                            "*http.Request"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "An anonymous function that serves as a health check endpoint. It checks the status of the database connection, Redis connection, and LLM service.",
                                        "todo": "Consider implementing more detailed health checks and returning structured health information."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This is the main entry point for a server application that integrates various services including database, caching, LLM (Language Model) client, and API handling. It sets up the server, initializes connections to PostgreSQL and Redis, and implements graceful shutdown.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "worker": {
                        "files": [
                            {
                                "name": "main.go",
                                "functions": [
                                    {
                                        "name": "main",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "The main function initializes the application, starts the worker, and handles graceful shutdown on receiving termination signals.",
                                        "todo": "Consider adding configuration validation and logging enhancements."
                                    },
                                    {
                                        "name": "startWorker",
                                        "inputs": [
                                            "ctx",
                                            "w"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Starts the worker with retry logic, implementing exponential backoff for error recovery.",
                                        "todo": "Implement more sophisticated error handling and consider making retry parameters configurable."
                                    },
                                    {
                                        "name": "gracefulShutdown",
                                        "inputs": [
                                            "ctx",
                                            "w"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Attempts to gracefully shut down the worker within a given context timeout.",
                                        "todo": "Add more detailed logging for shutdown progress and consider implementing a phased shutdown approach."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains the main entry point for a worker application. It handles configuration loading, worker initialization, graceful shutdown, and error recovery with retry logic.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "llm_service": {
                        "files": [
                            {
                                "name": "main.py",
                                "functions": [
                                    {
                                        "name": "call_claude",
                                        "inputs": [
                                            "conversation"
                                        ],
                                        "input_types": [
                                            "Conversation"
                                        ],
                                        "outputs": [
                                            "response"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Calls the Claude API with the given conversation and returns the response.",
                                        "todo": "Consider implementing retry logic for network errors."
                                    },
                                    {
                                        "name": "generate_code",
                                        "inputs": [
                                            "conversation"
                                        ],
                                        "input_types": [
                                            "Conversation"
                                        ],
                                        "outputs": [
                                            "generated_text"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Generates code based on the given conversation using the Claude API.",
                                        "todo": "Implement input validation for conversation structure."
                                    },
                                    {
                                        "name": "analyze_requirements",
                                        "inputs": [
                                            "conversation"
                                        ],
                                        "input_types": [
                                            "Conversation"
                                        ],
                                        "outputs": [
                                            "analysis"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Analyzes requirements based on the given conversation using the Claude API.",
                                        "todo": "Add more specific error handling for different types of analysis failures."
                                    },
                                    {
                                        "name": "refine_code",
                                        "inputs": [
                                            "conversation"
                                        ],
                                        "input_types": [
                                            "Conversation"
                                        ],
                                        "outputs": [
                                            "refined_code"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Refines code based on the given conversation using the Claude API.",
                                        "todo": "Implement a mechanism to track and limit the number of refinement iterations."
                                    },
                                    {
                                        "name": "execute_code",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "CodeExecutionRequest"
                                        ],
                                        "outputs": [
                                            "stdout",
                                            "stderr",
                                            "return_code"
                                        ],
                                        "output_types": [
                                            "str",
                                            "str",
                                            "int"
                                        ],
                                        "summary": "Executes the provided code in a sandboxed environment and returns the result.",
                                        "todo": "Enhance security measures for code execution, such as resource limits and more robust sandboxing."
                                    },
                                    {
                                        "name": "web_search",
                                        "inputs": [
                                            "query",
                                            "page",
                                            "results_per_page"
                                        ],
                                        "input_types": [
                                            "str",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "search_results"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Performs a web search using the Bing Search API and caches results in Redis.",
                                        "todo": "Implement pagination for large result sets and add option for different search types (e.g., images, news)."
                                    },
                                    {
                                        "name": "startup_event",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Initializes the LLM Service and establishes a connection to Redis.",
                                        "todo": "Implement health checks for dependent services (Claude API, Bing Search API)."
                                    },
                                    {
                                        "name": "shutdown_event",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Gracefully shuts down the LLM Service and closes the Redis connection.",
                                        "todo": "Implement cleanup of any temporary resources or pending tasks."
                                    },
                                    {
                                        "name": "log_requests",
                                        "inputs": [
                                            "request",
                                            "call_next"
                                        ],
                                        "input_types": [
                                            "Request",
                                            "function"
                                        ],
                                        "outputs": [
                                            "response"
                                        ],
                                        "output_types": [
                                            "Response"
                                        ],
                                        "summary": "Middleware function to log incoming requests and their responses.",
                                        "todo": "Add more detailed logging, such as request headers and response times."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file implements a FastAPI application for an LLM (Language Model) service. It includes endpoints for generating code, analyzing requirements, refining code, executing code, and performing web searches. The service integrates with Claude API for AI-powered tasks and Bing Search API for web searches. It also implements Redis caching for search results.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "internal": {
                "files": [],
                "directories": {
                    "api": {
                        "files": [],
                        "directories": {
                            "handlers": {
                                "files": [
                                    {
                                        "name": "project_handler.go",
                                        "functions": [
                                            {
                                                "name": "NewProjectHandler",
                                                "inputs": [
                                                    "projectService"
                                                ],
                                                "input_types": [
                                                    "*services.ProjectService"
                                                ],
                                                "outputs": [
                                                    "*ProjectHandler",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*ProjectHandler",
                                                    "error"
                                                ],
                                                "summary": "Creates a new ProjectHandler instance with the given ProjectService",
                                                "todo": "Consider adding additional error checks or logging"
                                            },
                                            {
                                                "name": "CreateProject",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Handles the creation of a new project",
                                                "todo": "Add more detailed error responses"
                                            },
                                            {
                                                "name": "GetProject",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Retrieves a specific project by ID",
                                                "todo": "Implement caching for frequently accessed projects"
                                            },
                                            {
                                                "name": "UpdateProject",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Updates an existing project",
                                                "todo": "Add support for partial updates"
                                            },
                                            {
                                                "name": "DeleteProject",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Deletes a project by ID",
                                                "todo": "Implement soft delete functionality"
                                            },
                                            {
                                                "name": "ListProjects",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Lists projects with pagination, sorting, and filtering",
                                                "todo": "Optimize query performance for large datasets"
                                            },
                                            {
                                                "name": "getProjectIDFromRequest",
                                                "inputs": [
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "models.ProjectID",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "models.ProjectID",
                                                    "error"
                                                ],
                                                "summary": "Extracts and validates the project ID from the request",
                                                "todo": "Consider using a custom type for project IDs"
                                            },
                                            {
                                                "name": "getPaginationParams",
                                                "inputs": [
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "int",
                                                    "int"
                                                ],
                                                "output_types": [
                                                    "int",
                                                    "int"
                                                ],
                                                "summary": "Extracts and validates pagination parameters from the request",
                                                "todo": "Add support for cursor-based pagination"
                                            },
                                            {
                                                "name": "validateProject",
                                                "inputs": [
                                                    "project"
                                                ],
                                                "input_types": [
                                                    "*models.Project"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Validates the project data",
                                                "todo": "Implement more comprehensive validation rules"
                                            },
                                            {
                                                "name": "isValidStatus",
                                                "inputs": [
                                                    "status"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Checks if the given status is valid",
                                                "todo": "Consider using an enum for project statuses"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains the ProjectHandler struct and its methods for handling HTTP requests related to projects. It includes functions for creating, retrieving, updating, deleting, and listing projects, as well as helper functions for validation and parameter parsing.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "task_handler.go",
                                        "functions": [
                                            {
                                                "name": "NewTaskHandler",
                                                "inputs": [
                                                    "taskService",
                                                    "cache"
                                                ],
                                                "input_types": [
                                                    "*services.TaskService",
                                                    "*services.CacheService"
                                                ],
                                                "outputs": [
                                                    "*TaskHandler",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*TaskHandler",
                                                    "error"
                                                ],
                                                "summary": "Creates a new TaskHandler instance with the given TaskService and CacheService",
                                                "todo": "Consider adding validation for taskService and cache methods"
                                            },
                                            {
                                                "name": "CreateTask",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Handles the creation of a new task",
                                                "todo": "Implement input sanitization for task fields"
                                            },
                                            {
                                                "name": "GetTask",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Retrieves a task by ID, with caching",
                                                "todo": "Consider implementing ETags for cache validation"
                                            },
                                            {
                                                "name": "UpdateTask",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Updates an existing task",
                                                "todo": "Implement partial updates (PATCH) functionality"
                                            },
                                            {
                                                "name": "DeleteTask",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Deletes a task by ID",
                                                "todo": "Consider implementing soft delete functionality"
                                            },
                                            {
                                                "name": "ListTasks",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Lists tasks with pagination, sorting, and filtering",
                                                "todo": "Implement more advanced filtering options"
                                            },
                                            {
                                                "name": "getTaskIDFromRequest",
                                                "inputs": [
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "int",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int",
                                                    "error"
                                                ],
                                                "summary": "Extracts and validates the task ID from the request",
                                                "todo": "Consider using a custom type for TaskID"
                                            },
                                            {
                                                "name": "getPaginationParams",
                                                "inputs": [
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "int",
                                                    "int"
                                                ],
                                                "output_types": [
                                                    "int",
                                                    "int"
                                                ],
                                                "summary": "Extracts and validates pagination parameters from the request",
                                                "todo": "Add support for cursor-based pagination"
                                            },
                                            {
                                                "name": "validateTask",
                                                "inputs": [
                                                    "task"
                                                ],
                                                "input_types": [
                                                    "*models.Task"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Validates a task object",
                                                "todo": "Add more comprehensive validation rules"
                                            },
                                            {
                                                "name": "isValidStatus",
                                                "inputs": [
                                                    "status"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Checks if a given status is valid",
                                                "todo": "Consider using an enum for task statuses"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a TaskHandler struct and associated methods for handling HTTP requests related to task management. It includes functionality for creating, retrieving, updating, deleting, and listing tasks, with caching and error handling.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "health_handler.go",
                                        "functions": [
                                            {
                                                "name": "NewHealthHandler",
                                                "inputs": [
                                                    "cfg",
                                                    "db",
                                                    "cache"
                                                ],
                                                "input_types": [
                                                    "*config.Config",
                                                    "*database.Database",
                                                    "*cache.Cache"
                                                ],
                                                "outputs": [
                                                    "*HealthHandler",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*HealthHandler",
                                                    "error"
                                                ],
                                                "summary": "Creates and initializes a new HealthHandler instance with the provided configuration, database, and cache.",
                                                "todo": "Consider adding validation for the individual fields of the input parameters."
                                            },
                                            {
                                                "name": "CheckHealth",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Handles HTTP requests for health checks, providing detailed information about the application's status, uptime, version, and resource usage.",
                                                "todo": "Add error handling for component checks and consider including more detailed metrics."
                                            },
                                            {
                                                "name": "CheckReadiness",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Handles HTTP requests for readiness checks, verifying the availability of critical components like the database and cache.",
                                                "todo": "Consider adding more components to the readiness check and implementing a more sophisticated readiness logic."
                                            },
                                            {
                                                "name": "CheckLiveness",
                                                "inputs": [
                                                    "w",
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "http.ResponseWriter",
                                                    "*http.Request"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Handles HTTP requests for liveness checks, indicating whether the application is running and not in a shutdown state.",
                                                "todo": "Consider adding more sophisticated liveness checks beyond just checking the shutdown state."
                                            },
                                            {
                                                "name": "addComponentChecks",
                                                "inputs": [
                                                    "health"
                                                ],
                                                "input_types": [
                                                    "map[string]interface{}"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Adds the status of various components (database, cache) to the health check response.",
                                                "todo": "Consider making this method more extensible to easily add new component checks."
                                            },
                                            {
                                                "name": "ByteCountIEC",
                                                "inputs": [
                                                    "b"
                                                ],
                                                "input_types": [
                                                    "uint64"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Converts a byte count to a human-readable string using IEC units (KiB, MiB, etc.).",
                                                "todo": "Consider moving this utility function to a separate package for broader reuse."
                                            },
                                            {
                                                "name": "StartShutdown",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Marks the application as entering shutdown state.",
                                                "todo": "Consider adding a callback or event system to notify other parts of the application about the shutdown."
                                            },
                                            {
                                                "name": "IsShuttingDown",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Checks if the application is currently in a shutdown state.",
                                                "todo": "Consider adding a timestamp for when the shutdown was initiated."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a HealthHandler struct and associated methods for handling health, readiness, and liveness checks in a web application. It provides functionality to monitor the application's status, uptime, memory usage, and component health.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "middleware": {
                                "files": [
                                    {
                                        "name": "auth_middleware.go",
                                        "functions": [
                                            {
                                                "name": "init",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Initializes the JWT secret and Redis client",
                                                "todo": "Consider moving initialization to a separate function for better testability"
                                            },
                                            {
                                                "name": "AuthMiddleware",
                                                "inputs": [
                                                    "next"
                                                ],
                                                "input_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "outputs": [
                                                    "http.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "summary": "Middleware function that validates JWT tokens and adds user information to the request context",
                                                "todo": "Add rate limiting to prevent brute force attacks"
                                            },
                                            {
                                                "name": "extractToken",
                                                "inputs": [
                                                    "r"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "token"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Extracts the JWT token from the request's Authorization header, cookie, or query parameter",
                                                "todo": "Consider prioritizing token sources and logging when a lower-priority source is used"
                                            },
                                            {
                                                "name": "validateToken",
                                                "inputs": [
                                                    "tokenString"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "claims",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "jwt.MapClaims",
                                                    "error"
                                                ],
                                                "summary": "Validates the JWT token and checks for revocation",
                                                "todo": "Implement token refresh mechanism to extend token validity"
                                            },
                                            {
                                                "name": "checkTokenRevocation",
                                                "inputs": [
                                                    "jti"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "isRevoked",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "bool",
                                                    "error"
                                                ],
                                                "summary": "Checks if a token has been revoked using Redis",
                                                "todo": "Implement caching to reduce Redis queries"
                                            },
                                            {
                                                "name": "addUserToContext",
                                                "inputs": [
                                                    "ctx",
                                                    "claims"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "jwt.MapClaims"
                                                ],
                                                "outputs": [
                                                    "context.Context"
                                                ],
                                                "output_types": [
                                                    "context.Context"
                                                ],
                                                "summary": "Adds user information from JWT claims to the request context",
                                                "todo": "Add more detailed logging for missing or invalid claims"
                                            },
                                            {
                                                "name": "RevokeToken",
                                                "inputs": [
                                                    "jti",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Revokes a token by adding it to the Redis revocation list",
                                                "todo": "Implement a cleanup mechanism for expired revoked tokens"
                                            },
                                            {
                                                "name": "RefreshToken",
                                                "inputs": [
                                                    "oldToken"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "newToken",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Refreshes a valid token by creating a new one with updated expiration time",
                                                "todo": "Add a maximum refresh limit to prevent indefinite token use"
                                            },
                                            {
                                                "name": "BatchRevokeTokens",
                                                "inputs": [
                                                    "jtis",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "[]string",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Revokes multiple tokens in a single Redis operation",
                                                "todo": "Implement error handling for partial batch revocation failures"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements authentication middleware for a web application. It includes functions for JWT token validation, token extraction, user context management, and token revocation using Redis.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "logging_middleware.go",
                                        "functions": [
                                            {
                                                "name": "init",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Initializes the logger with standard output and specific flags.",
                                                "todo": "Consider making the logger configurable from outside the package."
                                            },
                                            {
                                                "name": "LoggingMiddleware",
                                                "inputs": [
                                                    "next"
                                                ],
                                                "input_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "outputs": [
                                                    "http.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "summary": "Wraps an HTTP handler with logging middleware using default configuration.",
                                                "todo": "Add option to customize log destination."
                                            },
                                            {
                                                "name": "LoggingMiddlewareWithConfig",
                                                "inputs": [
                                                    "next",
                                                    "config"
                                                ],
                                                "input_types": [
                                                    "http.HandlerFunc",
                                                    "LogConfig"
                                                ],
                                                "outputs": [
                                                    "http.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "summary": "Wraps an HTTP handler with logging middleware using custom configuration.",
                                                "todo": "Implement request body logging for more HTTP methods."
                                            },
                                            {
                                                "name": "formatLogEntry",
                                                "inputs": [
                                                    "entry"
                                                ],
                                                "input_types": [
                                                    "map[string]interface{}"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Formats a log entry map into a string.",
                                                "todo": "Consider adding more formatting options."
                                            },
                                            {
                                                "name": "ErrorLoggingMiddleware",
                                                "inputs": [
                                                    "next"
                                                ],
                                                "input_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "outputs": [
                                                    "http.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "summary": "Wraps an HTTP handler with error logging middleware to catch and log panics.",
                                                "todo": "Add option to customize error response."
                                            },
                                            {
                                                "name": "SetLogOutput",
                                                "inputs": [
                                                    "w"
                                                ],
                                                "input_types": [
                                                    "io.Writer"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Sets the output destination for the logger.",
                                                "todo": "Add error handling for invalid writers."
                                            },
                                            {
                                                "name": "SetLogFlags",
                                                "inputs": [
                                                    "flags"
                                                ],
                                                "input_types": [
                                                    "int"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Sets the flags for the logger.",
                                                "todo": "Add validation for supported flag combinations."
                                            },
                                            {
                                                "name": "contains",
                                                "inputs": [
                                                    "slice",
                                                    "item"
                                                ],
                                                "input_types": [
                                                    "[]string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Checks if a string is present in a slice of strings.",
                                                "todo": "Consider using a more efficient data structure for large slices."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements HTTP logging middleware for Go applications. It provides functionality to log HTTP requests and responses, with customizable configurations for excluding headers, bodies, and setting log formats.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "rate_limiter.go",
                                        "functions": [
                                            {
                                                "name": "NewRateLimiter",
                                                "inputs": [
                                                    "r",
                                                    "b",
                                                    "expiry"
                                                ],
                                                "input_types": [
                                                    "rate.Limit",
                                                    "int",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "*RateLimiter"
                                                ],
                                                "output_types": [
                                                    "*RateLimiter"
                                                ],
                                                "summary": "Creates a new RateLimiter instance with the specified rate, burst, and expiry duration.",
                                                "todo": "Consider adding options for customizing cleanup interval."
                                            },
                                            {
                                                "name": "getLimiter",
                                                "inputs": [
                                                    "ip"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*rate.Limiter"
                                                ],
                                                "output_types": [
                                                    "*rate.Limiter"
                                                ],
                                                "summary": "Retrieves or creates a rate limiter for the given IP address.",
                                                "todo": "Optimize concurrent access patterns for high-traffic scenarios."
                                            },
                                            {
                                                "name": "periodicCleanup",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Periodically removes expired entries from the rate limiter.",
                                                "todo": "Consider implementing a more efficient cleanup algorithm for large-scale deployments."
                                            },
                                            {
                                                "name": "RateLimitMiddleware",
                                                "inputs": [
                                                    "next"
                                                ],
                                                "input_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "outputs": [
                                                    "http.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "http.HandlerFunc"
                                                ],
                                                "summary": "HTTP middleware that applies rate limiting to incoming requests based on IP address.",
                                                "todo": "Add support for custom response messages and status codes."
                                            },
                                            {
                                                "name": "GetLimitForIP",
                                                "inputs": [
                                                    "ip"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "rate.Limit",
                                                    "int",
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "rate.Limit",
                                                    "int",
                                                    "bool"
                                                ],
                                                "summary": "Retrieves the current rate limit and burst for a given IP address.",
                                                "todo": "Consider adding caching mechanism for frequently accessed IPs."
                                            },
                                            {
                                                "name": "SetLimitForIP",
                                                "inputs": [
                                                    "ip",
                                                    "r",
                                                    "b"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "rate.Limit",
                                                    "int"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Sets a custom rate limit and burst for a specific IP address.",
                                                "todo": "Implement validation for input parameters."
                                            },
                                            {
                                                "name": "RemoveLimitForIP",
                                                "inputs": [
                                                    "ip"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Removes the rate limit for a specific IP address.",
                                                "todo": "Add logging for removed rate limits."
                                            },
                                            {
                                                "name": "GetAllActiveLimits",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "map[string]rate.Limit"
                                                ],
                                                "output_types": [
                                                    "map[string]rate.Limit"
                                                ],
                                                "summary": "Retrieves all active rate limits for all IP addresses.",
                                                "todo": "Implement pagination for large result sets."
                                            },
                                            {
                                                "name": "GetRemainingQuota",
                                                "inputs": [
                                                    "ip"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int",
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "int",
                                                    "bool"
                                                ],
                                                "summary": "Retrieves the remaining quota for a given IP address.",
                                                "todo": "Consider adding a method to get time until quota reset."
                                            },
                                            {
                                                "name": "ResetLimitForIP",
                                                "inputs": [
                                                    "ip"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Resets the rate limit for a specific IP address to the default values.",
                                                "todo": "Add option to specify custom reset values."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a rate limiter for HTTP requests based on IP addresses. It provides functionality to limit the rate of incoming requests, clean up expired entries, and manage rate limits for specific IPs.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "router": {
                                "files": [
                                    {
                                        "name": "router.go",
                                        "functions": [
                                            {
                                                "name": "SetupRouter",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "*gin.Engine"
                                                ],
                                                "output_types": [
                                                    "*gin.Engine"
                                                ],
                                                "summary": "Initializes and configures the Gin router with middleware and route groups for different API endpoints.",
                                                "todo": "Consider adding more comprehensive error handling and logging for each route."
                                            },
                                            {
                                                "name": "rateLimiter",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "gin.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "gin.HandlerFunc"
                                                ],
                                                "summary": "Creates a middleware function that implements rate limiting based on configuration or default values.",
                                                "todo": "Implement a more sophisticated rate limiting strategy, possibly with different limits for different routes or user roles."
                                            },
                                            {
                                                "name": "errorHandler",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "gin.HandlerFunc"
                                                ],
                                                "output_types": [
                                                    "gin.HandlerFunc"
                                                ],
                                                "summary": "Creates a middleware function that handles and logs errors, returning them as JSON responses.",
                                                "todo": "Enhance error handling to include more detailed error codes and consider implementing a custom error type for better categorization."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file sets up and configures the Gin router for the API, including middleware, route groups, and handlers for various endpoints.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    },
                    "core": {
                        "files": [],
                        "directories": {
                            "orchestrator": {
                                "files": [
                                    {
                                        "name": "orchestrator.go",
                                        "functions": [
                                            {
                                                "name": "NewOrchestrator",
                                                "inputs": [
                                                    "llmService",
                                                    "actionExecutor",
                                                    "codeExecutor"
                                                ],
                                                "input_types": [
                                                    "*llm.Service",
                                                    "*action.Executor",
                                                    "*codeexecution.Executor"
                                                ],
                                                "outputs": [
                                                    "*Orchestrator",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Orchestrator",
                                                    "error"
                                                ],
                                                "summary": "Creates a new Orchestrator instance with the provided services and executors.",
                                                "todo": "Consider adding validation for the input parameters."
                                            },
                                            {
                                                "name": "ProcessProject",
                                                "inputs": [
                                                    "ctx",
                                                    "projectDir"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Processes a project by analyzing requirements, generating tasks, building a task graph, and executing tasks.",
                                                "todo": "Implement error recovery and rollback mechanisms for failed tasks."
                                            },
                                            {
                                                "name": "buildTaskGraph",
                                                "inputs": [
                                                    "tasks"
                                                ],
                                                "input_types": [
                                                    "[]models.Task"
                                                ],
                                                "outputs": [
                                                    "*models.TaskGraph",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*models.TaskGraph",
                                                    "error"
                                                ],
                                                "summary": "Builds a task graph from the given tasks and checks for cyclic dependencies.",
                                                "todo": "Optimize the cycle detection algorithm for large task graphs."
                                            },
                                            {
                                                "name": "detectCycle",
                                                "inputs": [
                                                    "graph"
                                                ],
                                                "input_types": [
                                                    "*models.TaskGraph"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Detects cycles in the task graph using depth-first search.",
                                                "todo": "Consider implementing a more efficient cycle detection algorithm."
                                            },
                                            {
                                                "name": "executeTasks",
                                                "inputs": [
                                                    "ctx",
                                                    "taskGraph",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "*models.TaskGraph",
                                                    "string",
                                                    "*models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Executes tasks in parallel using worker goroutines.",
                                                "todo": "Implement dynamic worker scaling based on system resources."
                                            },
                                            {
                                                "name": "sortTasksByPriority",
                                                "inputs": [
                                                    "taskGraph"
                                                ],
                                                "input_types": [
                                                    "*models.TaskGraph"
                                                ],
                                                "outputs": [
                                                    "[]models.Task"
                                                ],
                                                "output_types": [
                                                    "[]models.Task"
                                                ],
                                                "summary": "Sorts tasks by priority in descending order.",
                                                "todo": "Consider implementing a more sophisticated sorting algorithm that takes dependencies into account."
                                            },
                                            {
                                                "name": "processTask",
                                                "inputs": [
                                                    "ctx",
                                                    "task",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.Task",
                                                    "string",
                                                    "*models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Processes a single task with retry logic and updates the project state.",
                                                "todo": "Implement adaptive retry intervals based on task complexity."
                                            },
                                            {
                                                "name": "executeTask",
                                                "inputs": [
                                                    "ctx",
                                                    "task",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.Task",
                                                    "string",
                                                    "*models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Executes a task by generating code, executing it, analyzing the result, and performing actions.",
                                                "todo": "Implement rollback mechanisms for failed task executions."
                                            },
                                            {
                                                "name": "performActions",
                                                "inputs": [
                                                    "ctx",
                                                    "analysis",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.ExecutionAnalysis",
                                                    "string",
                                                    "*models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Performs actions based on the execution analysis.",
                                                "todo": "Implement parallel execution of non-conflicting actions."
                                            },
                                            {
                                                "name": "executeAction",
                                                "inputs": [
                                                    "ctx",
                                                    "action",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.Action",
                                                    "string",
                                                    "*models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Executes a single action based on its type.",
                                                "todo": "Implement additional action types as needed."
                                            },
                                            {
                                                "name": "SaveProjectState",
                                                "inputs": [
                                                    "ctx",
                                                    "projectDir",
                                                    "state"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Saves the current project state to a JSON file.",
                                                "todo": "Implement compression for large project states."
                                            },
                                            {
                                                "name": "LoadProjectState",
                                                "inputs": [
                                                    "ctx",
                                                    "projectDir"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "models.ProjectState",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "models.ProjectState",
                                                    "error"
                                                ],
                                                "summary": "Loads the latest project state from a JSON file.",
                                                "todo": "Implement versioning for project state files."
                                            },
                                            {
                                                "name": "UpdateProjectState",
                                                "inputs": [
                                                    "ctx",
                                                    "projectDir",
                                                    "updatedState"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Updates the project state by merging the current state with the updated state.",
                                                "todo": "Implement conflict resolution for concurrent state updates."
                                            },
                                            {
                                                "name": "mergeProjectStates",
                                                "inputs": [
                                                    "current",
                                                    "updated"
                                                ],
                                                "input_types": [
                                                    "models.ProjectState",
                                                    "models.ProjectState"
                                                ],
                                                "outputs": [
                                                    "models.ProjectState"
                                                ],
                                                "output_types": [
                                                    "models.ProjectState"
                                                ],
                                                "summary": "Merges two project states, giving priority to the updated state.",
                                                "todo": "Implement a more sophisticated merging strategy for complex state structures."
                                            },
                                            {
                                                "name": "mergeFileStates",
                                                "inputs": [
                                                    "existing",
                                                    "updated"
                                                ],
                                                "input_types": [
                                                    "models.FileState",
                                                    "models.FileState"
                                                ],
                                                "outputs": [
                                                    "models.FileState"
                                                ],
                                                "output_types": [
                                                    "models.FileState"
                                                ],
                                                "summary": "Merges two file states, giving priority to the updated state.",
                                                "todo": "Implement a diff-based merging strategy for file contents."
                                            },
                                            {
                                                "name": "mergeDiff",
                                                "inputs": [
                                                    "existingContent",
                                                    "updatedContent"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Merges the existing content with the updated content using a diff-based approach.",
                                                "todo": "Implement the diff-based merging algorithm."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements the Orchestrator struct and its methods for managing the execution of tasks in a project. It handles requirement analysis, task generation, task execution, and project state management.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "analyzer": {
                                "files": [
                                    {
                                        "name": "requirement_analyzer.go",
                                        "functions": [
                                            {
                                                "name": "NewRequirementAnalyzer",
                                                "inputs": [
                                                    "filePath",
                                                    "configPath"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*RequirementAnalyzer",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*RequirementAnalyzer",
                                                    "error"
                                                ],
                                                "summary": "Creates a new RequirementAnalyzer instance with the given file path and configuration path.",
                                                "todo": "Consider adding error handling for invalid config file content."
                                            },
                                            {
                                                "name": "loadConfig",
                                                "inputs": [
                                                    "configPath"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*Config",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Config",
                                                    "error"
                                                ],
                                                "summary": "Loads the configuration from the specified file path.",
                                                "todo": "Add validation for config values to ensure they are within acceptable ranges."
                                            },
                                            {
                                                "name": "validateFileContent",
                                                "inputs": [
                                                    "filePath",
                                                    "maxLineLength"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Validates the content of the input file, checking for empty files and line length limits.",
                                                "todo": "Consider adding more specific validation rules for requirement file format."
                                            },
                                            {
                                                "name": "AnalyzeRequirements",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "summary": "Reads and returns the requirements from the input file.",
                                                "todo": "Implement more sophisticated requirement parsing, such as handling multi-line requirements."
                                            },
                                            {
                                                "name": "ExtractKeywords",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "[]string"
                                                ],
                                                "outputs": [
                                                    "[]string"
                                                ],
                                                "output_types": [
                                                    "[]string"
                                                ],
                                                "summary": "Extracts and returns the most relevant keywords from the given requirements.",
                                                "todo": "Improve keyword extraction algorithm to consider domain-specific terminology."
                                            },
                                            {
                                                "name": "CategorizeRequirements",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "[]string"
                                                ],
                                                "outputs": [
                                                    "map[string][]string"
                                                ],
                                                "output_types": [
                                                    "map[string][]string"
                                                ],
                                                "summary": "Categorizes the given requirements into different types such as functional, non-functional, security, etc.",
                                                "todo": "Enhance categorization accuracy by implementing machine learning techniques."
                                            },
                                            {
                                                "name": "PrioritizeRequirements",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "[]string"
                                                ],
                                                "outputs": [
                                                    "[]string"
                                                ],
                                                "output_types": [
                                                    "[]string"
                                                ],
                                                "summary": "Prioritizes the given requirements based on various factors such as priority, impact, effort, and urgency.",
                                                "todo": "Implement a more sophisticated prioritization algorithm that considers dependencies between requirements."
                                            },
                                            {
                                                "name": "min",
                                                "inputs": [
                                                    "a",
                                                    "b"
                                                ],
                                                "input_types": [
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "int"
                                                ],
                                                "output_types": [
                                                    "int"
                                                ],
                                                "summary": "Returns the minimum of two integers.",
                                                "todo": "Consider using the built-in math.Min function instead of a custom implementation."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a RequirementAnalyzer that processes and analyzes software requirements from a given file. It includes functionality for loading configurations, validating file content, analyzing requirements, extracting keywords, categorizing requirements, and prioritizing them based on various factors.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "distributor": {
                                "files": [
                                    {
                                        "name": "task_distributor.go",
                                        "functions": [
                                            {
                                                "name": "NewTaskDistributor",
                                                "inputs": [
                                                    "maxConcurrency",
                                                    "llmService",
                                                    "executor",
                                                    "fsService"
                                                ],
                                                "input_types": [
                                                    "int",
                                                    "*llm.Service",
                                                    "*executor.Service",
                                                    "*filesystem.Service"
                                                ],
                                                "outputs": [
                                                    "*TaskDistributor",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*TaskDistributor",
                                                    "error"
                                                ],
                                                "summary": "Creates a new TaskDistributor with the specified concurrency and services",
                                                "todo": "Consider adding input validation for services"
                                            },
                                            {
                                                "name": "Start",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Starts the TaskDistributor by launching worker goroutines",
                                                "todo": "Implement error handling for worker start failures"
                                            },
                                            {
                                                "name": "Stop",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Stops the TaskDistributor and waits for all workers to finish",
                                                "todo": "Consider adding a context for cancellation"
                                            },
                                            {
                                                "name": "DistributeTasks",
                                                "inputs": [
                                                    "tasks"
                                                ],
                                                "input_types": [
                                                    "[]models.Task"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Distributes tasks to workers in batches",
                                                "todo": "Implement more sophisticated task distribution strategy"
                                            },
                                            {
                                                "name": "NewWorker",
                                                "inputs": [
                                                    "id",
                                                    "taskQueue",
                                                    "llmService",
                                                    "executor",
                                                    "fsService"
                                                ],
                                                "input_types": [
                                                    "int",
                                                    "<-chan models.Task",
                                                    "*llm.Service",
                                                    "*executor.Service",
                                                    "*filesystem.Service"
                                                ],
                                                "outputs": [
                                                    "*Worker"
                                                ],
                                                "output_types": [
                                                    "*Worker"
                                                ],
                                                "summary": "Creates a new Worker with the specified ID and services",
                                                "todo": "Consider making WorkerConfig customizable"
                                            },
                                            {
                                                "name": "Start",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Starts the Worker and processes tasks from the queue",
                                                "todo": "Implement graceful shutdown mechanism"
                                            },
                                            {
                                                "name": "processTaskWithRetry",
                                                "inputs": [
                                                    "ctx",
                                                    "task"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.Task"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Processes a task with retry mechanism on failure",
                                                "todo": "Implement more sophisticated retry strategy"
                                            },
                                            {
                                                "name": "processTask",
                                                "inputs": [
                                                    "ctx",
                                                    "task"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "models.Task"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Processes a single task using LLM, executor, and file system services",
                                                "todo": "Implement error handling for partial task completion"
                                            },
                                            {
                                                "name": "persistTaskResult",
                                                "inputs": [
                                                    "task"
                                                ],
                                                "input_types": [
                                                    "models.Task"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Persists the task result",
                                                "todo": "Implement actual task result persistence"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a task distribution system with workers for concurrent task processing. It includes a TaskDistributor struct to manage the distribution of tasks and Worker structs to handle individual task processing.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "executor": {
                                "files": [
                                    {
                                        "name": "executor.go",
                                        "functions": [
                                            {
                                                "name": "NewExecutor",
                                                "inputs": [
                                                    "opts"
                                                ],
                                                "input_types": [
                                                    "...client.Opt"
                                                ],
                                                "outputs": [
                                                    "*Executor",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Executor",
                                                    "error"
                                                ],
                                                "summary": "Creates a new Executor instance with a Docker client",
                                                "todo": "Consider adding option to customize Docker client configuration"
                                            },
                                            {
                                                "name": "ExecuteCode",
                                                "inputs": [
                                                    "ctx",
                                                    "code",
                                                    "language"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Executes code in the specified programming language using Docker containers",
                                                "todo": "Add support for more programming languages and improve error handling"
                                            },
                                            {
                                                "name": "executeInDocker",
                                                "inputs": [
                                                    "ctx",
                                                    "code",
                                                    "image",
                                                    "command"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Creates and runs a Docker container to execute the provided code",
                                                "todo": "Implement better resource management and security measures"
                                            },
                                            {
                                                "name": "ReadFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Reads the content of a file at the specified path",
                                                "todo": "Add support for reading large files in chunks"
                                            },
                                            {
                                                "name": "WriteFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path",
                                                    "content"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Writes content to a file at the specified path with proper locking and error handling",
                                                "todo": "Implement file compression for large files"
                                            },
                                            {
                                                "name": "PerformWebSearch",
                                                "inputs": [
                                                    "ctx",
                                                    "query"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Performs a web search using an external API and caches the results",
                                                "todo": "Implement proper error handling for API failures and add support for pagination"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements an Executor struct that provides functionality for executing code in various programming languages using Docker containers, reading and writing files, and performing web searches.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    },
                    "executor": {
                        "files": [],
                        "directories": {
                            "actions": {
                                "files": [
                                    {
                                        "name": "action_executor.go",
                                        "functions": [
                                            {
                                                "name": "NewActionExecutor",
                                                "inputs": [
                                                    "searchAPIBaseURL"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*ActionExecutor"
                                                ],
                                                "output_types": [
                                                    "*ActionExecutor"
                                                ],
                                                "summary": "Creates a new ActionExecutor instance with the given search API base URL.",
                                                "todo": "Replace placeholder API key and search engine ID with actual values."
                                            },
                                            {
                                                "name": "ReadFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Reads the content of a file at the specified path.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "WriteFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path",
                                                    "content",
                                                    "perm"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "os.FileMode"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Writes content to a file at the specified path with given permissions, checking for available disk space.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "DeleteFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Deletes a file at the specified path after user confirmation.",
                                                "todo": "Implement actual confirmation mechanism in confirmDeletion method."
                                            },
                                            {
                                                "name": "ListDirectory",
                                                "inputs": [
                                                    "ctx",
                                                    "path",
                                                    "includeSubdirs"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "bool"
                                                ],
                                                "outputs": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "summary": "Lists files in a directory, optionally including subdirectories, and returns a sorted list.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "WebSearch",
                                                "inputs": [
                                                    "ctx",
                                                    "query"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Performs a web search with caching mechanism.",
                                                "todo": "Implement actual caching mechanism in getFromCache and setInCache methods."
                                            },
                                            {
                                                "name": "ExecuteAction",
                                                "inputs": [
                                                    "ctx",
                                                    "actionType",
                                                    "params"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "map[string]string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Executes the specified action type with given parameters.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "validateParams",
                                                "inputs": [
                                                    "actionType",
                                                    "params"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "map[string]string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Validates the parameters for a given action type.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "confirmDeletion",
                                                "inputs": [
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Confirms file deletion with the user.",
                                                "todo": "Implement actual confirmation logic."
                                            },
                                            {
                                                "name": "getFromCache",
                                                "inputs": [
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Retrieves a value from the cache.",
                                                "todo": "Implement actual cache retrieval logic."
                                            },
                                            {
                                                "name": "setInCache",
                                                "inputs": [
                                                    "key",
                                                    "value",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "time.Duration"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Sets a value in the cache with an expiration time.",
                                                "todo": "Implement actual cache setting logic."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file defines an ActionExecutor struct and associated methods for executing various file and web search operations. It provides a centralized way to perform actions such as reading, writing, and deleting files, listing directory contents, and performing web searches.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "file_operations.go",
                                        "functions": [
                                            {
                                                "name": "NewFileManager",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "FileManager"
                                                ],
                                                "output_types": [
                                                    "*FileManager"
                                                ],
                                                "summary": "Creates and returns a new instance of FileManager",
                                                "todo": ""
                                            },
                                            {
                                                "name": "ReadFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "content",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Reads the content of a file at the given path",
                                                "todo": "Consider adding a parameter for maximum file size to prevent reading extremely large files"
                                            },
                                            {
                                                "name": "WriteFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path",
                                                    "content",
                                                    "perm"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "os.FileMode"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Writes content to a file at the given path, creating directories if necessary",
                                                "todo": "Implement rollback mechanism in case of write failure"
                                            },
                                            {
                                                "name": "DeleteFile",
                                                "inputs": [
                                                    "ctx",
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Deletes a file at the given path",
                                                "todo": "Implement actual confirmation mechanism in confirmDeletion function"
                                            },
                                            {
                                                "name": "ListDirectory",
                                                "inputs": [
                                                    "ctx",
                                                    "path",
                                                    "includeSubdirs"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "bool"
                                                ],
                                                "outputs": [
                                                    "fileList",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "summary": "Lists the contents of a directory at the given path",
                                                "todo": "Add option to filter files based on extension or other criteria"
                                            },
                                            {
                                                "name": "getOrCreateLock",
                                                "inputs": [
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "lock"
                                                ],
                                                "output_types": [
                                                    "*sync.Mutex"
                                                ],
                                                "summary": "Retrieves or creates a lock for the given file path",
                                                "todo": ""
                                            },
                                            {
                                                "name": "confirmDeletion",
                                                "inputs": [
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "confirmed"
                                                ],
                                                "output_types": [
                                                    "bool"
                                                ],
                                                "summary": "Simulates a confirmation delay for file deletion",
                                                "todo": "Implement actual confirmation mechanism"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file defines interfaces and implementations for file-related operations, including reading, writing, deleting, and listing files and directories. It provides thread-safe file operations using locks.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "web_search.go",
                                        "functions": [
                                            {
                                                "name": "NewGoogleSearcher",
                                                "inputs": [
                                                    "apiKey",
                                                    "cx"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*GoogleSearcher",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*GoogleSearcher",
                                                    "error"
                                                ],
                                                "summary": "Creates a new GoogleSearcher instance with the provided API key and custom search engine ID.",
                                                "todo": "Consider adding options for customizing HTTP client and rate limiter settings."
                                            },
                                            {
                                                "name": "Search",
                                                "inputs": [
                                                    "ctx",
                                                    "query"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "[]SearchResult",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]SearchResult",
                                                    "error"
                                                ],
                                                "summary": "Performs a search using the Google Custom Search API, with caching and rate limiting.",
                                                "todo": "Implement pagination for fetching more than 10 results."
                                            },
                                            {
                                                "name": "NewWebSearch",
                                                "inputs": [
                                                    "searcher"
                                                ],
                                                "input_types": [
                                                    "WebSearcher"
                                                ],
                                                "outputs": [
                                                    "*WebSearch",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*WebSearch",
                                                    "error"
                                                ],
                                                "summary": "Creates a new WebSearch instance with the provided WebSearcher implementation.",
                                                "todo": "Consider adding options for customizing default search parameters."
                                            },
                                            {
                                                "name": "Search",
                                                "inputs": [
                                                    "ctx",
                                                    "query",
                                                    "numResults"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "[]SearchResult",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]SearchResult",
                                                    "error"
                                                ],
                                                "summary": "Performs a web search using the provided WebSearcher and returns a limited number of results.",
                                                "todo": "Implement error handling for specific API errors and network issues."
                                            },
                                            {
                                                "name": "min",
                                                "inputs": [
                                                    "a",
                                                    "b"
                                                ],
                                                "input_types": [
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "int"
                                                ],
                                                "output_types": [
                                                    "int"
                                                ],
                                                "summary": "Returns the minimum of two integers.",
                                                "todo": "Consider making this a utility function in a separate package."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a web search functionality using Google Custom Search API. It includes interfaces and structs for search results, a WebSearcher interface, a GoogleSearcher implementation, and a WebSearch struct that uses the WebSearcher.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "sandbox": {
                                "files": [
                                    {
                                        "name": "sandbox_manager.go",
                                        "functions": [
                                            {
                                                "name": "NewSandboxManager",
                                                "inputs": [
                                                    "opts"
                                                ],
                                                "input_types": [
                                                    "...func(*client.Client) error"
                                                ],
                                                "outputs": [
                                                    "*SandboxManager",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*SandboxManager",
                                                    "error"
                                                ],
                                                "summary": "Creates a new SandboxManager instance with a Docker client",
                                                "todo": "Consider adding options for custom Docker client configuration"
                                            },
                                            {
                                                "name": "CreateContainer",
                                                "inputs": [
                                                    "ctx",
                                                    "name",
                                                    "config",
                                                    "hostConfig"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "*container.Config",
                                                    "*container.HostConfig"
                                                ],
                                                "outputs": [
                                                    "*Container",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Container",
                                                    "error"
                                                ],
                                                "summary": "Creates a new sandbox container with the given configuration",
                                                "todo": "Implement more flexible container configuration options"
                                            },
                                            {
                                                "name": "ExecuteCode",
                                                "inputs": [
                                                    "ctx",
                                                    "containerName",
                                                    "code",
                                                    "timeout"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Executes the provided code in the specified container and returns the output",
                                                "todo": "Add support for different programming languages and execution environments"
                                            },
                                            {
                                                "name": "CleanupContainer",
                                                "inputs": [
                                                    "ctx",
                                                    "name"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Stops and removes the specified container",
                                                "todo": "Implement graceful shutdown and resource cleanup"
                                            },
                                            {
                                                "name": "ListContainers",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "[]*Container"
                                                ],
                                                "output_types": [
                                                    "[]*Container"
                                                ],
                                                "summary": "Returns a list of all active containers",
                                                "todo": "Add filtering and sorting options for the container list"
                                            },
                                            {
                                                "name": "SetResourceLimits",
                                                "inputs": [
                                                    "ctx",
                                                    "containerName",
                                                    "memory",
                                                    "cpuQuota"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "int64",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Updates the resource limits for a container",
                                                "todo": "Implement more granular resource control options"
                                            },
                                            {
                                                "name": "GetContainerLogs",
                                                "inputs": [
                                                    "ctx",
                                                    "containerName"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Retrieves the logs from a container",
                                                "todo": "Add options for log filtering and formatting"
                                            },
                                            {
                                                "name": "Close",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Closes the Docker client connection and cleans up all containers",
                                                "todo": "Implement parallel cleanup for faster shutdown"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a SandboxManager that manages the creation, execution, and cleanup of sandbox containers using Docker. It provides functionality for creating containers, executing code within them, managing resources, and retrieving logs.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "container.go",
                                        "functions": [
                                            {
                                                "name": "NewContainer",
                                                "inputs": [
                                                    "name",
                                                    "options"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "...func(*client.Client) error"
                                                ],
                                                "outputs": [
                                                    "*Container",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Container",
                                                    "error"
                                                ],
                                                "summary": "Creates a new Container instance with the given name and options",
                                                "todo": "Consider adding validation for the container name"
                                            },
                                            {
                                                "name": "Start",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Creates and starts the container with predefined resource limits and security options",
                                                "todo": "Add support for custom container configurations"
                                            },
                                            {
                                                "name": "Stop",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Stops and removes the container",
                                                "todo": "Implement graceful shutdown with configurable timeout"
                                            },
                                            {
                                                "name": "ExecuteCommand",
                                                "inputs": [
                                                    "ctx",
                                                    "cmd"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "[]string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Runs a command in the container and returns the output",
                                                "todo": "Add support for streaming output in real-time"
                                            },
                                            {
                                                "name": "CopyToContainer",
                                                "inputs": [
                                                    "ctx",
                                                    "hostPath",
                                                    "containerPath"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Copies a file or directory from the host to the container",
                                                "todo": "Implement progress tracking for large file transfers"
                                            },
                                            {
                                                "name": "CopyFromContainer",
                                                "inputs": [
                                                    "ctx",
                                                    "containerPath",
                                                    "hostPath"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Copies a file or directory from the container to the host",
                                                "todo": "Add support for preserving file permissions and ownership"
                                            },
                                            {
                                                "name": "GetLogs",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Retrieves the logs from the container",
                                                "todo": "Implement log rotation and archiving"
                                            },
                                            {
                                                "name": "GetStatus",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Returns the current status of the container",
                                                "todo": "Add more detailed status information"
                                            },
                                            {
                                                "name": "Restart",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Restarts the container",
                                                "todo": "Implement custom restart policies"
                                            },
                                            {
                                                "name": "Pause",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Pauses the container",
                                                "todo": "Add support for resuming paused containers automatically after a specified time"
                                            },
                                            {
                                                "name": "Unpause",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Unpauses the container",
                                                "todo": "Implement error handling for containers that fail to unpause"
                                            },
                                            {
                                                "name": "UpdateResourceLimits",
                                                "inputs": [
                                                    "ctx",
                                                    "memory",
                                                    "cpuQuota"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Updates the resource limits for the container",
                                                "todo": "Add support for updating other resource limits (e.g., IO, network)"
                                            },
                                            {
                                                "name": "GetStats",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "*types.StatsJSON",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*types.StatsJSON",
                                                    "error"
                                                ],
                                                "summary": "Returns the current resource usage statistics of the container",
                                                "todo": "Implement periodic stats collection and storage for historical analysis"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a sandbox container management system using Docker. It provides functionality to create, start, stop, execute commands, copy files, and manage resources for containers.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    },
                    "llm": {
                        "files": [],
                        "directories": {
                            "client": {
                                "files": [
                                    {
                                        "name": "llm_client.go",
                                        "functions": [
                                            {
                                                "name": "NewLLMClient",
                                                "inputs": [
                                                    "apiKey",
                                                    "baseURL",
                                                    "options"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "...ClientOption"
                                                ],
                                                "outputs": [
                                                    "client"
                                                ],
                                                "output_types": [
                                                    "*LLMClient"
                                                ],
                                                "summary": "Creates a new LLMClient with the given API key, base URL, and optional client options.",
                                                "todo": "Consider implementing a way to refresh or invalidate the cache periodically."
                                            },
                                            {
                                                "name": "GenerateCode",
                                                "inputs": [
                                                    "ctx",
                                                    "prompt",
                                                    "maxTokens",
                                                    "temperature",
                                                    "language"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "int",
                                                    "float64",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "generatedCode",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Generates code based on the given prompt, max tokens, temperature, and language.",
                                                "todo": "Add support for more advanced code generation options, such as specifying coding style or framework preferences."
                                            },
                                            {
                                                "name": "AnalyzeRequirements",
                                                "inputs": [
                                                    "ctx",
                                                    "requirements",
                                                    "outputFormat"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "analysis",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Analyzes project requirements and provides a summary of key features and tasks in the specified output format.",
                                                "todo": "Implement support for custom analysis templates or categories."
                                            },
                                            {
                                                "name": "ExplainCode",
                                                "inputs": [
                                                    "ctx",
                                                    "code",
                                                    "detailLevel",
                                                    "language"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "explanation",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Explains the given code with the specified level of detail and language.",
                                                "todo": "Add support for explaining specific parts or functions within the code."
                                            },
                                            {
                                                "name": "SuggestImprovements",
                                                "inputs": [
                                                    "ctx",
                                                    "code",
                                                    "categories",
                                                    "priorities"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "[]string",
                                                    "[]string"
                                                ],
                                                "outputs": [
                                                    "improvements",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]Improvement",
                                                    "error"
                                                ],
                                                "summary": "Suggests improvements for the given code, focusing on specified categories and priorities.",
                                                "todo": "Implement a way to customize the improvement suggestion algorithm or add more detailed improvement types."
                                            },
                                            {
                                                "name": "sendRequest",
                                                "inputs": [
                                                    "ctx",
                                                    "req"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "LLMRequest"
                                                ],
                                                "outputs": [
                                                    "response",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*LLMResponse",
                                                    "error"
                                                ],
                                                "summary": "Sends an LLM request to the API, handles caching, and processes the response.",
                                                "todo": "Implement more advanced error handling and logging for API responses."
                                            },
                                            {
                                                "name": "RoundTrip",
                                                "inputs": [
                                                    "req"
                                                ],
                                                "input_types": [
                                                    "*http.Request"
                                                ],
                                                "outputs": [
                                                    "response",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*http.Response",
                                                    "error"
                                                ],
                                                "summary": "Implements the http.RoundTripper interface for retrying requests with exponential backoff.",
                                                "todo": "Consider adding jitter to the backoff algorithm to prevent thundering herd problems."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements an LLM (Language Model) client for generating code, analyzing requirements, explaining code, and suggesting improvements. It includes features such as caching, retrying requests, and customizable client options.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "prompts": {
                                "files": [
                                    {
                                        "name": "prompt_generator.go",
                                        "functions": [
                                            {
                                                "name": "NewPromptGenerator",
                                                "inputs": [
                                                    "opts"
                                                ],
                                                "input_types": [
                                                    "...Option"
                                                ],
                                                "outputs": [
                                                    "*PromptGenerator"
                                                ],
                                                "output_types": [
                                                    "*PromptGenerator"
                                                ],
                                                "summary": "Creates a new PromptGenerator with optional custom configurations",
                                                "todo": "Consider adding more options for customization"
                                            },
                                            {
                                                "name": "WithCustomTemplates",
                                                "inputs": [
                                                    "customTemplates"
                                                ],
                                                "input_types": [
                                                    "*templates.PromptTemplates"
                                                ],
                                                "outputs": [
                                                    "Option"
                                                ],
                                                "output_types": [
                                                    "func(*PromptGenerator)"
                                                ],
                                                "summary": "Option function to set custom templates for the PromptGenerator",
                                                "todo": "Add validation for custom templates"
                                            },
                                            {
                                                "name": "GenerateInitialPrompt",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Generates an initial prompt based on given requirements",
                                                "todo": "Implement error handling for invalid requirements"
                                            },
                                            {
                                                "name": "GenerateCodeGenerationPrompt",
                                                "inputs": [
                                                    "context",
                                                    "task",
                                                    "options"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for code generation with context, task, and optional additional options",
                                                "todo": "Add validation for context and task inputs"
                                            },
                                            {
                                                "name": "GenerateCodeReviewPrompt",
                                                "inputs": [
                                                    "code",
                                                    "requirements",
                                                    "focusAreas"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for code review with code, requirements, and optional focus areas",
                                                "todo": "Implement prioritization of focus areas"
                                            },
                                            {
                                                "name": "GenerateErrorAnalysisPrompt",
                                                "inputs": [
                                                    "code",
                                                    "errorMsg"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for error analysis based on code and error message",
                                                "todo": "Expand error categorization to cover more specific error types"
                                            },
                                            {
                                                "name": "GenerateWebSearchPrompt",
                                                "inputs": [
                                                    "query",
                                                    "searchEngine"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for web search with a given query and search engine",
                                                "todo": "Add support for multiple search engines"
                                            },
                                            {
                                                "name": "GenerateFileOperationPrompt",
                                                "inputs": [
                                                    "operation",
                                                    "path",
                                                    "content"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "string",
                                                    "error"
                                                ],
                                                "summary": "Generates a prompt for file operations with operation type, file path, and content",
                                                "todo": "Implement file system checks for safety"
                                            },
                                            {
                                                "name": "GenerateTestGenerationPrompt",
                                                "inputs": [
                                                    "code",
                                                    "requirements",
                                                    "framework"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for test generation based on code, requirements, and testing framework",
                                                "todo": "Add support for more testing frameworks"
                                            },
                                            {
                                                "name": "GenerateRequirementAnalysisPrompt",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for requirement analysis with categorization",
                                                "todo": "Implement more sophisticated requirement categorization"
                                            },
                                            {
                                                "name": "GenerateTaskDecompositionPrompt",
                                                "inputs": [
                                                    "task",
                                                    "level"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for task decomposition with a specified level of detail",
                                                "todo": "Add support for dependencies between decomposed tasks"
                                            },
                                            {
                                                "name": "GenerateProgressUpdatePrompt",
                                                "inputs": [
                                                    "completedTasks",
                                                    "remainingTasks",
                                                    "timeEstimates"
                                                ],
                                                "input_types": [
                                                    "[]string",
                                                    "[]string",
                                                    "map[string]string"
                                                ],
                                                "outputs": [
                                                    "string"
                                                ],
                                                "output_types": [
                                                    "string"
                                                ],
                                                "summary": "Generates a prompt for progress updates with completed tasks, remaining tasks, and time estimates",
                                                "todo": "Implement calculation of overall project progress percentage"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file defines a PromptGenerator struct and associated methods for generating various types of prompts for use with language models in a development context.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "prompt_templates.go",
                                        "functions": [
                                            {
                                                "name": "NewPromptTemplates",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "*PromptTemplates",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*PromptTemplates",
                                                    "error"
                                                ],
                                                "summary": "This function initializes and returns a new PromptTemplates struct with all the template fields populated. It parses predefined template strings for various prompts and assigns them to the corresponding fields in the PromptTemplates struct.",
                                                "todo": "Consider adding error handling for individual template parsing failures instead of returning on the first error encountered. This would allow for partial template initialization and more granular error reporting."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file defines a PromptTemplates struct and provides a function to initialize various text templates used for different prompts in the application. These templates cover a wide range of functionalities including initial project planning, code generation, code review, error analysis, web search, file operations, test generation, requirement analysis, task decomposition, and progress updates.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    },
                    "models": {
                        "files": [
                            {
                                "name": "project.go",
                                "functions": [
                                    {
                                        "name": "NewProject",
                                        "inputs": [
                                            "name",
                                            "description",
                                            "userID"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*Project",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Project",
                                            "error"
                                        ],
                                        "summary": "Creates a new Project instance with the given name, description, and userID.",
                                        "todo": "Consider adding validation for project name length."
                                    },
                                    {
                                        "name": "BeforeCreate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook that sets the CreatedAt and UpdatedAt fields before creating a new project.",
                                        "todo": "Consider adding additional pre-creation validations or operations."
                                    },
                                    {
                                        "name": "BeforeUpdate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook that updates the UpdatedAt field before saving changes to a project.",
                                        "todo": "Consider adding additional pre-update validations or operations."
                                    },
                                    {
                                        "name": "GetTasks",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves all tasks associated with the project.",
                                        "todo": "Consider adding pagination or filtering options."
                                    },
                                    {
                                        "name": "AddTask",
                                        "inputs": [
                                            "db",
                                            "task"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "*Task"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Adds a new task to the project.",
                                        "todo": "Consider adding more detailed validation for task fields."
                                    },
                                    {
                                        "name": "UpdateStatus",
                                        "inputs": [
                                            "db",
                                            "status"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "ProjectStatus"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Updates the status of the project.",
                                        "todo": "Consider adding a check for valid status transitions."
                                    },
                                    {
                                        "name": "CalculateProgress",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "float64",
                                            "error"
                                        ],
                                        "output_types": [
                                            "float64",
                                            "error"
                                        ],
                                        "summary": "Calculates the progress of the project based on completed tasks.",
                                        "todo": "Consider caching the result to improve performance for large projects."
                                    },
                                    {
                                        "name": "isValidStatus",
                                        "inputs": [
                                            "status"
                                        ],
                                        "input_types": [
                                            "ProjectStatus"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given project status is valid.",
                                        "todo": "Consider making this method public if needed elsewhere."
                                    },
                                    {
                                        "name": "GetProjectByID",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*Project",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Project",
                                            "error"
                                        ],
                                        "summary": "Retrieves a project by its ID, including associated tasks.",
                                        "todo": "Consider adding an option to exclude task loading for performance."
                                    },
                                    {
                                        "name": "GetProjectsByUserID",
                                        "inputs": [
                                            "db",
                                            "userID",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Project",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Project",
                                            "error"
                                        ],
                                        "summary": "Retrieves projects for a given user with pagination.",
                                        "todo": "Consider adding sorting options."
                                    },
                                    {
                                        "name": "DeleteProject",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Deletes a project and its associated tasks.",
                                        "todo": "Consider adding a soft delete option."
                                    },
                                    {
                                        "name": "UpdateProjectDetails",
                                        "inputs": [
                                            "db",
                                            "name",
                                            "description"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Updates the name and description of the project.",
                                        "todo": "Consider adding partial update support."
                                    },
                                    {
                                        "name": "GetProjectStats",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "map[string]interface{}",
                                            "error"
                                        ],
                                        "output_types": [
                                            "map[string]interface{}",
                                            "error"
                                        ],
                                        "summary": "Retrieves various statistics about the project.",
                                        "todo": "Consider adding more detailed statistics or performance metrics."
                                    },
                                    {
                                        "name": "SetPriority",
                                        "inputs": [
                                            "priority"
                                        ],
                                        "input_types": [
                                            "int"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Sets the priority of the project.",
                                        "todo": "Consider adding a method to get projects by priority."
                                    },
                                    {
                                        "name": "GetTasksByStatus",
                                        "inputs": [
                                            "db",
                                            "status"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "TaskStatus"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves tasks for the project filtered by status.",
                                        "todo": "Consider adding pagination support."
                                    },
                                    {
                                        "name": "GetOverdueTasks",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves overdue tasks for the project.",
                                        "todo": "Consider adding an option to specify the overdue threshold."
                                    },
                                    {
                                        "name": "GetProjectDuration",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Duration"
                                        ],
                                        "output_types": [
                                            "time.Duration"
                                        ],
                                        "summary": "Calculates the duration since the project was created.",
                                        "todo": "Consider adding a method to get active duration (excluding time on hold)."
                                    },
                                    {
                                        "name": "IsOverdue",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the project is overdue based on a 30-day threshold.",
                                        "todo": "Consider making the overdue threshold configurable."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the Project model and related functions for managing projects in a task management system. It includes methods for creating, updating, and querying projects, as well as managing tasks associated with projects.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "task.go",
                                "functions": [
                                    {
                                        "name": "NewTask",
                                        "inputs": [
                                            "projectID",
                                            "name",
                                            "description"
                                        ],
                                        "input_types": [
                                            "uuid.UUID",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Task",
                                            "error"
                                        ],
                                        "summary": "Creates a new Task instance with the given project ID, name, and description.",
                                        "todo": "Consider adding validation for project ID existence."
                                    },
                                    {
                                        "name": "BeforeCreate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to set CreatedAt and UpdatedAt before creating a task."
                                    },
                                    {
                                        "name": "BeforeUpdate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to update UpdatedAt before updating a task."
                                    },
                                    {
                                        "name": "Complete",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Marks the task as completed and sets the CompletedAt timestamp."
                                    },
                                    {
                                        "name": "Fail",
                                        "inputs": [
                                            "reason"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Marks the task as failed and appends the failure reason to the description."
                                    },
                                    {
                                        "name": "SetInProgress",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Sets the task status to 'in_progress'."
                                    },
                                    {
                                        "name": "UpdateStatus",
                                        "inputs": [
                                            "status"
                                        ],
                                        "input_types": [
                                            "TaskStatus"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Updates the task status and sets CompletedAt if the status is 'completed'."
                                    },
                                    {
                                        "name": "IsCompleted",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the task is completed."
                                    },
                                    {
                                        "name": "GetDuration",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Duration"
                                        ],
                                        "output_types": [
                                            "time.Duration"
                                        ],
                                        "summary": "Calculates the duration of the task from creation to completion or current time."
                                    },
                                    {
                                        "name": "GetProjectID",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "uuid.UUID"
                                        ],
                                        "output_types": [
                                            "uuid.UUID"
                                        ],
                                        "summary": "Returns the project ID of the task."
                                    },
                                    {
                                        "name": "GetName",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the name of the task."
                                    },
                                    {
                                        "name": "GetDescription",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the description of the task."
                                    },
                                    {
                                        "name": "GetStatus",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "TaskStatus"
                                        ],
                                        "output_types": [
                                            "TaskStatus"
                                        ],
                                        "summary": "Returns the status of the task."
                                    },
                                    {
                                        "name": "GetCreatedAt",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Time"
                                        ],
                                        "output_types": [
                                            "time.Time"
                                        ],
                                        "summary": "Returns the creation time of the task."
                                    },
                                    {
                                        "name": "GetCompletedAt",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "*time.Time"
                                        ],
                                        "output_types": [
                                            "*time.Time"
                                        ],
                                        "summary": "Returns the completion time of the task, if completed."
                                    },
                                    {
                                        "name": "SetPriority",
                                        "inputs": [
                                            "priority"
                                        ],
                                        "input_types": [
                                            "int"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Sets the priority of the task (1-5)."
                                    },
                                    {
                                        "name": "GetPriority",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "int"
                                        ],
                                        "output_types": [
                                            "int"
                                        ],
                                        "summary": "Returns the priority of the task."
                                    },
                                    {
                                        "name": "SetDueDate",
                                        "inputs": [
                                            "dueDate"
                                        ],
                                        "input_types": [
                                            "time.Time"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the due date for the task."
                                    },
                                    {
                                        "name": "GetDueDate",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "*time.Time"
                                        ],
                                        "output_types": [
                                            "*time.Time"
                                        ],
                                        "summary": "Returns the due date of the task."
                                    },
                                    {
                                        "name": "IsOverdue",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the task is overdue."
                                    },
                                    {
                                        "name": "validateTaskInput",
                                        "inputs": [
                                            "name",
                                            "description"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Validates the input for task name and description.",
                                        "todo": "Consider making this method public for reusability."
                                    },
                                    {
                                        "name": "isValidTaskStatus",
                                        "inputs": [
                                            "status"
                                        ],
                                        "input_types": [
                                            "TaskStatus"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given task status is valid.",
                                        "todo": "Consider making this method public for reusability."
                                    },
                                    {
                                        "name": "GetTaskByID",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves a task by its ID from the database."
                                    },
                                    {
                                        "name": "GetTasksByProjectID",
                                        "inputs": [
                                            "db",
                                            "projectID",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves tasks for a specific project with pagination."
                                    },
                                    {
                                        "name": "GetTasksByStatus",
                                        "inputs": [
                                            "db",
                                            "projectID",
                                            "status",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID",
                                            "TaskStatus",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves tasks for a specific project and status with pagination."
                                    },
                                    {
                                        "name": "GetOverdueTasks",
                                        "inputs": [
                                            "db",
                                            "projectID",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Task",
                                            "error"
                                        ],
                                        "summary": "Retrieves overdue tasks for a specific project with pagination."
                                    },
                                    {
                                        "name": "Save",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Saves the task to the database."
                                    },
                                    {
                                        "name": "Delete",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Deletes the task from the database."
                                    },
                                    {
                                        "name": "SoftDelete",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Performs a soft delete on the task by setting the deleted_at timestamp."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the Task model and related functions for managing tasks in a project management system. It includes task creation, status updates, queries, and database operations.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "result.go",
                                "functions": [
                                    {
                                        "name": "NewResult",
                                        "inputs": [
                                            "taskID"
                                        ],
                                        "input_types": [
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*Result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Result",
                                            "error"
                                        ],
                                        "summary": "Creates a new Result instance with a given task ID and pending status."
                                    },
                                    {
                                        "name": "BeforeCreate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to set creation and update times before creating a new Result record."
                                    },
                                    {
                                        "name": "BeforeUpdate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to update the UpdatedAt field before updating a Result record."
                                    },
                                    {
                                        "name": "Complete",
                                        "inputs": [
                                            "output"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Marks a Result as completed with the given output."
                                    },
                                    {
                                        "name": "Fail",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Marks a Result as failed with the given error message."
                                    },
                                    {
                                        "name": "IsPending",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the Result status is pending."
                                    },
                                    {
                                        "name": "IsCompleted",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the Result status is completed."
                                    },
                                    {
                                        "name": "IsFailed",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the Result status is failed."
                                    },
                                    {
                                        "name": "GetTaskID",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "uuid.UUID"
                                        ],
                                        "output_types": [
                                            "uuid.UUID"
                                        ],
                                        "summary": "Returns the task ID associated with the Result."
                                    },
                                    {
                                        "name": "GetStatus",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "ResultStatus"
                                        ],
                                        "output_types": [
                                            "ResultStatus"
                                        ],
                                        "summary": "Returns the current status of the Result."
                                    },
                                    {
                                        "name": "GetOutput",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the output of the Result."
                                    },
                                    {
                                        "name": "GetError",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the error message of the Result."
                                    },
                                    {
                                        "name": "GetCreatedAt",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Time"
                                        ],
                                        "output_types": [
                                            "time.Time"
                                        ],
                                        "summary": "Returns the creation time of the Result."
                                    },
                                    {
                                        "name": "GetUpdatedAt",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Time"
                                        ],
                                        "output_types": [
                                            "time.Time"
                                        ],
                                        "summary": "Returns the last update time of the Result."
                                    },
                                    {
                                        "name": "SetStatus",
                                        "inputs": [
                                            "status"
                                        ],
                                        "input_types": [
                                            "ResultStatus"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Sets the status of the Result if it's valid."
                                    },
                                    {
                                        "name": "SetOutput",
                                        "inputs": [
                                            "output"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the output of the Result."
                                    },
                                    {
                                        "name": "SetError",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the error message of the Result."
                                    },
                                    {
                                        "name": "isValidStatus",
                                        "inputs": [
                                            "status"
                                        ],
                                        "input_types": [
                                            "ResultStatus"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given status is valid."
                                    },
                                    {
                                        "name": "GetResultByID",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*Result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Result",
                                            "error"
                                        ],
                                        "summary": "Retrieves a Result from the database by its ID."
                                    },
                                    {
                                        "name": "GetResultsByTaskID",
                                        "inputs": [
                                            "db",
                                            "taskID",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "summary": "Retrieves Results from the database by task ID with pagination."
                                    },
                                    {
                                        "name": "DeleteResult",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Deletes a Result from the database by its ID."
                                    },
                                    {
                                        "name": "Save",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Saves the Result to the database."
                                    },
                                    {
                                        "name": "GetDuration",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Duration"
                                        ],
                                        "output_types": [
                                            "time.Duration"
                                        ],
                                        "summary": "Calculates the duration of the Result."
                                    },
                                    {
                                        "name": "GetResultCountByTaskID",
                                        "inputs": [
                                            "db",
                                            "taskID"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "int64",
                                            "error"
                                        ],
                                        "output_types": [
                                            "int64",
                                            "error"
                                        ],
                                        "summary": "Counts the number of Results for a given task ID."
                                    },
                                    {
                                        "name": "Validate",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Validates the Result object."
                                    },
                                    {
                                        "name": "GetResultsByStatus",
                                        "inputs": [
                                            "db",
                                            "status",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "ResultStatus",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "summary": "Retrieves Results from the database by status with pagination."
                                    },
                                    {
                                        "name": "GetResultsInDateRange",
                                        "inputs": [
                                            "db",
                                            "startDate",
                                            "endDate",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "time.Time",
                                            "time.Time",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]Result",
                                            "error"
                                        ],
                                        "summary": "Retrieves Results from the database within a date range with pagination."
                                    },
                                    {
                                        "name": "SoftDelete",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Performs a soft delete on the Result by setting the deleted_at field."
                                    },
                                    {
                                        "name": "Restore",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Restores a soft-deleted Result by clearing the deleted_at field."
                                    }
                                ],
                                "status": "done",
                                "summary": "This file defines the Result model and associated functions for managing task results in a Go application. It includes methods for creating, updating, and querying results, as well as utility functions for status checks and time-related operations.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "user.go",
                                "functions": [
                                    {
                                        "name": "NewUser",
                                        "inputs": [
                                            "username",
                                            "email",
                                            "password",
                                            "firstName",
                                            "lastName"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Creates a new User instance with validated input and hashed password.",
                                        "todo": "Consider adding more robust input validation."
                                    },
                                    {
                                        "name": "BeforeCreate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to set CreatedAt and UpdatedAt fields before creating a user.",
                                        "todo": "Consider adding additional pre-creation logic if needed."
                                    },
                                    {
                                        "name": "BeforeUpdate",
                                        "inputs": [
                                            "tx"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "GORM hook to update the UpdatedAt field before updating a user.",
                                        "todo": "Consider adding additional pre-update logic if needed."
                                    },
                                    {
                                        "name": "FullName",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the full name of the user or username if first and last names are not set.",
                                        "todo": "Consider handling middle names or other name formats."
                                    },
                                    {
                                        "name": "VerifyPassword",
                                        "inputs": [
                                            "password"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Verifies if the provided password matches the user's stored password.",
                                        "todo": "Consider implementing rate limiting for password verification attempts."
                                    },
                                    {
                                        "name": "UpdateProfile",
                                        "inputs": [
                                            "firstName",
                                            "lastName"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Updates the user's first and last name.",
                                        "todo": "Consider adding more profile fields and validation."
                                    },
                                    {
                                        "name": "ChangePassword",
                                        "inputs": [
                                            "currentPassword",
                                            "newPassword"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Changes the user's password after verifying the current password and validating the new one.",
                                        "todo": "Consider implementing password strength scoring."
                                    },
                                    {
                                        "name": "UpdateLastLogin",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Updates the user's last login time to the current time.",
                                        "todo": "Consider adding IP address and device information for login tracking."
                                    },
                                    {
                                        "name": "GetUserByID",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "*User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a user from the database by their ID.",
                                        "todo": "Consider implementing caching for frequently accessed users."
                                    },
                                    {
                                        "name": "GetUserByUsername",
                                        "inputs": [
                                            "db",
                                            "username"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a user from the database by their username.",
                                        "todo": "Consider implementing case-insensitive username search."
                                    },
                                    {
                                        "name": "GetUserByEmail",
                                        "inputs": [
                                            "db",
                                            "email"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a user from the database by their email address.",
                                        "todo": "Consider implementing case-insensitive email search."
                                    },
                                    {
                                        "name": "DeleteUser",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Deletes a user from the database by their ID.",
                                        "todo": "Consider implementing a soft delete option."
                                    },
                                    {
                                        "name": "GetAllUsers",
                                        "inputs": [
                                            "db",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a paginated list of users from the database.",
                                        "todo": "Consider adding sorting options and filters."
                                    },
                                    {
                                        "name": "Save",
                                        "inputs": [
                                            "db"
                                        ],
                                        "input_types": [
                                            "*gorm.DB"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Saves the user to the database.",
                                        "todo": "Consider implementing optimistic locking for concurrent updates."
                                    },
                                    {
                                        "name": "SetRole",
                                        "inputs": [
                                            "role"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Sets the user's role after validating it.",
                                        "todo": "Consider implementing a more flexible role system with permissions."
                                    },
                                    {
                                        "name": "HasRole",
                                        "inputs": [
                                            "role"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the user has a specific role.",
                                        "todo": "Consider implementing role hierarchy checks."
                                    },
                                    {
                                        "name": "IsAdmin",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the user has an admin role.",
                                        "todo": "Consider implementing a more granular permission system."
                                    },
                                    {
                                        "name": "IsModerator",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the user has a moderator or admin role.",
                                        "todo": "Consider implementing a more granular permission system."
                                    },
                                    {
                                        "name": "SoftDeleteUser",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Soft deletes a user by setting the deleted_at field.",
                                        "todo": "Consider implementing cascading soft delete for related entities."
                                    },
                                    {
                                        "name": "RestoreUser",
                                        "inputs": [
                                            "db",
                                            "id"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "uuid.UUID"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Restores a soft-deleted user by clearing the deleted_at field.",
                                        "todo": "Consider implementing cascading restore for related entities."
                                    },
                                    {
                                        "name": "GetDeletedUsers",
                                        "inputs": [
                                            "db",
                                            "limit",
                                            "offset"
                                        ],
                                        "input_types": [
                                            "*gorm.DB",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "[]User",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a paginated list of soft-deleted users from the database.",
                                        "todo": "Consider adding sorting options and filters for deleted users."
                                    },
                                    {
                                        "name": "Lock",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Locks the user account by setting the role to 'locked'.",
                                        "todo": "Consider implementing a more robust account locking mechanism with reasons and durations."
                                    },
                                    {
                                        "name": "Unlock",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Unlocks the user account by setting the role back to 'user'.",
                                        "todo": "Consider implementing an unlock mechanism that restores the previous role."
                                    },
                                    {
                                        "name": "IsLocked",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the user account is locked.",
                                        "todo": "Consider implementing a more comprehensive account status system."
                                    },
                                    {
                                        "name": "UpdateEmail",
                                        "inputs": [
                                            "newEmail"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Updates the user's email address after validating the new email format.",
                                        "todo": "Consider implementing email verification for the new address."
                                    },
                                    {
                                        "name": "GetLastLoginTime",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "*time.Time"
                                        ],
                                        "output_types": [
                                            "*time.Time"
                                        ],
                                        "summary": "Retrieves the user's last login time.",
                                        "todo": "Consider adding additional login-related information (e.g., IP address, device)."
                                    },
                                    {
                                        "name": "GetAccountAge",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "time.Duration"
                                        ],
                                        "output_types": [
                                            "time.Duration"
                                        ],
                                        "summary": "Calculates and returns the age of the user account.",
                                        "todo": "Consider adding methods to retrieve other time-based account metrics."
                                    },
                                    {
                                        "name": "ResetPassword",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Resets the user's password to a randomly generated one.",
                                        "todo": "Implement a secure random password generation function."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the User model and provides various methods for user management, including creation, authentication, profile updates, and database operations.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "storage": {
                        "files": [],
                        "directories": {
                            "cache": {
                                "files": [
                                    {
                                        "name": "redis_cache.go",
                                        "functions": [
                                            {
                                                "name": "NewRedisCache",
                                                "inputs": [
                                                    "addr",
                                                    "password",
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "string",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "*RedisCache",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*RedisCache",
                                                    "error"
                                                ],
                                                "summary": "Creates a new RedisCache instance with the given connection parameters",
                                                "todo": "Consider adding options for custom timeouts and connection pool settings"
                                            },
                                            {
                                                "name": "Set",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "value",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "interface{}",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Sets a key-value pair in the cache with JSON serialization and compression",
                                                "todo": "Add option to disable compression for small values"
                                            },
                                            {
                                                "name": "MSet",
                                                "inputs": [
                                                    "ctx",
                                                    "values",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "map[string]interface{}",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Sets multiple key-value pairs in the cache using pipelining",
                                                "todo": "Consider adding batch size limit to prevent large transactions"
                                            },
                                            {
                                                "name": "Get",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "dest"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "interface{}"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Retrieves a value from the cache, decompresses and unmarshals it into dest",
                                                "todo": "Add support for ErrNil to distinguish between nil values and missing keys"
                                            },
                                            {
                                                "name": "MGet",
                                                "inputs": [
                                                    "ctx",
                                                    "keys"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "[]interface{}",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]interface{}",
                                                    "error"
                                                ],
                                                "summary": "Retrieves multiple values from the cache",
                                                "todo": "Consider returning a map[string]interface{} instead of []interface{}"
                                            },
                                            {
                                                "name": "Delete",
                                                "inputs": [
                                                    "ctx",
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Deletes a key from the cache",
                                                "todo": "Add option to return boolean indicating if key was actually deleted"
                                            },
                                            {
                                                "name": "MDelete",
                                                "inputs": [
                                                    "ctx",
                                                    "keys"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Deletes multiple keys from the cache",
                                                "todo": "Consider adding batch delete for large number of keys"
                                            },
                                            {
                                                "name": "Close",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Closes the Redis client connection",
                                                "todo": "Implement more robust connection closing with timeout handling"
                                            },
                                            {
                                                "name": "Exists",
                                                "inputs": [
                                                    "ctx",
                                                    "keys"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Checks if one or more keys exist in the cache",
                                                "todo": "Add option to return boolean for single key check"
                                            },
                                            {
                                                "name": "SetNX",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "value",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "interface{}",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "bool",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "bool",
                                                    "error"
                                                ],
                                                "summary": "Sets a key-value pair if the key does not exist",
                                                "todo": "Consider adding a bulk SetNX operation"
                                            },
                                            {
                                                "name": "Incr",
                                                "inputs": [
                                                    "ctx",
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Increments the integer value of a key",
                                                "todo": "Add support for custom increment step"
                                            },
                                            {
                                                "name": "IncrBy",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "value"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Increments the integer value of a key by a given amount",
                                                "todo": "Add bounds checking for increment value"
                                            },
                                            {
                                                "name": "IncrByFloat",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "value"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "float64"
                                                ],
                                                "outputs": [
                                                    "float64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "float64",
                                                    "error"
                                                ],
                                                "summary": "Increments the float value of a key by a given amount",
                                                "todo": "Add precision control for float operations"
                                            },
                                            {
                                                "name": "HSet",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "values"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "...interface{}"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Sets multiple hash fields to multiple values",
                                                "todo": "Add support for map[string]interface{} input"
                                            },
                                            {
                                                "name": "HGet",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "field",
                                                    "dest"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string",
                                                    "interface{}"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Gets the value of a hash field",
                                                "todo": "Add support for returning raw byte slice"
                                            },
                                            {
                                                "name": "HMGet",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "fields"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "[]interface{}",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]interface{}",
                                                    "error"
                                                ],
                                                "summary": "Gets the values of all specified hash fields",
                                                "todo": "Consider returning a map[string]interface{} instead of []interface{}"
                                            },
                                            {
                                                "name": "HDelete",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "fields"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "...string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Deletes one or more hash fields",
                                                "todo": "Add option to return boolean for single field deletion"
                                            },
                                            {
                                                "name": "HLen",
                                                "inputs": [
                                                    "ctx",
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Gets the number of fields in a hash",
                                                "todo": "Add option to return error if hash doesn't exist"
                                            },
                                            {
                                                "name": "HGetAll",
                                                "inputs": [
                                                    "ctx",
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "map[string]interface{}",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "map[string]interface{}",
                                                    "error"
                                                ],
                                                "summary": "Gets all the fields and values in a hash",
                                                "todo": "Add pagination support for large hashes"
                                            },
                                            {
                                                "name": "DeletePattern",
                                                "inputs": [
                                                    "ctx",
                                                    "pattern"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Deletes all keys matching the given pattern",
                                                "todo": "Implement batching for large number of keys"
                                            },
                                            {
                                                "name": "IncrAndGet",
                                                "inputs": [
                                                    "ctx",
                                                    "key"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Increments a key and returns the new value",
                                                "todo": "Add support for custom increment step"
                                            },
                                            {
                                                "name": "HExists",
                                                "inputs": [
                                                    "ctx",
                                                    "key",
                                                    "field"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "bool",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "bool",
                                                    "error"
                                                ],
                                                "summary": "Checks if a field exists in a hash",
                                                "todo": "Consider adding bulk existence check"
                                            },
                                            {
                                                "name": "BulkSetNX",
                                                "inputs": [
                                                    "ctx",
                                                    "keyValues",
                                                    "expiration"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "map[string]interface{}",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "map[string]bool",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "map[string]bool",
                                                    "error"
                                                ],
                                                "summary": "Sets multiple key-value pairs if they don't exist",
                                                "todo": "Implement batching for large number of keys"
                                            },
                                            {
                                                "name": "GracefulShutdown",
                                                "inputs": [
                                                    "ctx"
                                                ],
                                                "input_types": [
                                                    "context.Context"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Performs a graceful shutdown of the Redis client",
                                                "todo": "Add custom timeout option"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file implements a Redis cache client with compression and JSON serialization. It provides methods for basic Redis operations, as well as some custom operations for bulk operations and graceful shutdown.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "database": {
                                "files": [
                                    {
                                        "name": "postgres_db.go",
                                        "functions": [
                                            {
                                                "name": "NewPostgresDB",
                                                "inputs": [
                                                    "connectionString"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*PostgresDB",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*PostgresDB",
                                                    "error"
                                                ],
                                                "summary": "Creates a new PostgresDB instance with the given connection string and configures the connection pool.",
                                                "todo": "Consider adding error handling for environment variable parsing."
                                            },
                                            {
                                                "name": "Close",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Closes the database connection pool.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "CreateProject",
                                                "inputs": [
                                                    "ctx",
                                                    "name",
                                                    "description"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Creates a new project in the database and returns its ID.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "GetProject",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "*Project",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Project",
                                                    "error"
                                                ],
                                                "summary": "Retrieves a project by its ID from the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "UpdateProject",
                                                "inputs": [
                                                    "ctx",
                                                    "id",
                                                    "name",
                                                    "description"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Updates an existing project in the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "DeleteProject",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Soft deletes a project by setting its deleted_at timestamp.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "ListProjects",
                                                "inputs": [
                                                    "ctx",
                                                    "limit",
                                                    "offset"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "[]Project",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]Project",
                                                    "error"
                                                ],
                                                "summary": "Lists projects with pagination support.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "CreateTask",
                                                "inputs": [
                                                    "ctx",
                                                    "projectID",
                                                    "description",
                                                    "status"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Creates a new task in the database and returns its ID.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "GetTask",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "*Task",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*Task",
                                                    "error"
                                                ],
                                                "summary": "Retrieves a task by its ID from the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "UpdateTask",
                                                "inputs": [
                                                    "ctx",
                                                    "id",
                                                    "description",
                                                    "status"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Updates an existing task in the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "DeleteTask",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Soft deletes a task by setting its deleted_at timestamp.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "ListTasksForProject",
                                                "inputs": [
                                                    "ctx",
                                                    "projectID",
                                                    "limit",
                                                    "offset"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "[]Task",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]Task",
                                                    "error"
                                                ],
                                                "summary": "Lists tasks for a specific project with pagination support.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "CreateCodeExecution",
                                                "inputs": [
                                                    "ctx",
                                                    "taskID",
                                                    "code",
                                                    "result"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Creates a new code execution record in the database and returns its ID.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "GetCodeExecution",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "*CodeExecution",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*CodeExecution",
                                                    "error"
                                                ],
                                                "summary": "Retrieves a code execution record by its ID from the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "ListCodeExecutionsForTask",
                                                "inputs": [
                                                    "ctx",
                                                    "taskID",
                                                    "limit",
                                                    "offset"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "[]CodeExecution",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]CodeExecution",
                                                    "error"
                                                ],
                                                "summary": "Lists code executions for a specific task with pagination support.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "CreateLLMRequest",
                                                "inputs": [
                                                    "ctx",
                                                    "taskID",
                                                    "prompt",
                                                    "response"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "string",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Creates a new LLM request record in the database and returns its ID.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "GetLLMRequest",
                                                "inputs": [
                                                    "ctx",
                                                    "id"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "*LLMRequest",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*LLMRequest",
                                                    "error"
                                                ],
                                                "summary": "Retrieves an LLM request record by its ID from the database.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "ListLLMRequestsForTask",
                                                "inputs": [
                                                    "ctx",
                                                    "taskID",
                                                    "limit",
                                                    "offset"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "int64",
                                                    "int",
                                                    "int"
                                                ],
                                                "outputs": [
                                                    "[]LLMRequest",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]LLMRequest",
                                                    "error"
                                                ],
                                                "summary": "Lists LLM requests for a specific task with pagination support.",
                                                "todo": ""
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file defines a PostgreSQL database interface for managing projects, tasks, code executions, and LLM requests. It provides CRUD operations and listing functionalities for these entities.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "migrations.go",
                                        "functions": [
                                            {
                                                "name": "RunMigrations",
                                                "inputs": [
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Applies all pending migrations in ascending order of version numbers.",
                                                "todo": "Consider adding a dry-run option to preview migration changes without applying them."
                                            },
                                            {
                                                "name": "RollbackMigration",
                                                "inputs": [
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Rolls back the most recently applied migration.",
                                                "todo": "Add an option to specify the number of migrations to roll back."
                                            },
                                            {
                                                "name": "RunMigrationsUpTo",
                                                "inputs": [
                                                    "db",
                                                    "targetVersion"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Applies migrations up to a specified target version.",
                                                "todo": "Implement a mechanism to handle dependencies between migrations."
                                            },
                                            {
                                                "name": "RollbackMigrationsTo",
                                                "inputs": [
                                                    "db",
                                                    "targetVersion"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB",
                                                    "int64"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Rolls back migrations to a specified target version.",
                                                "todo": "Add a confirmation prompt before executing rollbacks to prevent accidental data loss."
                                            },
                                            {
                                                "name": "GetCurrentMigrationVersion",
                                                "inputs": [
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB"
                                                ],
                                                "outputs": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "int64",
                                                    "error"
                                                ],
                                                "summary": "Retrieves the current migration version from the database.",
                                                "todo": "Consider caching the result to improve performance for frequent calls."
                                            },
                                            {
                                                "name": "ListAppliedMigrations",
                                                "inputs": [
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB"
                                                ],
                                                "outputs": [
                                                    "[]int64",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]int64",
                                                    "error"
                                                ],
                                                "summary": "Returns a list of all applied migration versions.",
                                                "todo": "Add an option to filter migrations by date range."
                                            },
                                            {
                                                "name": "GetMigrationDetails",
                                                "inputs": [
                                                    "db"
                                                ],
                                                "input_types": [
                                                    "*PostgresDB"
                                                ],
                                                "outputs": [
                                                    "[]MigrationDetail",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]MigrationDetail",
                                                    "error"
                                                ],
                                                "summary": "Retrieves detailed information about applied migrations, including version and application time.",
                                                "todo": "Include additional metadata such as migration description or author."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file handles database migrations for a PostgreSQL database. It provides functionality to apply migrations, rollback migrations, and manage migration versions.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    }
                }
            },
            "pkg": {
                "files": [],
                "directories": {
                    "logger": {
                        "files": [
                            {
                                "name": "logger.go",
                                "functions": [
                                    {
                                        "name": "InitLogger",
                                        "inputs": [
                                            "config"
                                        ],
                                        "input_types": [
                                            "LogConfig"
                                        ],
                                        "outputs": [
                                            "err"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Initializes the logger with the provided configuration.",
                                        "todo": "Consider adding support for multiple log files."
                                    },
                                    {
                                        "name": "Info",
                                        "inputs": [
                                            "format",
                                            "v"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...interface{}"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs an info-level message.",
                                        "todo": ""
                                    },
                                    {
                                        "name": "Error",
                                        "inputs": [
                                            "format",
                                            "v"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...interface{}"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs an error-level message.",
                                        "todo": ""
                                    },
                                    {
                                        "name": "Debug",
                                        "inputs": [
                                            "format",
                                            "v"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...interface{}"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs a debug-level message.",
                                        "todo": ""
                                    },
                                    {
                                        "name": "Warn",
                                        "inputs": [
                                            "format",
                                            "v"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...interface{}"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs a warning-level message.",
                                        "todo": ""
                                    },
                                    {
                                        "name": "rotateLogFileIfNeeded",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Rotates log files if they exceed the specified size limit.",
                                        "todo": "Implement a more efficient way to handle multiple log files."
                                    },
                                    {
                                        "name": "compressLogFile",
                                        "inputs": [
                                            "src",
                                            "dst"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "err"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Compresses a log file using gzip.",
                                        "todo": "Consider adding support for other compression algorithms."
                                    },
                                    {
                                        "name": "LogStructured",
                                        "inputs": [
                                            "level",
                                            "message",
                                            "data"
                                        ],
                                        "input_types": [
                                            "LogLevel",
                                            "string",
                                            "map[string]interface{}"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs a structured message with additional data.",
                                        "todo": "Add support for custom log formatters."
                                    },
                                    {
                                        "name": "logJSON",
                                        "inputs": [
                                            "logger",
                                            "level",
                                            "message"
                                        ],
                                        "input_types": [
                                            "*log.Logger",
                                            "LogLevel",
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs a message in JSON format.",
                                        "todo": "Optimize JSON marshaling for better performance."
                                    },
                                    {
                                        "name": "CleanupOldLogs",
                                        "inputs": [
                                            "logDir",
                                            "maxAge",
                                            "filePattern"
                                        ],
                                        "input_types": [
                                            "string",
                                            "time.Duration",
                                            "string"
                                        ],
                                        "outputs": [
                                            "err"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Removes old log files based on age and file pattern.",
                                        "todo": "Implement a more efficient way to handle large numbers of files."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file implements a flexible logging system with support for multiple log levels, log rotation, compression, and structured logging. It provides functions for initializing the logger, logging messages at different levels, and cleaning up old log files.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "config": {
                        "files": [
                            {
                                "name": "config.go",
                                "functions": [
                                    {
                                        "name": "LoadConfig",
                                        "inputs": [
                                            "filename"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Loads configuration from a JSON file and applies environment variable overrides.",
                                        "todo": "Consider adding support for other file formats like YAML."
                                    },
                                    {
                                        "name": "overrideWithEnv",
                                        "inputs": [
                                            "cfg"
                                        ],
                                        "input_types": [
                                            "*Config"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Overrides configuration values with environment variables if they are set.",
                                        "todo": "Add support for custom environment variable prefixes."
                                    },
                                    {
                                        "name": "GetConfig",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "*Config",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*Config",
                                            "error"
                                        ],
                                        "summary": "Returns the loaded configuration or an error if not loaded.",
                                        "todo": "Consider implementing a refresh mechanism for long-running applications."
                                    },
                                    {
                                        "name": "GetDatabaseURL",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Returns the cached database URL from the configuration.",
                                        "todo": "Implement automatic reconnection if the URL changes."
                                    },
                                    {
                                        "name": "GetRedisURL",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Returns the cached Redis URL from the configuration.",
                                        "todo": "Add support for multiple Redis instances."
                                    },
                                    {
                                        "name": "GetLLMServiceURL",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Returns the cached LLM service URL from the configuration.",
                                        "todo": "Implement health checks for the LLM service."
                                    },
                                    {
                                        "name": "GetSandboxImageName",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Returns the cached sandbox image name from the configuration.",
                                        "todo": "Add support for multiple sandbox images."
                                    },
                                    {
                                        "name": "GetAPIPort",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "int",
                                            "error"
                                        ],
                                        "output_types": [
                                            "int",
                                            "error"
                                        ],
                                        "summary": "Returns the cached API port from the configuration.",
                                        "todo": "Implement dynamic port allocation if the specified port is in use."
                                    },
                                    {
                                        "name": "GetLogLevel",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Returns the cached log level from the configuration.",
                                        "todo": "Add support for changing log levels at runtime."
                                    },
                                    {
                                        "name": "validateConfig",
                                        "inputs": [
                                            "cfg"
                                        ],
                                        "input_types": [
                                            "*Config"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Validates the configuration values for correctness and completeness.",
                                        "todo": "Implement more thorough validation for each configuration field."
                                    },
                                    {
                                        "name": "contains",
                                        "inputs": [
                                            "slice",
                                            "item"
                                        ],
                                        "input_types": [
                                            "[]string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if a string slice contains a specific item.",
                                        "todo": "Consider using a more efficient data structure for larger sets."
                                    },
                                    {
                                        "name": "getCachedString",
                                        "inputs": [
                                            "key",
                                            "getter"
                                        ],
                                        "input_types": [
                                            "string",
                                            "func() (string, error)"
                                        ],
                                        "outputs": [
                                            "string",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Retrieves a cached string value or fetches and caches it if not present.",
                                        "todo": "Implement cache eviction for rarely used items."
                                    },
                                    {
                                        "name": "getCachedInt",
                                        "inputs": [
                                            "key",
                                            "getter"
                                        ],
                                        "input_types": [
                                            "string",
                                            "func() (int, error)"
                                        ],
                                        "outputs": [
                                            "int",
                                            "error"
                                        ],
                                        "output_types": [
                                            "int",
                                            "error"
                                        ],
                                        "summary": "Retrieves a cached integer value or fetches and caches it if not present.",
                                        "todo": "Implement cache eviction for rarely used items."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file provides configuration management for the application, including loading config from a file, overriding with environment variables, and caching config values.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "utils": {
                        "files": [
                            {
                                "name": "helpers.go",
                                "functions": [
                                    {
                                        "name": "ReadFile",
                                        "inputs": [
                                            "path"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "content",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Reads the content of a file and returns it as a string.",
                                        "todo": "Consider adding an option to read files in binary mode."
                                    },
                                    {
                                        "name": "WriteFile",
                                        "inputs": [
                                            "path",
                                            "content",
                                            "perm"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "os.FileMode"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Writes content to a file with specified permissions.",
                                        "todo": "Add support for writing to files in append mode."
                                    },
                                    {
                                        "name": "AppendToFile",
                                        "inputs": [
                                            "path",
                                            "content"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Appends content to an existing file or creates a new file if it doesn't exist.",
                                        "todo": "Consider adding an option to specify file permissions."
                                    },
                                    {
                                        "name": "EnsureDirectoryExists",
                                        "inputs": [
                                            "path",
                                            "perm"
                                        ],
                                        "input_types": [
                                            "string",
                                            "os.FileMode"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Creates a directory and all necessary parent directories if they don't exist.",
                                        "todo": "Add an option to return whether the directory was newly created or already existed."
                                    },
                                    {
                                        "name": "ListFiles",
                                        "inputs": [
                                            "dir",
                                            "filter",
                                            "recursive"
                                        ],
                                        "input_types": [
                                            "string",
                                            "func(string) bool",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "files",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]string",
                                            "error"
                                        ],
                                        "summary": "Lists files in a directory, optionally applying a filter and recursively searching subdirectories.",
                                        "todo": "Add support for sorting the returned file list."
                                    },
                                    {
                                        "name": "JSONToStruct",
                                        "inputs": [
                                            "jsonStr",
                                            "v"
                                        ],
                                        "input_types": [
                                            "string",
                                            "interface{}"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Decodes a JSON string into a provided struct.",
                                        "todo": "Consider adding support for custom unmarshalers."
                                    },
                                    {
                                        "name": "StructToJSON",
                                        "inputs": [
                                            "v",
                                            "pretty"
                                        ],
                                        "input_types": [
                                            "interface{}",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "jsonStr",
                                            "error"
                                        ],
                                        "output_types": [
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Encodes a struct into a JSON string, with an option for pretty-printing.",
                                        "todo": "Add support for custom marshalers."
                                    },
                                    {
                                        "name": "SplitString",
                                        "inputs": [
                                            "s",
                                            "delimiter",
                                            "keepEmpty"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "result"
                                        ],
                                        "output_types": [
                                            "[]string"
                                        ],
                                        "summary": "Splits a string by a delimiter, with an option to keep or discard empty parts.",
                                        "todo": "Consider adding support for regular expression delimiters."
                                    },
                                    {
                                        "name": "GenerateUUID",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "uuid"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Generates a random UUID (version 4).",
                                        "todo": "Add support for other UUID versions."
                                    },
                                    {
                                        "name": "GetCurrentTimestamp",
                                        "inputs": [
                                            "format",
                                            "timezone"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "timestamp"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the current timestamp in a specified format and timezone.",
                                        "todo": "Add support for custom time layouts."
                                    },
                                    {
                                        "name": "RandomString",
                                        "inputs": [
                                            "n",
                                            "charset"
                                        ],
                                        "input_types": [
                                            "int",
                                            "string"
                                        ],
                                        "outputs": [
                                            "randomStr"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Generates a random string of specified length using the provided character set.",
                                        "todo": "Consider adding pre-defined character sets (e.g., alphanumeric, hexadecimal)."
                                    },
                                    {
                                        "name": "IsFileExists",
                                        "inputs": [
                                            "filename"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "exists",
                                            "mode",
                                            "error"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "os.FileMode",
                                            "error"
                                        ],
                                        "summary": "Checks if a file exists and returns its permissions if it does.",
                                        "todo": "Add an option to check for directory existence as well."
                                    },
                                    {
                                        "name": "CopyFile",
                                        "inputs": [
                                            "src",
                                            "dst",
                                            "preserveMetadata"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Copies a file from source to destination, with an option to preserve metadata.",
                                        "todo": "Add support for progress tracking during copy operations."
                                    },
                                    {
                                        "name": "CopyDir",
                                        "inputs": [
                                            "src",
                                            "dst",
                                            "preserveMetadata"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Recursively copies a directory from source to destination, with an option to preserve metadata.",
                                        "todo": "Implement file/directory filtering options."
                                    },
                                    {
                                        "name": "ReadLargeFile",
                                        "inputs": [
                                            "path",
                                            "chunkSize",
                                            "processChunk"
                                        ],
                                        "input_types": [
                                            "string",
                                            "int",
                                            "func([]byte) error"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Reads a large file in chunks and processes each chunk using a provided function.",
                                        "todo": "Add support for concurrent chunk processing."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "A utility package containing various helper functions for file operations, string manipulation, JSON handling, and other common tasks.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "validators.go",
                                "functions": [
                                    {
                                        "name": "IsValidEmail",
                                        "inputs": [
                                            "email"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given email address is valid using a comprehensive regular expression and MX record lookup.",
                                        "todo": "Consider adding additional checks for disposable email domains."
                                    },
                                    {
                                        "name": "IsValidURL",
                                        "inputs": [
                                            "rawURL"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given URL is valid and includes additional validation rules for specific schemes.",
                                        "todo": "Add support for more URL schemes and consider implementing stricter validation rules."
                                    },
                                    {
                                        "name": "IsAlphanumeric",
                                        "inputs": [
                                            "s"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isAlphanumeric"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string contains only alphanumeric characters.",
                                        "todo": "Consider adding an option to allow specific non-alphanumeric characters."
                                    },
                                    {
                                        "name": "IsNumeric",
                                        "inputs": [
                                            "s"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isNumeric"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string contains only numeric characters, including decimal numbers and scientific notation.",
                                        "todo": "Add support for different number formats (e.g., thousands separators)."
                                    },
                                    {
                                        "name": "IsValidIPv4",
                                        "inputs": [
                                            "ip"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid IPv4 address.",
                                        "todo": "Consider adding support for CIDR notation."
                                    },
                                    {
                                        "name": "IsValidIPv6",
                                        "inputs": [
                                            "ip"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid IPv6 address.",
                                        "todo": "Consider adding support for compressed IPv6 notation."
                                    },
                                    {
                                        "name": "IsValidPassword",
                                        "inputs": [
                                            "password",
                                            "minLength",
                                            "maxLength",
                                            "requireUpper",
                                            "requireLower",
                                            "requireNumber",
                                            "requireSpecial",
                                            "customCharSet"
                                        ],
                                        "input_types": [
                                            "string",
                                            "int",
                                            "int",
                                            "bool",
                                            "bool",
                                            "bool",
                                            "bool",
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given password meets the specified criteria with customizable requirements.",
                                        "todo": "Add support for password strength estimation."
                                    },
                                    {
                                        "name": "IsValidUsername",
                                        "inputs": [
                                            "username",
                                            "minLength",
                                            "maxLength",
                                            "allowedChars",
                                            "reservedUsernames"
                                        ],
                                        "input_types": [
                                            "string",
                                            "int",
                                            "int",
                                            "string",
                                            "[]string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given username is valid based on customizable rules.",
                                        "todo": "Implement a profanity filter for usernames."
                                    },
                                    {
                                        "name": "IsEmptyOrWhitespace",
                                        "inputs": [
                                            "s"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isEmpty"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is empty or contains only whitespace.",
                                        "todo": "Consider adding an option to treat newlines as non-whitespace characters."
                                    },
                                    {
                                        "name": "IsValidPhoneNumber",
                                        "inputs": [
                                            "phoneNumber",
                                            "countryCode"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given phone number is valid for the specified country code.",
                                        "todo": "Expand support for more country-specific phone number formats."
                                    },
                                    {
                                        "name": "IsValidCreditCardNumber",
                                        "inputs": [
                                            "cardNumber"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given credit card number is valid using the Luhn algorithm.",
                                        "todo": "Add support for additional credit card number validation rules."
                                    },
                                    {
                                        "name": "GetCreditCardType",
                                        "inputs": [
                                            "cardNumber"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "cardType"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns the type of credit card based on its number.",
                                        "todo": "Update patterns for new card types and ranges as they become available."
                                    },
                                    {
                                        "name": "IsValidPostalCode",
                                        "inputs": [
                                            "postalCode",
                                            "countryCode"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given postal code is valid for the specified country.",
                                        "todo": "Add support for more countries and their postal code formats."
                                    },
                                    {
                                        "name": "IsValidISBN",
                                        "inputs": [
                                            "isbn"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid ISBN (10 or 13 digits).",
                                        "todo": "Consider adding support for other book identification numbers (e.g., ISSN)."
                                    },
                                    {
                                        "name": "IsValidHexColor",
                                        "inputs": [
                                            "color"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid hexadecimal color code.",
                                        "todo": "Add support for other color formats (e.g., RGB, HSL)."
                                    },
                                    {
                                        "name": "IsValidDomain",
                                        "inputs": [
                                            "domain"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid domain name.",
                                        "todo": "Implement caching for DNS lookups to improve performance."
                                    },
                                    {
                                        "name": "IsValidMACAddress",
                                        "inputs": [
                                            "mac"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid MAC address.",
                                        "todo": "Add support for various MAC address formats (e.g., with or without separators)."
                                    },
                                    {
                                        "name": "IsValidBase64",
                                        "inputs": [
                                            "s"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid Base64 encoded string.",
                                        "todo": "Add support for URL-safe Base64 encoding."
                                    },
                                    {
                                        "name": "IsValidJSON",
                                        "inputs": [
                                            "s"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid JSON.",
                                        "todo": "Consider adding an option to validate against a specific JSON schema."
                                    },
                                    {
                                        "name": "IsValidTime",
                                        "inputs": [
                                            "s",
                                            "format",
                                            "timezone"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "isValid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if the given string is a valid time in the specified format and timezone.",
                                        "todo": "Add support for common time formats and improve error handling for invalid timezones."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains utility functions for validating various types of data, including email addresses, URLs, IP addresses, passwords, usernames, phone numbers, credit card numbers, postal codes, ISBNs, and more.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "errors.go",
                                "functions": [
                                    {
                                        "name": "Error",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Implements the error interface for CustomError, returning a formatted error string.",
                                        "todo": "Consider adding options to customize the error output format."
                                    },
                                    {
                                        "name": "NewError",
                                        "inputs": [
                                            "message",
                                            "code"
                                        ],
                                        "input_types": [
                                            "string",
                                            "int"
                                        ],
                                        "outputs": [
                                            "*CustomError"
                                        ],
                                        "output_types": [
                                            "*CustomError"
                                        ],
                                        "summary": "Creates a new CustomError with the given message and code.",
                                        "todo": "Add option to include custom context when creating the error."
                                    },
                                    {
                                        "name": "WrapError",
                                        "inputs": [
                                            "err",
                                            "message",
                                            "code"
                                        ],
                                        "input_types": [
                                            "error",
                                            "string",
                                            "...int"
                                        ],
                                        "outputs": [
                                            "*CustomError"
                                        ],
                                        "output_types": [
                                            "*CustomError"
                                        ],
                                        "summary": "Wraps an existing error with additional context and optional error code.",
                                        "todo": "Consider adding option to preserve the original error type."
                                    },
                                    {
                                        "name": "IsCustomError",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "error"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if an error is of type CustomError.",
                                        "todo": "Expand to check for subtypes of CustomError as well."
                                    },
                                    {
                                        "name": "GetErrorCode",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "error"
                                        ],
                                        "outputs": [
                                            "int",
                                            "bool"
                                        ],
                                        "output_types": [
                                            "int",
                                            "bool"
                                        ],
                                        "summary": "Returns the error code if it's a CustomError, otherwise returns -1 and false.",
                                        "todo": "Consider returning a default error code for non-CustomError types."
                                    },
                                    {
                                        "name": "NewNotFoundError",
                                        "inputs": [
                                            "message",
                                            "context"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "*NotFoundError"
                                        ],
                                        "output_types": [
                                            "*NotFoundError"
                                        ],
                                        "summary": "Creates a new NotFoundError with the given message and optional context.",
                                        "todo": "Add option to specify custom error code other than 404."
                                    },
                                    {
                                        "name": "NewBadRequestError",
                                        "inputs": [
                                            "message",
                                            "context"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "*BadRequestError"
                                        ],
                                        "output_types": [
                                            "*BadRequestError"
                                        ],
                                        "summary": "Creates a new BadRequestError with the given message and optional context.",
                                        "todo": "Add validation for common bad request scenarios."
                                    },
                                    {
                                        "name": "NewUnauthorizedError",
                                        "inputs": [
                                            "message",
                                            "context"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "*UnauthorizedError"
                                        ],
                                        "output_types": [
                                            "*UnauthorizedError"
                                        ],
                                        "summary": "Creates a new UnauthorizedError with the given message and optional context.",
                                        "todo": "Include authentication-specific context in the error."
                                    },
                                    {
                                        "name": "NewInternalServerError",
                                        "inputs": [
                                            "message",
                                            "context"
                                        ],
                                        "input_types": [
                                            "string",
                                            "...map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "*InternalServerError"
                                        ],
                                        "output_types": [
                                            "*InternalServerError"
                                        ],
                                        "summary": "Creates a new InternalServerError with the given message and optional context.",
                                        "todo": "Add option to log the error automatically when created."
                                    },
                                    {
                                        "name": "IsErrorType",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "error"
                                        ],
                                        "outputs": [
                                            "bool"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if an error is of a specific custom error type using generics.",
                                        "todo": "Provide examples of usage in documentation."
                                    },
                                    {
                                        "name": "GetErrorMessage",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "error"
                                        ],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns a user-friendly error message based on the error type.",
                                        "todo": "Add support for localization of error messages."
                                    },
                                    {
                                        "name": "GetErrorDetails",
                                        "inputs": [
                                            "err"
                                        ],
                                        "input_types": [
                                            "error"
                                        ],
                                        "outputs": [
                                            "string"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Returns detailed error information for debugging purposes.",
                                        "todo": "Add option to redact sensitive information from the output."
                                    },
                                    {
                                        "name": "NewErrorWithContext",
                                        "inputs": [
                                            "message",
                                            "code",
                                            "context"
                                        ],
                                        "input_types": [
                                            "string",
                                            "int",
                                            "map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "*CustomError"
                                        ],
                                        "output_types": [
                                            "*CustomError"
                                        ],
                                        "summary": "Creates a new CustomError with additional context.",
                                        "todo": "Consider merging this functionality with NewError for consistency."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file provides custom error types and utility functions for error handling in Go applications. It defines a CustomError type with additional context and specialized error types for common HTTP status codes.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "metrics": {
                        "files": [
                            {
                                "name": "prometheus.go",
                                "functions": [
                                    {
                                        "name": "IncrementTotalRequests",
                                        "inputs": [
                                            "endpoint"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the total request counter for a given endpoint.",
                                        "todo": "Consider adding a default endpoint category for unrecognized endpoints."
                                    },
                                    {
                                        "name": "ObserveRequestDuration",
                                        "inputs": [
                                            "endpoint",
                                            "duration"
                                        ],
                                        "input_types": [
                                            "string",
                                            "float64"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Records the duration of a request for a given endpoint.",
                                        "todo": "Add support for custom bucket definitions."
                                    },
                                    {
                                        "name": "IncrementErrorCount",
                                        "inputs": [
                                            "errorType"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the error counter for a specific error type.",
                                        "todo": "Implement a mechanism to add custom error types dynamically."
                                    },
                                    {
                                        "name": "IncrementCodeExecutionCount",
                                        "inputs": [
                                            "executionType"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the code execution counter for a specific execution type.",
                                        "todo": "Add support for tracking code execution success and failure rates."
                                    },
                                    {
                                        "name": "ObserveCodeExecutionDuration",
                                        "inputs": [
                                            "executionType",
                                            "duration"
                                        ],
                                        "input_types": [
                                            "string",
                                            "float64"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Records the duration of a code execution for a specific execution type.",
                                        "todo": "Implement percentile tracking for code execution durations."
                                    },
                                    {
                                        "name": "IncrementLLMRequestCount",
                                        "inputs": [
                                            "service"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the LLM request counter for a specific service.",
                                        "todo": "Add support for tracking LLM request success and failure rates."
                                    },
                                    {
                                        "name": "ObserveLLMRequestDuration",
                                        "inputs": [
                                            "service",
                                            "duration"
                                        ],
                                        "input_types": [
                                            "string",
                                            "float64"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Records the duration of an LLM request for a specific service.",
                                        "todo": "Implement custom buckets for LLM request durations based on service type."
                                    },
                                    {
                                        "name": "IncrementCacheHitCount",
                                        "inputs": [
                                            "cacheType"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the cache hit counter for a specific cache type.",
                                        "todo": "Add support for tracking cache hit ratios."
                                    },
                                    {
                                        "name": "IncrementCacheMissCount",
                                        "inputs": [
                                            "cacheType"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the cache miss counter for a specific cache type.",
                                        "todo": "Implement cache efficiency metrics combining hit and miss counts."
                                    },
                                    {
                                        "name": "IncrementFileOperationCount",
                                        "inputs": [
                                            "operation"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the file operation counter for a specific operation type.",
                                        "todo": "Add support for tracking file operation success and failure rates."
                                    },
                                    {
                                        "name": "IncrementWebSearchCount",
                                        "inputs": [
                                            "engine"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Increments the web search counter for a specific search engine.",
                                        "todo": "Implement metrics for tracking search result quality or relevance."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file implements Prometheus metrics for monitoring various aspects of the application, including request handling, error tracking, code execution, LLM interactions, caching, file operations, and web searches.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "llm_service": {
                "files": [],
                "directories": {
                    "api": {
                        "files": [
                            {
                                "name": "main.py",
                                "functions": [
                                    {
                                        "name": "analyze_requirements",
                                        "inputs": [
                                            "ProjectRequest",
                                            "BackgroundTasks",
                                            "User"
                                        ],
                                        "input_types": [
                                            "ProjectRequest",
                                            "BackgroundTasks",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Analyzes project requirements and schedules tasks for code generation, test generation, and documentation.",
                                        "todo": "Consider adding error handling for specific LLM errors and improving task scheduling logic."
                                    },
                                    {
                                        "name": "generate_code",
                                        "inputs": [
                                            "ProjectRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "ProjectRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Generates, optimizes, and executes code based on project requirements, including security checks.",
                                        "todo": "Implement more detailed code optimization and security checking processes."
                                    },
                                    {
                                        "name": "execute_code",
                                        "inputs": [
                                            "CodeExecutionRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "CodeExecutionRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Executes provided code in a sandbox environment with timeout and security checks.",
                                        "todo": "Enhance sandbox security measures and implement resource usage monitoring."
                                    },
                                    {
                                        "name": "perform_web_search",
                                        "inputs": [
                                            "WebSearchRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "WebSearchRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Performs a web search, caches results, and analyzes the relevance of search results.",
                                        "todo": "Implement more sophisticated caching strategies and improve result analysis."
                                    },
                                    {
                                        "name": "file_operation",
                                        "inputs": [
                                            "FileOperationRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "FileOperationRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Performs various file operations including read, write, delete, update, and list.",
                                        "todo": "Add support for more complex file operations and implement file versioning."
                                    },
                                    {
                                        "name": "schedule_tasks",
                                        "inputs": [
                                            "TaskScheduleRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "TaskScheduleRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Schedules tasks with priority and returns the scheduled task information.",
                                        "todo": "Implement more advanced task prioritization algorithms and add support for task dependencies."
                                    },
                                    {
                                        "name": "get_task_results",
                                        "inputs": [
                                            "TaskResultRequest",
                                            "User"
                                        ],
                                        "input_types": [
                                            "TaskResultRequest",
                                            "User"
                                        ],
                                        "outputs": [
                                            "Dict"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Retrieves and analyzes task results with pagination support.",
                                        "todo": "Implement more detailed result analysis and add support for result filtering and sorting."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file implements a FastAPI application for a code generation and task management service. It includes endpoints for analyzing requirements, generating code, executing code, performing web searches, file operations, task scheduling, and retrieving task results.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "routes.py",
                                "functions": [
                                    {
                                        "name": "analyze_requirements",
                                        "inputs": [
                                            "request",
                                            "background_tasks"
                                        ],
                                        "input_types": [
                                            "ProjectRequest",
                                            "BackgroundTasks"
                                        ],
                                        "outputs": [
                                            "analysis",
                                            "scheduled_tasks"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Analyzes project requirements, schedules analysis tasks, and processes them in the background.",
                                        "todo": "Consider implementing more detailed error handling and logging."
                                    },
                                    {
                                        "name": "generate_code",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "ProjectRequest"
                                        ],
                                        "outputs": [
                                            "code",
                                            "execution_result",
                                            "security_issues",
                                            "detailed_feedback"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Generates, optimizes, and security-checks code based on project requirements, then executes it if it passes the security check.",
                                        "todo": "Implement more robust code optimization and security checking algorithms."
                                    },
                                    {
                                        "name": "execute_code",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "CodeExecutionRequest"
                                        ],
                                        "outputs": [
                                            "result",
                                            "resource_usage"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Executes provided code in a sandbox environment with timeout and memory limits.",
                                        "todo": "Enhance sandbox security and add support for more programming languages."
                                    },
                                    {
                                        "name": "perform_web_search",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "WebSearchRequest"
                                        ],
                                        "outputs": [
                                            "results",
                                            "relevant_info"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Performs a web search based on the query and analyzes the results using LLM.",
                                        "todo": "Implement more advanced web scraping techniques and improve result relevance scoring."
                                    },
                                    {
                                        "name": "file_operation",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "FileOperationRequest"
                                        ],
                                        "outputs": [
                                            "result"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Performs various file operations including read, write, delete, update, and list.",
                                        "todo": "Add support for more complex file operations and improve error handling for specific file types."
                                    },
                                    {
                                        "name": "schedule_tasks",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "TaskScheduleRequest"
                                        ],
                                        "outputs": [
                                            "scheduled_tasks",
                                            "estimated_completion_times"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Schedules tasks with priority and estimates completion times.",
                                        "todo": "Implement more sophisticated task prioritization and load balancing algorithms."
                                    },
                                    {
                                        "name": "get_task_results",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "TaskResultRequest"
                                        ],
                                        "outputs": [
                                            "results",
                                            "analysis",
                                            "progress",
                                            "total_pages",
                                            "current_page"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Retrieves task results, analyzes them, and provides paginated output with progress information.",
                                        "todo": "Implement real-time updates for task progress and add more detailed result analysis."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the API routes for a FastAPI application that manages LLM-based code generation, execution, web search, file operations, and task scheduling. It includes error handling, input sanitization, and various utility functions.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "models": {
                        "files": [
                            {
                                "name": "models.py",
                                "functions": [
                                    {
                                        "name": "Project",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the Project model with attributes such as name, description, dates, status, and budget. It also establishes relationships with tasks, requirements, and team members.",
                                        "todo": "Consider adding validation for date fields and budget constraints."
                                    },
                                    {
                                        "name": "TaskStatus",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines an enumeration for task statuses including pending, in progress, completed, failed, on hold, review, and blocked.",
                                        "todo": "Consider adding a custom status option for project-specific statuses."
                                    },
                                    {
                                        "name": "Task",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the Task model with attributes such as title, description, status, priority, and time estimates. It establishes relationships with projects, team members, code snippets, execution results, and web searches.",
                                        "todo": "Implement a method to calculate task progress based on estimated and actual hours."
                                    },
                                    {
                                        "name": "CodeSnippet",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the CodeSnippet model to store code snippets associated with tasks, including content, language, version, and author information.",
                                        "todo": "Add a method to compare different versions of code snippets."
                                    },
                                    {
                                        "name": "RequirementStatus",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines an enumeration for requirement statuses including draft, approved, implemented, rejected, and under review.",
                                        "todo": "Consider adding a 'deprecated' status for outdated requirements."
                                    },
                                    {
                                        "name": "RequirementType",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines an enumeration for requirement types including functional, non-functional, technical, and business.",
                                        "todo": "Consider adding subcategories for each requirement type."
                                    },
                                    {
                                        "name": "Requirement",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the Requirement model with attributes such as content, priority, status, and type. It establishes a relationship with projects.",
                                        "todo": "Implement a method to track requirement changes over time."
                                    },
                                    {
                                        "name": "ExecutionResult",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the ExecutionResult model to store the results of task executions, including output, errors, execution time, and environment details.",
                                        "todo": "Add a method to analyze execution trends over time."
                                    },
                                    {
                                        "name": "WebSearch",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the WebSearch model to store web search queries and results associated with tasks, including search engine, category, and filters.",
                                        "todo": "Implement a method to summarize search results for quick review."
                                    },
                                    {
                                        "name": "TeamMember",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the TeamMember model with attributes such as name, role, and email. It establishes relationships with projects, assigned tasks, and authored code snippets.",
                                        "todo": "Add a method to calculate team member productivity based on assigned tasks and code contributions."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the database models for a project management system using SQLAlchemy ORM. It includes models for projects, tasks, code snippets, requirements, execution results, web searches, and team members.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "llm": {
                        "files": [
                            {
                                "name": "llm_client.py",
                                "functions": [
                                    {
                                        "name": "__init__",
                                        "inputs": [
                                            "api_key",
                                            "base_url"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Initializes the LLMClient with API key and base URL, sets up logging, caching, and metrics.",
                                        "todo": "Consider adding error handling for invalid API key or base URL."
                                    },
                                    {
                                        "name": "__aenter__",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "self"
                                        ],
                                        "output_types": [
                                            "LLMClient"
                                        ],
                                        "summary": "Async context manager entry point, creates an aiohttp ClientSession.",
                                        "todo": "Add more robust error handling and recovery mechanisms."
                                    },
                                    {
                                        "name": "__aexit__",
                                        "inputs": [
                                            "exc_type",
                                            "exc_val",
                                            "exc_tb"
                                        ],
                                        "input_types": [
                                            "Type[BaseException] | None",
                                            "BaseException | None",
                                            "TracebackType | None"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Async context manager exit point, closes the aiohttp ClientSession.",
                                        "todo": "Consider adding logging for successful session closures."
                                    },
                                    {
                                        "name": "generate_code",
                                        "inputs": [
                                            "requirements",
                                            "language",
                                            "code_style"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "generated_code"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Generates code based on given requirements, language, and code style.",
                                        "todo": "Implement more comprehensive error handling for API responses."
                                    },
                                    {
                                        "name": "analyze_requirements",
                                        "inputs": [
                                            "requirements",
                                            "categories"
                                        ],
                                        "input_types": [
                                            "str",
                                            "List[str]"
                                        ],
                                        "outputs": [
                                            "analysis"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Analyzes project requirements and returns a structured analysis.",
                                        "todo": "Add more detailed validation for the analysis response."
                                    },
                                    {
                                        "name": "_validate_analysis_response",
                                        "inputs": [
                                            "response"
                                        ],
                                        "input_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Validates the structure of the analysis response.",
                                        "todo": "Expand validation to check for the content quality of each required key."
                                    },
                                    {
                                        "name": "suggest_solutions",
                                        "inputs": [
                                            "problem",
                                            "num_solutions"
                                        ],
                                        "input_types": [
                                            "str",
                                            "int"
                                        ],
                                        "outputs": [
                                            "solutions"
                                        ],
                                        "output_types": [
                                            "List[Dict[str, Any]]"
                                        ],
                                        "summary": "Suggests solutions for a given problem, with caching support.",
                                        "todo": "Implement a more sophisticated caching strategy, possibly with cache invalidation."
                                    },
                                    {
                                        "name": "execute_tasks",
                                        "inputs": [
                                            "tasks"
                                        ],
                                        "input_types": [
                                            "List[Dict[str, Any]]"
                                        ],
                                        "outputs": [
                                            "results"
                                        ],
                                        "output_types": [
                                            "List[Dict[str, Any]]"
                                        ],
                                        "summary": "Executes multiple tasks concurrently with priority handling and rate limiting.",
                                        "todo": "Add support for task dependencies and more complex execution flows."
                                    },
                                    {
                                        "name": "main",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Demonstrates the usage of LLMClient with example API calls.",
                                        "todo": "Expand with more comprehensive examples and error handling scenarios."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file implements an asynchronous client for interacting with a Language Learning Model (LLM) API. It provides functionality for generating code, analyzing requirements, suggesting solutions, and executing multiple tasks concurrently.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "prompt_generator.py",
                                "functions": [
                                    {
                                        "name": "__init__",
                                        "inputs": [
                                            "system_prompt"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Initializes the PromptGenerator with a system prompt and predefined languages and code styles.",
                                        "todo": "Consider adding more languages and code styles."
                                    },
                                    {
                                        "name": "generate_code_prompt",
                                        "inputs": [
                                            "requirements",
                                            "language",
                                            "code_style"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "prompt"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Generates a prompt for code generation based on given requirements, language, and code style.",
                                        "todo": "Add more language-specific prompts and considerations."
                                    },
                                    {
                                        "name": "generate_analysis_prompt",
                                        "inputs": [
                                            "requirements",
                                            "categories"
                                        ],
                                        "input_types": [
                                            "str",
                                            "List[str]"
                                        ],
                                        "outputs": [
                                            "prompt"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Generates a prompt for requirement analysis based on given requirements and categories.",
                                        "todo": "Consider adding more specialized categories for different types of projects."
                                    },
                                    {
                                        "name": "generate_solution_prompt",
                                        "inputs": [
                                            "problem",
                                            "num_solutions"
                                        ],
                                        "input_types": [
                                            "str",
                                            "int"
                                        ],
                                        "outputs": [
                                            "prompt"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Generates a prompt for problem-solving, suggesting multiple solutions for a given problem.",
                                        "todo": "Add options for specifying solution constraints or preferences."
                                    },
                                    {
                                        "name": "generate_task_prompts",
                                        "inputs": [
                                            "tasks"
                                        ],
                                        "input_types": [
                                            "List[Dict[str, Any]]"
                                        ],
                                        "outputs": [
                                            "prompts"
                                        ],
                                        "output_types": [
                                            "List[str]"
                                        ],
                                        "summary": "Generates prompts for a list of tasks, handling different task types and error cases.",
                                        "todo": "Implement more robust error handling and logging."
                                    },
                                    {
                                        "name": "extract_code_from_response",
                                        "inputs": [
                                            "response"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "extracted_code"
                                        ],
                                        "output_types": [
                                            "Dict[str, str]"
                                        ],
                                        "summary": "Extracts code blocks from an AI response and categorizes them by language.",
                                        "todo": "Improve language detection accuracy for edge cases."
                                    },
                                    {
                                        "name": "_detect_language",
                                        "inputs": [
                                            "code"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "language"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Detects the programming language of a given code snippet using regex patterns.",
                                        "todo": "Expand language detection patterns for more accurate results."
                                    },
                                    {
                                        "name": "parse_analysis_response",
                                        "inputs": [
                                            "response"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "analysis"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Parses an AI response for requirement analysis into a structured dictionary.",
                                        "todo": "Implement more flexible parsing to handle variations in response format."
                                    },
                                    {
                                        "name": "parse_solution_response",
                                        "inputs": [
                                            "response"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "solutions"
                                        ],
                                        "output_types": [
                                            "List[Dict[str, Any]]"
                                        ],
                                        "summary": "Parses an AI response for problem-solving into a list of structured solution dictionaries.",
                                        "todo": "Add support for parsing additional solution attributes."
                                    },
                                    {
                                        "name": "main",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Demonstrates the usage of the PromptGenerator class with example prompts and responses.",
                                        "todo": "Expand with more diverse examples and use cases."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines a PromptGenerator class that generates various prompts for AI-assisted software development tasks, including code generation, requirement analysis, and problem-solving. It also includes methods for parsing and extracting information from AI responses.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "utils": {
                        "files": [
                            {
                                "name": "helpers.py",
                                "functions": [
                                    {
                                        "name": "read_dev_file",
                                        "inputs": [
                                            "file_path",
                                            "encoding"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "file_content"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Reads and returns the content of a development file.",
                                        "todo": "Consider adding support for different file formats."
                                    },
                                    {
                                        "name": "parse_requirements",
                                        "inputs": [
                                            "content"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "requirements"
                                        ],
                                        "output_types": [
                                            "List[str]"
                                        ],
                                        "summary": "Parses requirements from a string content and returns a list of requirements.",
                                        "todo": "Add support for more complex requirement specifications."
                                    },
                                    {
                                        "name": "execute_web_search",
                                        "inputs": [
                                            "query"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "search_results"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Executes a web search using Google Custom Search API and returns the results.",
                                        "todo": "Implement error handling for API quota exceeded."
                                    },
                                    {
                                        "name": "save_generated_code",
                                        "inputs": [
                                            "code",
                                            "file_path",
                                            "mode"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Saves generated code to a file and applies formatting for Python and JavaScript files.",
                                        "todo": "Add support for more programming languages and formatting options."
                                    },
                                    {
                                        "name": "load_project_config",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "config"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Loads and returns the project configuration from a JSON file.",
                                        "todo": "Implement config versioning and migration."
                                    },
                                    {
                                        "name": "validate_config",
                                        "inputs": [
                                            "config"
                                        ],
                                        "input_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Validates the project configuration and sets default values for missing keys.",
                                        "todo": "Add more detailed validation for specific config options."
                                    },
                                    {
                                        "name": "sanitize_input",
                                        "inputs": [
                                            "input_str"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "sanitized_str"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Sanitizes input strings to prevent SQL injection and other malicious inputs.",
                                        "todo": "Expand sanitization rules for other types of injections."
                                    },
                                    {
                                        "name": "log_error",
                                        "inputs": [
                                            "error_message",
                                            "level",
                                            "log_file"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "Optional[str]"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Logs error messages with configurable log level and optional file output.",
                                        "todo": "Implement log rotation and compression for log files."
                                    },
                                    {
                                        "name": "create_directory_if_not_exists",
                                        "inputs": [
                                            "directory_path",
                                            "mode",
                                            "recursive"
                                        ],
                                        "input_types": [
                                            "str",
                                            "int",
                                            "bool"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Creates a directory if it doesn't exist, with optional recursive creation.",
                                        "todo": "Add support for setting custom permissions on created directories."
                                    },
                                    {
                                        "name": "get_file_content",
                                        "inputs": [
                                            "file_path",
                                            "encoding"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "file_content"
                                        ],
                                        "output_types": [
                                            "Optional[str]"
                                        ],
                                        "summary": "Reads and returns the content of a file with retry mechanism.",
                                        "todo": "Implement file locking to prevent concurrent access issues."
                                    },
                                    {
                                        "name": "make_api_request",
                                        "inputs": [
                                            "url",
                                            "method",
                                            "data",
                                            "headers",
                                            "auth"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "Optional[Dict[str, Any]]",
                                            "Optional[Dict[str, str]]",
                                            "Optional[tuple]"
                                        ],
                                        "outputs": [
                                            "response_data"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Makes an API request with configurable method, data, headers, and authentication.",
                                        "todo": "Add support for custom SSL verification and proxy settings."
                                    },
                                    {
                                        "name": "extract_text_from_html",
                                        "inputs": [
                                            "html_content",
                                            "preserve_elements"
                                        ],
                                        "input_types": [
                                            "str",
                                            "Optional[List[str]]"
                                        ],
                                        "outputs": [
                                            "extracted_text"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Extracts text content from HTML, optionally preserving specified elements.",
                                        "todo": "Improve handling of nested HTML structures and special characters."
                                    },
                                    {
                                        "name": "validate_file_extension",
                                        "inputs": [
                                            "file_path",
                                            "allowed_extensions",
                                            "case_sensitive"
                                        ],
                                        "input_types": [
                                            "str",
                                            "List[str]",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "is_valid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Validates if a file has an allowed extension, with optional case sensitivity.",
                                        "todo": "Add support for wildcard patterns in allowed extensions."
                                    },
                                    {
                                        "name": "get_file_size",
                                        "inputs": [
                                            "file_path",
                                            "unit"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "file_size"
                                        ],
                                        "output_types": [
                                            "float"
                                        ],
                                        "summary": "Returns the size of a file in the specified unit (bytes, KB, MB, GB, or TB).",
                                        "todo": "Implement support for getting sizes of directories and symlinks."
                                    },
                                    {
                                        "name": "is_valid_url",
                                        "inputs": [
                                            "url"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "is_valid"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Checks if a given URL is valid and uses an allowed scheme.",
                                        "todo": "Add support for custom URL schemes and more rigorous validation."
                                    },
                                    {
                                        "name": "get_cached_result",
                                        "inputs": [
                                            "key"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "cached_result"
                                        ],
                                        "output_types": [
                                            "Optional[Dict[str, Any]]"
                                        ],
                                        "summary": "Retrieves a cached result from Redis using the provided key.",
                                        "todo": "Implement cache versioning and invalidation strategies."
                                    },
                                    {
                                        "name": "cache_result",
                                        "inputs": [
                                            "key",
                                            "result"
                                        ],
                                        "input_types": [
                                            "str",
                                            "Dict[str, Any]"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Caches a result in Redis with the provided key and expiration time.",
                                        "todo": "Add support for different serialization formats and compression."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "A utility file containing various helper functions for file operations, web searches, API requests, and other common tasks in the LLM service.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "tests": {
                "files": [],
                "directories": {
                    "unit": {
                        "files": [],
                        "directories": {
                            "api": {
                                "files": [
                                    {
                                        "name": "handler_test.go",
                                        "functions": [
                                            {
                                                "name": "TestHandleGenerateCode",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the HandleGenerateCode function with various scenarios including successful code generation, invalid requests, error handling, and rate limiting.",
                                                "todo": "Consider adding more edge cases and testing for different types of prompts."
                                            },
                                            {
                                                "name": "TestHandleExecuteCode",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the HandleExecuteCode function with different programming languages, error scenarios, and edge cases such as timeouts and memory limits.",
                                                "todo": "Add tests for more programming languages and consider testing for code injection vulnerabilities."
                                            },
                                            {
                                                "name": "TestHandleFileOperation",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the HandleFileOperation function for both read and write operations, including error handling and invalid requests.",
                                                "todo": "Expand tests to cover more file operations and edge cases, such as large file handling and concurrent access."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for the API handler functions, including code generation, code execution, and file operations. It uses mock services to simulate external dependencies and tests various scenarios including success cases, error handling, and edge cases.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "middleware_test.go",
                                        "functions": [
                                            {
                                                "name": "TestCORSMiddleware",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the CORS middleware for different HTTP methods and origins",
                                                "todo": "Consider adding more edge cases and testing for additional headers"
                                            },
                                            {
                                                "name": "TestAuthMiddleware",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the authentication middleware with various token scenarios",
                                                "todo": "Add tests for different token expiration scenarios"
                                            },
                                            {
                                                "name": "TestLoggingMiddleware",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the logging middleware for different HTTP methods",
                                                "todo": "Implement checks for logged output and consider testing with different log levels"
                                            },
                                            {
                                                "name": "TestRateLimitMiddleware",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the rate limiting middleware using a mock Redis client",
                                                "todo": "Add tests for concurrent requests and different rate limit configurations"
                                            },
                                            {
                                                "name": "MockRedisClient.Incr",
                                                "inputs": [
                                                    "ctx context.Context",
                                                    "key string"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*redis.IntCmd"
                                                ],
                                                "output_types": [
                                                    "*redis.IntCmd"
                                                ],
                                                "summary": "Mock implementation of Redis Incr command",
                                                "todo": "Consider adding more sophisticated mocking behavior if needed"
                                            },
                                            {
                                                "name": "MockRedisClient.Expire",
                                                "inputs": [
                                                    "ctx context.Context",
                                                    "key string",
                                                    "expiration time.Duration"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string",
                                                    "time.Duration"
                                                ],
                                                "outputs": [
                                                    "*redis.BoolCmd"
                                                ],
                                                "output_types": [
                                                    "*redis.BoolCmd"
                                                ],
                                                "summary": "Mock implementation of Redis Expire command",
                                                "todo": "Consider adding more sophisticated mocking behavior if needed"
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for various middleware functions used in the API. It tests CORS middleware, authentication middleware, logging middleware, and rate limiting middleware.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "core": {
                                "files": [
                                    {
                                        "name": "orchestrator_test.go",
                                        "functions": [
                                            {
                                                "name": "TestOrchestrator_ProcessRequirements",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the ProcessRequirements method of the Orchestrator with various scenarios including successful processing, analyzer errors, executor errors, empty requirements, partial execution success, large number of tasks, context cancellation, timeout, and special character handling.",
                                                "todo": "Consider adding more edge cases and error scenarios."
                                            },
                                            {
                                                "name": "TestOrchestrator_HandleTask",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the HandleTask method of the Orchestrator with scenarios for successful task handling, executor errors, nil task, and task with empty ID.",
                                                "todo": "Add more test cases for different task types and error conditions."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for the Orchestrator component, testing various scenarios of requirement processing and task handling.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "analyzer_test.go",
                                        "functions": [
                                            {
                                                "name": "TestAnalyzer_Analyze",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "This function contains multiple test cases for the Analyze method of the Analyzer struct. It covers scenarios such as successful analysis, LLM service errors, empty requirements, large requirements, malformed requirements, long processing time, context cancellation, partial analysis results, special characters, code snippets, multiple languages, conflicting tasks, dependencies, extremely large inputs, non-ASCII characters, nested dependencies, cyclic dependencies, and ambiguous tasks.",
                                                "todo": "Consider adding more edge cases and stress tests to ensure robustness of the Analyzer."
                                            },
                                            {
                                                "name": "AnalyzeRequirements",
                                                "inputs": [
                                                    "ctx context.Context",
                                                    "requirements string"
                                                ],
                                                "input_types": [
                                                    "context.Context",
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "*models.AnalysisResult",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "*models.AnalysisResult",
                                                    "error"
                                                ],
                                                "summary": "This is a mock function that simulates the behavior of the LLM service's AnalyzeRequirements method. It's used in the test cases to return predefined results or errors based on the input.",
                                                "todo": "Implement more sophisticated mocking behavior to simulate complex LLM responses."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for the Analyzer component, which is responsible for analyzing requirements and generating tasks. It uses mock objects to simulate the LLM service and tests various scenarios including successful analysis, error handling, and edge cases.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "executor_test.go",
                                        "functions": [
                                            {
                                                "name": "TestExecutor_Execute",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor for a code execution task",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_FileOperation",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor for a file read operation",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_UnsupportedTaskType",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor with an unsupported task type",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_CodeExecutionError",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor when code execution fails",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_FileOperationError",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor when file read operation fails",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_FileWriteOperation",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor for a file write operation",
                                                "todo": ""
                                            },
                                            {
                                                "name": "TestExecutor_Execute_FileWriteOperationError",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Execute method of Executor when file write operation fails",
                                                "todo": ""
                                            }
                                        ],
                                        "status": "done",
                                        "summary": "This file contains unit tests for the Executor struct, which is responsible for executing different types of tasks such as code execution and file operations. It uses mocks to simulate filesystem and code execution dependencies.",
                                        "last_updated_iteration": 1
                                    }
                                ],
                                "directories": {}
                            },
                            "executor": {
                                "files": [
                                    {
                                        "name": "action_executor_test.go",
                                        "functions": [
                                            {
                                                "name": "TestActionExecutor_Execute",
                                                "inputs": [
                                                    "*testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "This function tests the Execute method of ActionExecutor with multiple sub-tests covering different scenarios for ReadFile, WriteFile, and WebSearch actions.",
                                                "todo": "Consider adding more edge cases and error scenarios for comprehensive testing."
                                            },
                                            {
                                                "name": "MockFileOperations.ReadFile",
                                                "inputs": [
                                                    "path"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "[]byte",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]byte",
                                                    "error"
                                                ],
                                                "summary": "Mock implementation of ReadFile for testing purposes.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "MockFileOperations.WriteFile",
                                                "inputs": [
                                                    "path",
                                                    "data",
                                                    "perm"
                                                ],
                                                "input_types": [
                                                    "string",
                                                    "[]byte",
                                                    "uint32"
                                                ],
                                                "outputs": [
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "error"
                                                ],
                                                "summary": "Mock implementation of WriteFile for testing purposes.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "MockWebSearch.Search",
                                                "inputs": [
                                                    "query"
                                                ],
                                                "input_types": [
                                                    "string"
                                                ],
                                                "outputs": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "output_types": [
                                                    "[]string",
                                                    "error"
                                                ],
                                                "summary": "Mock implementation of Search for testing purposes.",
                                                "todo": ""
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for the ActionExecutor, testing various scenarios for executing different types of actions such as ReadFile, WriteFile, and WebSearch.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "file_operations_test.go",
                                        "functions": [
                                            {
                                                "name": "TestFileOperations_ReadFile",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the ReadFile function of FileOperations struct with various scenarios, including reading existing files, non-existent files, large files, restricted files, UTF-8 content, special characters in filenames, long paths, and concurrent reading.",
                                                "todo": "Consider adding tests for reading from network file systems or cloud storage."
                                            },
                                            {
                                                "name": "TestFileOperations_WriteFile",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the WriteFile function of FileOperations struct with various scenarios, including writing to new files, updating existing files, handling read-only directories and files, writing large files, UTF-8 content, special characters in filenames, long paths, concurrent writing, and simulating writing to a full disk.",
                                                "todo": "Add tests for writing to network file systems or cloud storage."
                                            },
                                            {
                                                "name": "TestFileOperations_ListFiles",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the ListFiles function of FileOperations struct with various scenarios, including listing files in directories, handling non-existent directories, empty directories, large directories, symlinks, special characters in filenames, and long paths. Also tests sorting and filtering options for file listing.",
                                                "todo": "Implement and test pagination for listing large directories to improve performance."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for various file operations, including reading, writing, and listing files. It tests different scenarios such as handling large files, UTF-8 content, special characters, long paths, and concurrent operations.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "sandbox_test.go",
                                        "functions": [
                                            {
                                                "name": "TestSandbox_Execute",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Sandbox.Execute method with various code execution scenarios.",
                                                "todo": "Consider adding more edge cases and error scenarios."
                                            },
                                            {
                                                "name": "TestSandbox_ExecuteWithResourceLimits",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Sandbox.ExecuteWithResourceLimits method with different resource limit configurations.",
                                                "todo": "Add tests for concurrent executions and resource limit interactions."
                                            },
                                            {
                                                "name": "TestSandbox_SetResourceLimits",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Sandbox.SetResourceLimits method with various limit configurations.",
                                                "todo": "Consider adding tests for updating resource limits during execution."
                                            },
                                            {
                                                "name": "TestSandbox_ExecuteWithIsolation",
                                                "inputs": [
                                                    "t *testing.T"
                                                ],
                                                "input_types": [
                                                    "*testing.T"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the Sandbox.ExecuteWithIsolation method (implementation not shown in the provided code snippet).",
                                                "todo": "Implement the test cases for ExecuteWithIsolation method and add relevant assertions."
                                            }
                                        ],
                                        "status": "in_progress",
                                        "summary": "This file contains unit tests for the Sandbox executor, testing various execution scenarios and resource limit implementations.",
                                        "last_updated_iteration": 5
                                    }
                                ],
                                "directories": {}
                            },
                            "llm_service": {
                                "files": [
                                    {
                                        "name": "llm_client_test.py",
                                        "functions": [
                                            {
                                                "name": "test_send_request",
                                                "inputs": [
                                                    "self",
                                                    "mock_post"
                                                ],
                                                "input_types": [
                                                    "TestLLMClient",
                                                    "MagicMock"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the send_request method of LLMClient, including error handling, different prompt types, and API response scenarios.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code",
                                                "inputs": [
                                                    "self",
                                                    "mock_send_request"
                                                ],
                                                "input_types": [
                                                    "TestLLMClient",
                                                    "MagicMock"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the generate_code method of LLMClient, including various code generation scenarios and error handling.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_analyze_requirements",
                                                "inputs": [
                                                    "self",
                                                    "mock_send_request"
                                                ],
                                                "input_types": [
                                                    "TestLLMClient",
                                                    "MagicMock"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the analyze_requirements method of LLMClient, covering different types of requirements and analysis scenarios.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_suggest_improvements",
                                                "inputs": [
                                                    "self",
                                                    "mock_send_request"
                                                ],
                                                "input_types": [
                                                    "TestLLMClient",
                                                    "MagicMock"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the suggest_improvements method of LLMClient, including various code improvement scenarios and input types.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_explain_code",
                                                "inputs": [
                                                    "self",
                                                    "mock_send_request"
                                                ],
                                                "input_types": [
                                                    "TestLLMClient",
                                                    "MagicMock"
                                                ],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Tests the explain_code method of LLMClient, covering different code explanation scenarios and detail levels.",
                                                "todo": ""
                                            }
                                        ],
                                        "status": "done",
                                        "summary": "This file contains unit tests for the LLMClient class, testing various methods and scenarios for interacting with a language model API.",
                                        "last_updated_iteration": 5
                                    },
                                    {
                                        "name": "prompt_generator_test.py",
                                        "functions": [
                                            {
                                                "name": "setUp",
                                                "inputs": [],
                                                "input_types": [],
                                                "outputs": [],
                                                "output_types": [],
                                                "summary": "Initializes the PromptGenerator instance for each test case.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code_prompt",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_code_prompt method with a simple requirement.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_analysis_prompt",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_analysis_prompt method with a project requirement.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_improvement_prompt",
                                                "inputs": [
                                                    "code"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_improvement_prompt method with a code snippet.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_explanation_prompt",
                                                "inputs": [
                                                    "code"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_explanation_prompt method with a code snippet.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code_prompt_empty_input",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_code_prompt method with an empty input.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_analysis_prompt_multiline_input",
                                                "inputs": [
                                                    "requirements"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_analysis_prompt method with a multiline input.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_improvement_prompt_complex_code",
                                                "inputs": [
                                                    "code"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_improvement_prompt method with a complex code snippet.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_explanation_prompt_with_comments",
                                                "inputs": [
                                                    "code"
                                                ],
                                                "input_types": [
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_explanation_prompt method with a code snippet containing comments.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code_prompt_with_language_specification",
                                                "inputs": [
                                                    "requirements",
                                                    "language"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_code_prompt method with a specific programming language.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_analysis_prompt_with_context",
                                                "inputs": [
                                                    "requirements",
                                                    "context"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_analysis_prompt method with additional context.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_improvement_prompt_with_specific_focus",
                                                "inputs": [
                                                    "code",
                                                    "focus"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_improvement_prompt method with a specific improvement focus.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_explanation_prompt_with_target_audience",
                                                "inputs": [
                                                    "code",
                                                    "audience"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_explanation_prompt method with a specified target audience.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code_prompt_with_multiple_languages",
                                                "inputs": [
                                                    "requirements",
                                                    "languages"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "list"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_code_prompt method with multiple programming languages.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_analysis_prompt_with_project_constraints",
                                                "inputs": [
                                                    "requirements",
                                                    "constraints"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_analysis_prompt method with project constraints.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_improvement_prompt_with_multiple_aspects",
                                                "inputs": [
                                                    "code",
                                                    "aspects"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "list"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_improvement_prompt method with multiple improvement aspects.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_explanation_prompt_with_code_snippet_and_full_file",
                                                "inputs": [
                                                    "code_snippet",
                                                    "full_file"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_explanation_prompt method with a code snippet and its context in a full file.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_code_prompt_with_design_pattern",
                                                "inputs": [
                                                    "requirements",
                                                    "design_pattern"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_code_prompt method with a specified design pattern.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_analysis_prompt_with_performance_requirements",
                                                "inputs": [
                                                    "requirements",
                                                    "performance_req"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_analysis_prompt method with performance requirements.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_improvement_prompt_with_specific_language_version",
                                                "inputs": [
                                                    "code",
                                                    "language_version"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "str"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_improvement_prompt method with a specific language version.",
                                                "todo": ""
                                            },
                                            {
                                                "name": "test_generate_explanation_prompt_with_specific_concepts",
                                                "inputs": [
                                                    "code",
                                                    "concepts"
                                                ],
                                                "input_types": [
                                                    "str",
                                                    "list"
                                                ],
                                                "outputs": [
                                                    "result"
                                                ],
                                                "output_types": [
                                                    "str"
                                                ],
                                                "summary": "Tests the generate_explanation_prompt method with specific concepts to focus on.",
                                                "todo": ""
                                            }
                                        ],
                                        "status": "done",
                                        "summary": "This file contains unit tests for the PromptGenerator class, which is responsible for generating various types of prompts for different purposes such as code generation, analysis, improvement suggestions, and code explanations.",
                                        "last_updated_iteration": 2
                                    }
                                ],
                                "directories": {}
                            }
                        }
                    },
                    "integration": {
                        "files": [
                            {
                                "name": "api_integration_test.go",
                                "functions": [
                                    {
                                        "name": "TestAPIIntegration",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Main test function that sets up the test environment, runs all sub-tests, and performs cleanup.",
                                        "todo": "Consider adding more comprehensive error handling and logging."
                                    },
                                    {
                                        "name": "testCreateProject",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the creation of projects, including valid and invalid inputs, duplicate projects, and concurrent creation.",
                                        "todo": "Add tests for different content types and malformed JSON input."
                                    },
                                    {
                                        "name": "testGetProject",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests retrieving projects, including successful retrieval, non-existent projects, invalid IDs, pagination, filtering, and sorting.",
                                        "todo": "Implement more complex filtering and sorting scenarios."
                                    },
                                    {
                                        "name": "testUpdateProject",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests updating projects, including full updates, partial updates, invalid updates, and concurrent updates.",
                                        "todo": "Add tests for updating non-existent projects and handling of read-only fields."
                                    },
                                    {
                                        "name": "testDeleteProject",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests deleting projects and verifies that deleted projects cannot be retrieved.",
                                        "todo": "Add tests for deleting non-existent projects and projects with associated resources."
                                    },
                                    {
                                        "name": "testGenerateCode",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests code generation functionality.",
                                        "todo": "Implement this test function to cover various code generation scenarios."
                                    },
                                    {
                                        "name": "testExecuteCode",
                                        "inputs": [
                                            "router http.Handler"
                                        ],
                                        "input_types": [
                                            "http.Handler"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests code execution functionality.",
                                        "todo": "Implement this test function to cover various code execution scenarios."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains integration tests for the API endpoints of the DevLM project. It tests various CRUD operations for projects, code generation, and code execution.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "worker_integration_test.go",
                                "functions": [
                                    {
                                        "name": "TestWorkerIntegration",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Main test function that sets up the test environment and runs sub-tests for different worker functionalities.",
                                        "todo": "Consider adding more edge cases and error scenarios."
                                    },
                                    {
                                        "name": "testProcessTask",
                                        "inputs": [
                                            "ctx context.Context",
                                            "w *worker.Worker"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the ProcessTask function of the worker, including concurrent task processing and priority handling.",
                                        "todo": "Add more test cases for different task types and edge cases."
                                    },
                                    {
                                        "name": "testHandleCodeGeneration",
                                        "inputs": [
                                            "ctx context.Context",
                                            "w *worker.Worker"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the HandleCodeGeneration function of the worker, including various programming languages and constraints.",
                                        "todo": "Include more complex code generation scenarios and edge cases."
                                    },
                                    {
                                        "name": "testHandleCodeExecution",
                                        "inputs": [
                                            "ctx context.Context",
                                            "w *worker.Worker"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the HandleCodeExecution function of the worker, including execution timeout and resource limits.",
                                        "todo": "Add more test cases for different programming languages and execution environments."
                                    },
                                    {
                                        "name": "testHandleFileOperation",
                                        "inputs": [
                                            "ctx context.Context",
                                            "w *worker.Worker"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*worker.Worker"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the HandleFileOperation function of the worker, covering various file operations and edge cases.",
                                        "todo": "Implement more complex file operation scenarios and security tests."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "Integration tests for the worker package, covering task processing, code generation, code execution, and file operations.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "llm_service_integration_test.py",
                                "functions": [
                                    {
                                        "name": "test_generate_code",
                                        "inputs": [
                                            "mock_llm_manager"
                                        ],
                                        "input_types": [
                                            "MagicMock"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the /generate_code endpoint with various programming languages and edge cases.",
                                        "todo": "Consider adding more specific assertions for generated code structure and content."
                                    },
                                    {
                                        "name": "test_analyze_requirements",
                                        "inputs": [
                                            "mock_llm_manager"
                                        ],
                                        "input_types": [
                                            "MagicMock"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the /analyze_requirements endpoint with complex requirements and verifies the output structure.",
                                        "todo": "Add more specific assertions for task content and relevance to the given requirements."
                                    },
                                    {
                                        "name": "test_review_code",
                                        "inputs": [
                                            "mock_llm_manager"
                                        ],
                                        "input_types": [
                                            "MagicMock"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the /review_code endpoint with various programming languages and verifies the suggestions.",
                                        "todo": "Implement more detailed checks for the relevance and quality of code review suggestions."
                                    },
                                    {
                                        "name": "test_explain_code",
                                        "inputs": [
                                            "mock_llm_manager"
                                        ],
                                        "input_types": [
                                            "MagicMock"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the /explain_code endpoint with complex code snippets and verifies the explanation content.",
                                        "todo": "Add more specific checks for explanation accuracy and completeness."
                                    },
                                    {
                                        "name": "test_suggest_improvements",
                                        "inputs": [
                                            "mock_llm_manager"
                                        ],
                                        "input_types": [
                                            "MagicMock"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the /suggest_improvements endpoint with various code styles and verifies the improvement suggestions.",
                                        "todo": "Implement more thorough checks for the relevance and quality of improvement suggestions."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains integration tests for the LLM service API endpoints, including code generation, requirement analysis, code review, code explanation, and code improvement suggestions.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "e2e": {
                        "files": [
                            {
                                "name": "e2e_test.go",
                                "functions": [
                                    {
                                        "name": "TestE2EWorkflow",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Main test function that orchestrates the entire end-to-end workflow test",
                                        "todo": "Consider adding more comprehensive tests for edge cases"
                                    },
                                    {
                                        "name": "testRequirementAnalysis",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the requirement analysis functionality of the API client",
                                        "todo": "Add more specific assertions for detailed requirements"
                                    },
                                    {
                                        "name": "testCodeGeneration",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the code generation functionality of the API client",
                                        "todo": "Include more specific checks for code structure and patterns"
                                    },
                                    {
                                        "name": "testCodeExecution",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the code execution functionality of the API client",
                                        "todo": "Add more test cases for different types of code execution scenarios"
                                    },
                                    {
                                        "name": "testWebSearch",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the web search functionality of the API client",
                                        "todo": "Include tests for handling of malformed search queries"
                                    },
                                    {
                                        "name": "testCodeUpdate",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the code update functionality of the API client",
                                        "todo": "Add tests for updating code with conflicting changes"
                                    },
                                    {
                                        "name": "testFinalExecution",
                                        "inputs": [
                                            "ctx context.Context",
                                            "client *api.Client"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "*api.Client"
                                        ],
                                        "outputs": [
                                            "func(*testing.T)"
                                        ],
                                        "output_types": [
                                            "func(*testing.T)"
                                        ],
                                        "summary": "Tests the final execution of the updated code",
                                        "todo": "Include more assertions for specific output patterns"
                                    },
                                    {
                                        "name": "testServerFunctionality",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests various functionalities of the generated server",
                                        "todo": "Add tests for additional HTTP methods and edge cases"
                                    },
                                    {
                                        "name": "TestConcurrentRequests",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the server's ability to handle concurrent requests",
                                        "todo": "Consider increasing the number of concurrent requests for more rigorous testing"
                                    },
                                    {
                                        "name": "TestServerStress",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Performs a stress test on the server with a high number of requests",
                                        "todo": "Implement variable request rates and durations for more comprehensive stress testing"
                                    },
                                    {
                                        "name": "TestLargePayload",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the server's ability to handle large payloads",
                                        "todo": "Add tests for streaming large payloads and handling partial uploads"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains end-to-end tests for a Go web server application. It tests various aspects of the development workflow, including requirement analysis, code generation, code execution, web search functionality, code updates, and server functionality.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "performance": {
                        "files": [
                            {
                                "name": "load_test.go",
                                "functions": [
                                    {
                                        "name": "TestLoadAPI",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the API under various load scenarios, measuring response times and success rates.",
                                        "todo": "Consider adding more diverse scenarios and adjusting thresholds based on production requirements."
                                    },
                                    {
                                        "name": "BenchmarkAPIResponse",
                                        "inputs": [
                                            "b *testing.B"
                                        ],
                                        "input_types": [
                                            "*testing.B"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Benchmarks the response times of different API endpoints and asserts minimum performance requirements.",
                                        "todo": "Update the minimum operations per second threshold based on production performance targets."
                                    },
                                    {
                                        "name": "TestConcurrentRequests",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the API's ability to handle concurrent requests at various concurrency levels.",
                                        "todo": "Consider adding more concurrency levels and adjusting latency thresholds based on production requirements."
                                    },
                                    {
                                        "name": "TestAPIEndpoints",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests various API endpoints for correct response structure and content.",
                                        "todo": "Add more specific assertions for each endpoint's response content."
                                    },
                                    {
                                        "name": "TestAPILatency",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the API's latency over a large number of requests and asserts on various percentiles.",
                                        "todo": "Adjust the number of requests and latency thresholds based on production performance targets."
                                    },
                                    {
                                        "name": "TestAPIStability",
                                        "inputs": [
                                            "t *testing.T"
                                        ],
                                        "input_types": [
                                            "*testing.T"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Tests the API's stability over an extended period, measuring success rates and latencies.",
                                        "todo": "Complete the implementation of stability assertions and adjust the test duration as needed."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains performance and load testing functions for an API. It includes tests for different load scenarios, concurrent requests, API endpoints, latency, and stability.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "deploy": {
                "files": [],
                "directories": {
                    "docker": {
                        "files": [
                            {
                                "name": "Dockerfile.api",
                                "functions": [
                                    {
                                        "name": "Build Stage",
                                        "inputs": [
                                            "go.mod",
                                            "go.sum",
                                            "application code",
                                            "VERSION"
                                        ],
                                        "input_types": [
                                            "file",
                                            "file",
                                            "directory",
                                            "string"
                                        ],
                                        "outputs": [
                                            "main binary"
                                        ],
                                        "output_types": [
                                            "executable"
                                        ],
                                        "summary": "Compiles the Go API application with optimizations and version information",
                                        "todo": "Ensure all necessary build arguments are provided during the build process"
                                    },
                                    {
                                        "name": "Runtime Stage",
                                        "inputs": [
                                            "main binary",
                                            "environment variables"
                                        ],
                                        "input_types": [
                                            "executable",
                                            "key-value pairs"
                                        ],
                                        "outputs": [
                                            "running API service"
                                        ],
                                        "output_types": [
                                            "process"
                                        ],
                                        "summary": "Sets up a minimal runtime environment for the API, including security measures and configuration",
                                        "todo": "Implement the /health endpoint in the API application for the health check to function properly"
                                    },
                                    {
                                        "name": "Health Check",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "health status"
                                        ],
                                        "output_types": [
                                            "boolean"
                                        ],
                                        "summary": "Periodically checks the health of the API service",
                                        "todo": "Ensure the /health endpoint returns appropriate status codes for container orchestration systems"
                                    },
                                    {
                                        "name": "Graceful Shutdown",
                                        "inputs": [
                                            "TERM signal",
                                            "INT signal"
                                        ],
                                        "input_types": [
                                            "system signal",
                                            "system signal"
                                        ],
                                        "outputs": [
                                            "terminated process"
                                        ],
                                        "output_types": [
                                            "process state"
                                        ],
                                        "summary": "Handles termination signals to shut down the API gracefully",
                                        "todo": "Verify that the API application properly handles termination signals for cleanup operations"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "Multi-stage Dockerfile for building and running a Go API application in a production environment with security and performance optimizations.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "Dockerfile.worker",
                                "functions": [
                                    {
                                        "name": "build",
                                        "inputs": [
                                            "source code",
                                            "VERSION"
                                        ],
                                        "input_types": [
                                            "Go files",
                                            "string"
                                        ],
                                        "outputs": [
                                            "worker binary"
                                        ],
                                        "output_types": [
                                            "executable"
                                        ],
                                        "summary": "Compiles the Go application with optimizations and embedded version info",
                                        "todo": "Consider adding more build flags for further optimizations"
                                    },
                                    {
                                        "name": "test",
                                        "inputs": [
                                            "source code"
                                        ],
                                        "input_types": [
                                            "Go files"
                                        ],
                                        "outputs": [
                                            "test results",
                                            "coverage report"
                                        ],
                                        "output_types": [
                                            "console output",
                                            "coverage.out file"
                                        ],
                                        "summary": "Runs the test suite and generates a coverage report",
                                        "todo": "Implement integration tests and increase test coverage"
                                    },
                                    {
                                        "name": "run",
                                        "inputs": [
                                            "worker binary",
                                            "environment variables"
                                        ],
                                        "input_types": [
                                            "executable",
                                            "key-value pairs"
                                        ],
                                        "outputs": [
                                            "running worker process"
                                        ],
                                        "output_types": [
                                            "background process"
                                        ],
                                        "summary": "Executes the worker binary in the container environment",
                                        "todo": "Implement graceful shutdown handling"
                                    },
                                    {
                                        "name": "healthcheck",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "health status"
                                        ],
                                        "output_types": [
                                            "exit code"
                                        ],
                                        "summary": "Performs a health check on the worker service",
                                        "todo": "Implement more comprehensive health checks"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "Dockerfile for building and running a Go-based worker service in a multi-stage build process. It includes steps for compiling the application, running tests, and setting up a minimal production environment.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "Dockerfile.llm_service",
                                "functions": [
                                    {
                                        "name": "build_image",
                                        "inputs": [
                                            "Dockerfile",
                                            "source_code",
                                            "requirements.txt"
                                        ],
                                        "input_types": [
                                            "file",
                                            "directory",
                                            "file"
                                        ],
                                        "outputs": [
                                            "docker_image"
                                        ],
                                        "output_types": [
                                            "container_image"
                                        ],
                                        "summary": "Builds a Docker image for the LLM service based on the specified Dockerfile and source code.",
                                        "todo": "Ensure that the app.py file implements rate limiting and request validation using the environment variables set in the Dockerfile."
                                    },
                                    {
                                        "name": "run_container",
                                        "inputs": [
                                            "docker_image",
                                            "environment_variables"
                                        ],
                                        "input_types": [
                                            "container_image",
                                            "key_value_pairs"
                                        ],
                                        "outputs": [
                                            "running_container"
                                        ],
                                        "output_types": [
                                            "container_instance"
                                        ],
                                        "summary": "Runs a container based on the built Docker image, setting up the LLM service with the specified environment variables.",
                                        "todo": "Verify that the container runs successfully and the application can handle the specified maximum requests per minute and request timeout."
                                    },
                                    {
                                        "name": "healthcheck",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "health_status"
                                        ],
                                        "output_types": [
                                            "boolean"
                                        ],
                                        "summary": "Performs a health check on the running container by sending a request to the /health endpoint.",
                                        "todo": "Implement the /health endpoint in the application to respond to the healthcheck requests."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This Dockerfile sets up a containerized environment for a Python-based LLM service. It uses a multi-stage build process to create a smaller final image, installs necessary dependencies, sets up a non-root user for security, and configures environment variables for the application. The file also includes a healthcheck and specifies the command to run the application using Uvicorn.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "kubernetes": {
                        "files": [
                            {
                                "name": "api-deployment.yaml",
                                "functions": [
                                    {
                                        "name": "Deployment",
                                        "inputs": [
                                            "replicas",
                                            "container_image",
                                            "environment_variables",
                                            "resource_limits"
                                        ],
                                        "input_types": [
                                            "integer",
                                            "string",
                                            "key-value pairs",
                                            "resource specifications"
                                        ],
                                        "outputs": [
                                            "deployed_pods"
                                        ],
                                        "output_types": [
                                            "kubernetes_pods"
                                        ],
                                        "summary": "Defines the deployment configuration for the DevLM API, including container specifications, environment variables, and pod settings.",
                                        "todo": "Replace <REGISTRY_URL> and <TAG> with actual values for the container image."
                                    },
                                    {
                                        "name": "Service",
                                        "inputs": [
                                            "selector",
                                            "ports"
                                        ],
                                        "input_types": [
                                            "key-value pairs",
                                            "port specifications"
                                        ],
                                        "outputs": [
                                            "load_balancer"
                                        ],
                                        "output_types": [
                                            "aws_nlb"
                                        ],
                                        "summary": "Creates a Kubernetes Service of type LoadBalancer to expose the DevLM API, configured with SSL termination and cross-zone load balancing.",
                                        "todo": "Replace <SSL_CERT_ARN> with the actual ARN of the SSL certificate."
                                    },
                                    {
                                        "name": "HorizontalPodAutoscaler",
                                        "inputs": [
                                            "min_replicas",
                                            "max_replicas",
                                            "target_cpu_utilization",
                                            "target_memory_utilization"
                                        ],
                                        "input_types": [
                                            "integer",
                                            "integer",
                                            "integer",
                                            "integer"
                                        ],
                                        "outputs": [
                                            "scaled_deployment"
                                        ],
                                        "output_types": [
                                            "kubernetes_deployment"
                                        ],
                                        "summary": "Configures automatic scaling for the DevLM API deployment based on CPU and memory utilization.",
                                        "todo": "Review and adjust scaling parameters if necessary based on actual performance and load patterns."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines the Kubernetes resources for deploying and managing the DevLM API. It includes a Deployment, Service, and HorizontalPodAutoscaler for the API, configured with security settings, environment variables, health checks, and auto-scaling policies.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "worker-deployment.yaml",
                                "functions": [
                                    {
                                        "name": "Deployment",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "deployed pods"
                                        ],
                                        "output_types": [
                                            "kubernetes resources"
                                        ],
                                        "summary": "Defines the deployment configuration for the devlm-worker, including container specifications, resource limits, environment variables, and security settings.",
                                        "todo": "Replace <REGISTRY_URL> and <TAG> with actual values for the container image."
                                    },
                                    {
                                        "name": "Service",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "network service"
                                        ],
                                        "output_types": [
                                            "kubernetes resource"
                                        ],
                                        "summary": "Creates a ClusterIP service to expose the devlm-worker deployment within the cluster.",
                                        "todo": "Verify if ClusterIP is the appropriate service type for this deployment."
                                    },
                                    {
                                        "name": "HorizontalPodAutoscaler",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "autoscaling configuration"
                                        ],
                                        "output_types": [
                                            "kubernetes resource"
                                        ],
                                        "summary": "Configures automatic scaling of the devlm-worker deployment based on CPU and memory utilization.",
                                        "todo": "Review and adjust autoscaling metrics and thresholds as needed for production workloads."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "Kubernetes configuration file for deploying and managing the devlm-worker application. It includes a Deployment, Service, and HorizontalPodAutoscaler for the worker component of the DevLM system.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "llm-service-deployment.yaml",
                                "functions": [
                                    {
                                        "name": "Deployment",
                                        "inputs": [
                                            "replicas",
                                            "container_image",
                                            "resources",
                                            "environment_variables"
                                        ],
                                        "input_types": [
                                            "integer",
                                            "string",
                                            "object",
                                            "array"
                                        ],
                                        "outputs": [
                                            "deployed_pods"
                                        ],
                                        "output_types": [
                                            "array"
                                        ],
                                        "summary": "Defines the deployment configuration for the devlm-llm-service, including container specifications, resource limits, environment variables, and probes.",
                                        "todo": "Update the <REGISTRY_URL> and <TAG> placeholders with actual values."
                                    },
                                    {
                                        "name": "Service",
                                        "inputs": [
                                            "selector",
                                            "ports"
                                        ],
                                        "input_types": [
                                            "object",
                                            "array"
                                        ],
                                        "outputs": [
                                            "clusterIP_service"
                                        ],
                                        "output_types": [
                                            "object"
                                        ],
                                        "summary": "Exposes the devlm-llm-service deployment as a ClusterIP service within the Kubernetes cluster."
                                    },
                                    {
                                        "name": "HorizontalPodAutoscaler",
                                        "inputs": [
                                            "min_replicas",
                                            "max_replicas",
                                            "metrics"
                                        ],
                                        "input_types": [
                                            "integer",
                                            "integer",
                                            "array"
                                        ],
                                        "outputs": [
                                            "scaled_deployment"
                                        ],
                                        "output_types": [
                                            "object"
                                        ],
                                        "summary": "Configures automatic scaling of the devlm-llm-service deployment based on CPU and memory utilization."
                                    },
                                    {
                                        "name": "PodDisruptionBudget",
                                        "inputs": [
                                            "min_available",
                                            "selector"
                                        ],
                                        "input_types": [
                                            "integer",
                                            "object"
                                        ],
                                        "outputs": [
                                            "disruption_budget"
                                        ],
                                        "output_types": [
                                            "object"
                                        ],
                                        "summary": "Ensures a minimum number of pods are always available during voluntary disruptions."
                                    },
                                    {
                                        "name": "NetworkPolicy",
                                        "inputs": [
                                            "pod_selector",
                                            "ingress_rules",
                                            "egress_rules"
                                        ],
                                        "input_types": [
                                            "object",
                                            "array",
                                            "array"
                                        ],
                                        "outputs": [
                                            "network_policy"
                                        ],
                                        "output_types": [
                                            "object"
                                        ],
                                        "summary": "Defines network access rules for the devlm-llm-service pods, restricting incoming and outgoing traffic.",
                                        "todo": "Review and adjust the network policy rules if necessary to ensure proper communication with other services and external resources."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines a Kubernetes deployment configuration for the devlm-llm-service, including a Deployment, Service, HorizontalPodAutoscaler, PodDisruptionBudget, and NetworkPolicy. It sets up a scalable and secure environment for running the LLM service with proper resource allocation, monitoring, and network restrictions.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "ingress.yaml",
                                "functions": [
                                    {
                                        "name": "devlm-ingress",
                                        "inputs": [
                                            "host",
                                            "paths",
                                            "tls"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ingress_resource"
                                        ],
                                        "output_types": [
                                            "Ingress"
                                        ],
                                        "summary": "Defines the main ingress for the application, routing traffic to different services based on path prefixes.",
                                        "todo": "Replace <YOUR_DOMAIN> and <YOUR_STATIC_IP_NAME> with actual values."
                                    },
                                    {
                                        "name": "nginx-ingress-class",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "ingress_class"
                                        ],
                                        "output_types": [
                                            "IngressClass"
                                        ],
                                        "summary": "Defines the default Nginx ingress class for the cluster.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "devlm-rate-limit",
                                        "inputs": [
                                            "host",
                                            "paths"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ingress_resource"
                                        ],
                                        "output_types": [
                                            "Ingress"
                                        ],
                                        "summary": "Sets up rate limiting for the API service.",
                                        "todo": "Review and adjust rate limiting values as needed."
                                    },
                                    {
                                        "name": "devlm-internal-ingress",
                                        "inputs": [
                                            "paths"
                                        ],
                                        "input_types": [
                                            "array"
                                        ],
                                        "outputs": [
                                            "ingress_resource"
                                        ],
                                        "output_types": [
                                            "Ingress"
                                        ],
                                        "summary": "Defines an internal ingress for accessing internal API services.",
                                        "todo": "Review and adjust whitelist source ranges if necessary."
                                    },
                                    {
                                        "name": "devlm-metrics-ingress",
                                        "inputs": [
                                            "host",
                                            "paths",
                                            "tls"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ingress_resource"
                                        ],
                                        "output_types": [
                                            "Ingress"
                                        ],
                                        "summary": "Sets up a protected ingress for accessing metrics endpoints.",
                                        "todo": "Create metrics-auth secret and metrics-tls-secret."
                                    },
                                    {
                                        "name": "devlm-webhook-ingress",
                                        "inputs": [
                                            "host",
                                            "paths",
                                            "tls"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ingress_resource"
                                        ],
                                        "output_types": [
                                            "Ingress"
                                        ],
                                        "summary": "Defines an ingress for webhook endpoints with SSL encryption.",
                                        "todo": "Create webhook-tls-secret."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines multiple Ingress resources for a Kubernetes cluster, including the main ingress, rate limiting, internal API access, metrics endpoint, and webhook endpoint. It also sets up various security measures, SSL redirects, and CORS configurations.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "secrets.yaml",
                                "functions": [
                                    {
                                        "name": "Secret",
                                        "inputs": [
                                            "metadata",
                                            "type",
                                            "stringData"
                                        ],
                                        "input_types": [
                                            "object",
                                            "string",
                                            "object"
                                        ],
                                        "outputs": [
                                            "Secret"
                                        ],
                                        "output_types": [
                                            "Kubernetes Secret"
                                        ],
                                        "summary": "Defines a Kubernetes Secret resource containing various configuration parameters and sensitive information for the DevLM application.",
                                        "todo": "Replace placeholder values with actual secret data"
                                    },
                                    {
                                        "name": "CronJob",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "CronJob"
                                        ],
                                        "output_types": [
                                            "Kubernetes CronJob"
                                        ],
                                        "summary": "Defines a Kubernetes CronJob for automated secret rotation every 30 days.",
                                        "todo": "Ensure the secret rotation script is properly implemented and tested"
                                    },
                                    {
                                        "name": "CustomResourceDefinition",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "CustomResourceDefinition"
                                        ],
                                        "output_types": [
                                            "Kubernetes CustomResourceDefinition"
                                        ],
                                        "summary": "Defines a CustomResourceDefinition for SealedSecrets, allowing encrypted secrets to be stored safely in version control.",
                                        "todo": "Verify compatibility with the current cluster version"
                                    },
                                    {
                                        "name": "Deployment",
                                        "inputs": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object"
                                        ],
                                        "outputs": [
                                            "Deployment"
                                        ],
                                        "output_types": [
                                            "Kubernetes Deployment"
                                        ],
                                        "summary": "Defines a Deployment for the SealedSecrets controller in the kube-system namespace.",
                                        "todo": "Consider implementing high availability by increasing the number of replicas"
                                    },
                                    {
                                        "name": "ClusterRoleBinding",
                                        "inputs": [
                                            "metadata",
                                            "roleRef",
                                            "subjects"
                                        ],
                                        "input_types": [
                                            "object",
                                            "object",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ClusterRoleBinding"
                                        ],
                                        "output_types": [
                                            "Kubernetes ClusterRoleBinding"
                                        ],
                                        "summary": "Defines a ClusterRoleBinding to grant the SealedSecrets controller the necessary permissions.",
                                        "todo": "Review and potentially limit the scope of permissions for enhanced security"
                                    },
                                    {
                                        "name": "ClusterRole",
                                        "inputs": [
                                            "metadata",
                                            "rules"
                                        ],
                                        "input_types": [
                                            "object",
                                            "array"
                                        ],
                                        "outputs": [
                                            "ClusterRole"
                                        ],
                                        "output_types": [
                                            "Kubernetes ClusterRole"
                                        ],
                                        "summary": "Defines a ClusterRole specifying the permissions required by the SealedSecrets controller.",
                                        "todo": "Regularly audit and update permissions as needed"
                                    },
                                    {
                                        "name": "ServiceAccount",
                                        "inputs": [
                                            "metadata"
                                        ],
                                        "input_types": [
                                            "object"
                                        ],
                                        "outputs": [
                                            "ServiceAccount"
                                        ],
                                        "output_types": [
                                            "Kubernetes ServiceAccount"
                                        ],
                                        "summary": "Defines a ServiceAccount for the SealedSecrets controller in the kube-system namespace.",
                                        "todo": "Implement role-based access control (RBAC) best practices"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains Kubernetes configurations for managing secrets, including a Secret resource, a CronJob for secret rotation, a CustomResourceDefinition for SealedSecrets, and Deployments and RBAC configurations for the SealedSecrets controller.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "terraform": {
                        "files": [
                            {
                                "name": "main.tf",
                                "functions": [
                                    {
                                        "name": "aws_vpc",
                                        "inputs": [
                                            "cidr_block",
                                            "enable_dns_hostnames",
                                            "enable_dns_support",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "bool",
                                            "bool",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "vpc_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates a VPC for the project",
                                        "todo": "Consider adding more advanced networking features like VPC flow logs"
                                    },
                                    {
                                        "name": "aws_subnet",
                                        "inputs": [
                                            "count",
                                            "vpc_id",
                                            "cidr_block",
                                            "availability_zone",
                                            "map_public_ip_on_launch",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "number",
                                            "string",
                                            "string",
                                            "string",
                                            "bool",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "subnet_ids"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Creates public and private subnets",
                                        "todo": "Consider implementing subnet tiers (e.g., database tier) for more complex architectures"
                                    },
                                    {
                                        "name": "aws_internet_gateway",
                                        "inputs": [
                                            "vpc_id",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "internet_gateway_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an Internet Gateway for the VPC",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "aws_nat_gateway",
                                        "inputs": [
                                            "count",
                                            "allocation_id",
                                            "subnet_id",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "number",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "nat_gateway_ids"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Creates NAT Gateways for private subnets",
                                        "todo": "Consider implementing a NAT instance for non-production environments to reduce costs"
                                    },
                                    {
                                        "name": "aws_security_group",
                                        "inputs": [
                                            "name",
                                            "description",
                                            "vpc_id",
                                            "ingress",
                                            "egress",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "list(object)",
                                            "list(object)",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "security_group_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates security groups for EC2, RDS, Redis, ECS, and ALB",
                                        "todo": "Review and tighten security group rules regularly"
                                    },
                                    {
                                        "name": "aws_instance",
                                        "inputs": [
                                            "count",
                                            "ami",
                                            "instance_type",
                                            "key_name",
                                            "vpc_security_group_ids",
                                            "subnet_id",
                                            "iam_instance_profile",
                                            "user_data",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "number",
                                            "string",
                                            "string",
                                            "string",
                                            "list(string)",
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "instance_ids"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Creates EC2 instances for Golang backend service",
                                        "todo": "Implement auto-scaling group for better scalability"
                                    },
                                    {
                                        "name": "aws_db_instance",
                                        "inputs": [
                                            "identifier",
                                            "engine",
                                            "engine_version",
                                            "instance_class",
                                            "allocated_storage",
                                            "db_name",
                                            "username",
                                            "password",
                                            "vpc_security_group_ids",
                                            "db_subnet_group_name",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "number",
                                            "string",
                                            "string",
                                            "string",
                                            "list(string)",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "db_instance_endpoint"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an RDS instance for PostgreSQL database",
                                        "todo": "Consider implementing read replicas for improved performance"
                                    },
                                    {
                                        "name": "aws_elasticache_cluster",
                                        "inputs": [
                                            "cluster_id",
                                            "engine",
                                            "node_type",
                                            "num_cache_nodes",
                                            "parameter_group_name",
                                            "port",
                                            "subnet_group_name",
                                            "security_group_ids",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "number",
                                            "string",
                                            "number",
                                            "string",
                                            "list(string)",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "cache_nodes"
                                        ],
                                        "output_types": [
                                            "list(object)"
                                        ],
                                        "summary": "Creates an ElastiCache cluster for Redis",
                                        "todo": "Evaluate the need for a multi-AZ setup for high availability"
                                    },
                                    {
                                        "name": "aws_ecs_cluster",
                                        "inputs": [
                                            "name",
                                            "setting",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "list(object)",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "cluster_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an ECS cluster",
                                        "todo": "Consider implementing capacity providers for better resource management"
                                    },
                                    {
                                        "name": "aws_ecs_task_definition",
                                        "inputs": [
                                            "family",
                                            "network_mode",
                                            "requires_compatibilities",
                                            "cpu",
                                            "memory",
                                            "execution_role_arn",
                                            "task_role_arn",
                                            "container_definitions",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "list(string)",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "task_definition_arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an ECS task definition for Python LLM service",
                                        "todo": "Regularly review and update the task definition for security and performance improvements"
                                    },
                                    {
                                        "name": "aws_ecs_service",
                                        "inputs": [
                                            "name",
                                            "cluster",
                                            "task_definition",
                                            "launch_type",
                                            "desired_count",
                                            "network_configuration",
                                            "load_balancer",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "number",
                                            "object",
                                            "object",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "service_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an ECS service for Python LLM",
                                        "todo": "Implement service discovery for better inter-service communication"
                                    },
                                    {
                                        "name": "aws_lb",
                                        "inputs": [
                                            "name",
                                            "internal",
                                            "load_balancer_type",
                                            "security_groups",
                                            "subnets",
                                            "enable_deletion_protection",
                                            "access_logs",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "bool",
                                            "string",
                                            "list(string)",
                                            "list(string)",
                                            "bool",
                                            "object",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "load_balancer_dns_name"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an Application Load Balancer for load balancing",
                                        "todo": "Consider implementing AWS WAF for additional security"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This Terraform configuration file sets up an AWS infrastructure for a DevLM project, including VPC, subnets, EC2 instances, RDS PostgreSQL database, ElastiCache Redis, and ECS cluster for a Python LLM service.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "variables.tf",
                                "functions": [
                                    {
                                        "name": "aws_region",
                                        "inputs": [
                                            "aws_region"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the AWS region for resource deployment with validation for correct format.",
                                        "todo": "Consider adding a list of allowed regions for stricter validation."
                                    },
                                    {
                                        "name": "project_name",
                                        "inputs": [
                                            "project_name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the project name with validation for lowercase letters, numbers, and hyphens only.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "environment",
                                        "inputs": [
                                            "environment"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the deployment environment (dev, staging, prod) with validation.",
                                        "todo": "Consider adding more environment options if needed."
                                    },
                                    {
                                        "name": "vpc_cidr",
                                        "inputs": [
                                            "vpc_cidr"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the CIDR block for the VPC with validation for valid IPv4 CIDR format.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "public_subnet_cidrs",
                                        "inputs": [
                                            "public_subnet_cidrs"
                                        ],
                                        "input_types": [
                                            "list(string)"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies CIDR blocks for public subnets with validation for non-empty list.",
                                        "todo": "Consider adding validation for valid CIDR formats within the list."
                                    },
                                    {
                                        "name": "private_subnet_cidrs",
                                        "inputs": [
                                            "private_subnet_cidrs"
                                        ],
                                        "input_types": [
                                            "list(string)"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies CIDR blocks for private subnets with validation for non-empty list.",
                                        "todo": "Consider adding validation for valid CIDR formats within the list."
                                    },
                                    {
                                        "name": "tags",
                                        "inputs": [
                                            "tags"
                                        ],
                                        "input_types": [
                                            "map(string)"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines a map of tags to be added to all resources.",
                                        "todo": "Consider adding validation for required tags or tag formats."
                                    },
                                    {
                                        "name": "ec2_instance_type",
                                        "inputs": [
                                            "ec2_instance_type"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the EC2 instance type for the Golang backend service with validation for valid instance types.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "rds_instance_class",
                                        "inputs": [
                                            "rds_instance_class"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the RDS instance class for PostgreSQL database.",
                                        "todo": "Consider adding validation for allowed RDS instance classes."
                                    },
                                    {
                                        "name": "elasticache_node_type",
                                        "inputs": [
                                            "elasticache_node_type"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the ElastiCache node type for Redis.",
                                        "todo": "Consider adding validation for allowed ElastiCache node types."
                                    },
                                    {
                                        "name": "ecs_task_cpu",
                                        "inputs": [
                                            "ecs_task_cpu"
                                        ],
                                        "input_types": [
                                            "number"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the CPU units for ECS task definition with validation for positive values.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "alb_name",
                                        "inputs": [
                                            "alb_name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the name for the Application Load Balancer.",
                                        "todo": "Consider adding validation for ALB name format."
                                    },
                                    {
                                        "name": "route53_domain_name",
                                        "inputs": [
                                            "route53_domain_name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the domain name for Route53 hosted zone with validation for valid domain format.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "s3_bucket_name",
                                        "inputs": [
                                            "s3_bucket_name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the name of the S3 bucket for storing project files with validation for valid bucket name format.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "cloudwatch_log_retention",
                                        "inputs": [
                                            "cloudwatch_log_retention"
                                        ],
                                        "input_types": [
                                            "number"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the number of days to retain CloudWatch logs with validation for allowed retention periods.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "waf_web_acl_name",
                                        "inputs": [
                                            "waf_web_acl_name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the name of the WAF Web ACL.",
                                        "todo": "Consider adding validation for WAF Web ACL name format."
                                    },
                                    {
                                        "name": "cloudfront_enabled",
                                        "inputs": [
                                            "cloudfront_enabled"
                                        ],
                                        "input_types": [
                                            "bool"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Enables or disables CloudFront distribution.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "kms_key_alias",
                                        "inputs": [
                                            "kms_key_alias"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the alias for the KMS key used for encryption.",
                                        "todo": "Consider adding validation for KMS key alias format."
                                    },
                                    {
                                        "name": "rds_username",
                                        "inputs": [
                                            "rds_username"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the username for the RDS PostgreSQL instance (sensitive value).",
                                        "todo": "Consider adding validation for username format and complexity."
                                    },
                                    {
                                        "name": "rds_password",
                                        "inputs": [
                                            "rds_password"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Specifies the password for the RDS PostgreSQL instance (sensitive value).",
                                        "todo": "Consider adding validation for password complexity and length."
                                    },
                                    {
                                        "name": "cloudfront_price_class",
                                        "inputs": [
                                            "cloudfront_price_class"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the CloudFront distribution price class with validation for allowed values.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "waf_ip_rate_limit",
                                        "inputs": [
                                            "waf_ip_rate_limit"
                                        ],
                                        "input_types": [
                                            "number"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets the maximum number of requests allowed from an IP in 5 minutes for WAF with validation for positive values.",
                                        "todo": "None"
                                    },
                                    {
                                        "name": "vpc_enable_ipv6",
                                        "inputs": [
                                            "vpc_enable_ipv6"
                                        ],
                                        "input_types": [
                                            "bool"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Enables or disables IPv6 in VPC.",
                                        "todo": "Consider adding related IPv6 CIDR block variables if enabled."
                                    },
                                    {
                                        "name": "rds_performance_insights_retention_period",
                                        "inputs": [
                                            "rds_performance_insights_retention_period"
                                        ],
                                        "input_types": [
                                            "number"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Defines the retention period for RDS Performance Insights in days with validation for allowed values (7 or 731).",
                                        "todo": "None"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines Terraform variables for the DevLM project, including configurations for AWS resources such as VPC, EC2, RDS, ElastiCache, ECS, ALB, Route53, S3, CloudWatch, IAM, WAF, CloudFront, and KMS. It provides default values and validation rules for various infrastructure components.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "outputs.tf",
                                "functions": [
                                    {
                                        "name": "vpc_id",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_vpc.main.id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the ID of the main VPC",
                                        "todo": ""
                                    },
                                    {
                                        "name": "public_subnet_ids",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_subnet.public_subnets[*].id"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Outputs a list of IDs for public subnets",
                                        "todo": ""
                                    },
                                    {
                                        "name": "private_subnet_ids",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_subnet.private_subnets[*].id"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Outputs a list of IDs for private subnets",
                                        "todo": ""
                                    },
                                    {
                                        "name": "internet_gateway_id",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_internet_gateway.main.id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the ID of the Internet Gateway",
                                        "todo": ""
                                    },
                                    {
                                        "name": "public_route_table_id",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_route_table.public.id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the ID of the public route table",
                                        "todo": ""
                                    },
                                    {
                                        "name": "ec2_instance_ids",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_instance.golang_backend[*].id"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Outputs a list of IDs for EC2 instances running the Golang backend",
                                        "todo": ""
                                    },
                                    {
                                        "name": "rds_endpoint",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_db_instance.postgresql.endpoint"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the endpoint of the RDS PostgreSQL instance",
                                        "todo": ""
                                    },
                                    {
                                        "name": "elasticache_cluster_address",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_elasticache_cluster.redis.cache_nodes[0].address"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the address of the ElastiCache Redis cluster",
                                        "todo": ""
                                    },
                                    {
                                        "name": "ecs_cluster_arn",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_ecs_cluster.main.arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the ARN of the ECS cluster",
                                        "todo": ""
                                    },
                                    {
                                        "name": "alb_dns_name",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_lb.main.dns_name"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the DNS name of the Application Load Balancer",
                                        "todo": ""
                                    },
                                    {
                                        "name": "route53_name_servers",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_route53_zone.main.name_servers"
                                        ],
                                        "output_types": [
                                            "list(string)"
                                        ],
                                        "summary": "Outputs the list of name servers for the Route53 hosted zone",
                                        "todo": ""
                                    },
                                    {
                                        "name": "s3_bucket_name",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_s3_bucket.project_files.id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the name of the S3 bucket for project files",
                                        "todo": ""
                                    },
                                    {
                                        "name": "iam_role_arn",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "aws_iam_role.ec2_role.arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Outputs the ARN of the IAM role for EC2 instances",
                                        "todo": ""
                                    }
                                ],
                                "status": "done",
                                "summary": "This file defines the output values for various AWS resources created in the Terraform configuration. It provides essential information about the infrastructure components, such as VPC ID, subnet IDs, and endpoint addresses.",
                                "last_updated_iteration": 1
                            },
                            {
                                "name": "modules.tf",
                                "functions": [
                                    {
                                        "name": "vpc",
                                        "inputs": [
                                            "project_name",
                                            "vpc_cidr",
                                            "availability_zones",
                                            "private_subnet_cidrs",
                                            "public_subnet_cidrs",
                                            "vpc_enable_nat_gateway",
                                            "vpc_enable_dns_hostnames",
                                            "vpc_flow_logs_retention",
                                            "vpc_enable_ipv6",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "list(string)",
                                            "list(string)",
                                            "list(string)",
                                            "bool",
                                            "bool",
                                            "number",
                                            "bool",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "vpc_id",
                                            "private_subnets",
                                            "public_subnets"
                                        ],
                                        "output_types": [
                                            "string",
                                            "list(string)",
                                            "list(string)"
                                        ],
                                        "summary": "Creates a VPC with specified CIDR, subnets, and various networking features",
                                        "todo": "Consider adding more customizable options for VPC endpoints"
                                    },
                                    {
                                        "name": "security_groups",
                                        "inputs": [
                                            "project_name",
                                            "vpc_id",
                                            "ssh_allowed_cidr",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "security_group_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates security groups for the project with predefined ingress and egress rules",
                                        "todo": "Add option for custom security group rules"
                                    },
                                    {
                                        "name": "ec2_instance",
                                        "inputs": [
                                            "project_name",
                                            "ec2_ami",
                                            "ec2_instance_type",
                                            "ec2_key_name",
                                            "security_group_id",
                                            "subnet_id",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "instance_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Launches an EC2 instance with specified AMI, instance type, and security group",
                                        "todo": "Implement auto-scaling group for EC2 instances"
                                    },
                                    {
                                        "name": "db",
                                        "inputs": [
                                            "project_name",
                                            "rds_engine_version",
                                            "rds_instance_class",
                                            "rds_allocated_storage",
                                            "rds_db_name",
                                            "rds_username",
                                            "db_port",
                                            "security_group_id",
                                            "private_subnets",
                                            "rds_backup_retention_period",
                                            "rds_performance_insights_retention_period",
                                            "rds_multi_az",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "number",
                                            "string",
                                            "string",
                                            "number",
                                            "string",
                                            "list(string)",
                                            "number",
                                            "number",
                                            "bool",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "db_instance_address"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an RDS PostgreSQL instance with specified configuration",
                                        "todo": "Add option for read replicas"
                                    },
                                    {
                                        "name": "elasticache",
                                        "inputs": [
                                            "project_name",
                                            "elasticache_node_type",
                                            "elasticache_num_cache_nodes",
                                            "elasticache_parameter_group_name",
                                            "private_subnets",
                                            "security_group_id",
                                            "redis_auth_token",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "number",
                                            "string",
                                            "list(string)",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "redis_cache_nodes"
                                        ],
                                        "output_types": [
                                            "list(object)"
                                        ],
                                        "summary": "Sets up an ElastiCache Redis cluster with specified configuration",
                                        "todo": "Implement backup and restore functionality"
                                    },
                                    {
                                        "name": "ecs",
                                        "inputs": [
                                            "project_name",
                                            "ecs_task_cpu",
                                            "ecs_task_memory",
                                            "ecr_repository_url",
                                            "ecs_container_port",
                                            "aws_region",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "number",
                                            "number",
                                            "string",
                                            "number",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "cluster_arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an ECS cluster with Fargate launch type and defines a service for running containers",
                                        "todo": "Implement auto-scaling for ECS tasks"
                                    },
                                    {
                                        "name": "alb",
                                        "inputs": [
                                            "project_name",
                                            "vpc_id",
                                            "public_subnets",
                                            "security_group_id",
                                            "alb_certificate_arn",
                                            "route53_domain_name",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "list(string)",
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "lb_dns_name",
                                            "lb_zone_id"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string"
                                        ],
                                        "summary": "Sets up an Application Load Balancer with HTTP and HTTPS listeners",
                                        "todo": "Add support for custom routing rules"
                                    },
                                    {
                                        "name": "s3_bucket",
                                        "inputs": [
                                            "s3_bucket_name",
                                            "s3_versioning",
                                            "route53_domain_name",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "bool",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "s3_bucket_arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates an S3 bucket with versioning, encryption, lifecycle rules, and CORS configuration",
                                        "todo": "Implement cross-region replication"
                                    },
                                    {
                                        "name": "route53",
                                        "inputs": [
                                            "route53_domain_name",
                                            "alb_dns_name",
                                            "alb_zone_id",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "zone_id"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Sets up Route53 DNS records for the domain, pointing to the ALB",
                                        "todo": "Add support for multiple subdomains"
                                    },
                                    {
                                        "name": "iam_role",
                                        "inputs": [
                                            "iam_role_name",
                                            "project_name",
                                            "tags"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "map(string)"
                                        ],
                                        "outputs": [
                                            "role_arn"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Creates IAM roles and policies for EC2, ECS, S3, RDS, and CloudWatch access",
                                        "todo": "Implement least privilege principle more strictly"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This Terraform file defines various modules for creating a comprehensive AWS infrastructure including VPC, Security Groups, EC2 instances, RDS, ElastiCache, ECS, ALB, S3 bucket, Route53, and IAM roles.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "scripts": {
                "files": [
                    {
                        "name": "setup.sh",
                        "functions": [
                            {
                                "name": "command_exists",
                                "inputs": [
                                    "command"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exists"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a command exists in the system",
                                "todo": "Consider adding error handling for edge cases"
                            },
                            {
                                "name": "install_docker",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs Docker based on the operating system",
                                "todo": "Add support for more Linux distributions"
                            },
                            {
                                "name": "install_golang",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs Golang and sets up environment variables",
                                "todo": "Add option to specify custom Golang version"
                            },
                            {
                                "name": "install_python",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs Python and sets up virtual environment",
                                "todo": "Add support for custom Python versions"
                            },
                            {
                                "name": "install_redis",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs and starts Redis server",
                                "todo": "Add configuration options for Redis"
                            },
                            {
                                "name": "install_postgresql",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs PostgreSQL, creates a database and user",
                                "todo": "Add option to skip database creation if it already exists"
                            },
                            {
                                "name": "log_error",
                                "inputs": [
                                    "message"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Logs an error message to stderr",
                                "todo": "Implement more robust logging system"
                            },
                            {
                                "name": "setup_project_structure",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Creates the project directory structure",
                                "todo": "Add option to specify custom project structure"
                            },
                            {
                                "name": "install_project_dependencies",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs project-specific dependencies for Go and Python",
                                "todo": "Add version pinning for dependencies"
                            },
                            {
                                "name": "update_system_packages",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Updates system packages based on the operating system",
                                "todo": "Add support for more package managers"
                            },
                            {
                                "name": "configure_environment",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Creates a .env file with default environment variables",
                                "todo": "Add option to load existing .env file"
                            },
                            {
                                "name": "check_dependencies",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Checks if all required dependencies are installed",
                                "todo": "Add version checks for dependencies"
                            },
                            {
                                "name": "main",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Main function that orchestrates the setup process",
                                "todo": "Add error recovery and retry mechanisms"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A bash script that sets up the development environment for the DevLM project, including installing dependencies, configuring the database, and setting up the project structure.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "run_tests.sh",
                        "functions": [
                            {
                                "name": "run_go_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs Go tests with coverage, race detection, and timeout settings.",
                                "todo": "Consider adding options for custom test parameters."
                            },
                            {
                                "name": "run_python_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs Python tests using pytest with coverage and timeout settings.",
                                "todo": "Consider adding options for custom test parameters."
                            },
                            {
                                "name": "run_integration_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs integration tests using Docker Compose and returns the exit code.",
                                "todo": "Add error handling for Docker Compose failures."
                            },
                            {
                                "name": "run_performance_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs performance tests using Locust and generates CSV results.",
                                "todo": "Add options for customizing Locust parameters."
                            },
                            {
                                "name": "command_exists",
                                "inputs": [
                                    "command"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exists"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a given command exists in the system.",
                                "todo": "Consider adding a timeout for command checking."
                            },
                            {
                                "name": "install_dependencies",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Installs necessary dependencies for running tests, including Go, Python, and Docker Compose.",
                                "todo": "Add version checks for installed dependencies."
                            },
                            {
                                "name": "run_all_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs all test suites and reports failed tests.",
                                "todo": "Implement parallel execution option for faster results."
                            },
                            {
                                "name": "generate_test_report",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Generates a comprehensive test report including coverage and performance results.",
                                "todo": "Add option to export report in different formats (e.g., HTML, PDF)."
                            },
                            {
                                "name": "run_specific_test",
                                "inputs": [
                                    "test_type"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs a specific test suite based on the provided test type.",
                                "todo": "Add support for running multiple specific test suites."
                            },
                            {
                                "name": "cleanup_test_artifacts",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Removes test artifacts and temporary files.",
                                "todo": "Add option to preserve specific artifacts."
                            },
                            {
                                "name": "run_parallel_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs all test suites in parallel for faster execution.",
                                "todo": "Implement resource management to prevent overloading the system."
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A comprehensive Bash script for running various types of tests (Go, Python, integration, and performance) and generating test reports. It also includes functions for installing dependencies, cleaning up artifacts, and running tests in parallel.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "build.sh",
                        "functions": [
                            {
                                "name": "build_go_services",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Builds Go services by compiling main.go files for each service.",
                                "todo": "Consider adding error handling for individual service builds."
                            },
                            {
                                "name": "build_python_services",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Sets up a Python virtual environment, installs dependencies, and compiles Python services.",
                                "todo": "Add error handling for pip install and compilation steps."
                            },
                            {
                                "name": "build_docker_images",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "success_status"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Builds Docker images for all services using their respective Dockerfiles.",
                                "todo": "Implement parallel Docker builds to improve performance."
                            },
                            {
                                "name": "check_dependencies",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Checks if required tools are installed and verifies their versions.",
                                "todo": "Consider using a configuration file for version requirements."
                            },
                            {
                                "name": "cleanup",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Removes build artifacts, virtual environments, and temporary files.",
                                "todo": "Add confirmation prompt before deletion for safety."
                            },
                            {
                                "name": "log_error",
                                "inputs": [
                                    "message"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Logs error messages with timestamp.",
                                "todo": "Implement log file writing for persistent error tracking."
                            },
                            {
                                "name": "log_info",
                                "inputs": [
                                    "message"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Logs info messages with timestamp.",
                                "todo": "Implement log file writing for persistent info tracking."
                            },
                            {
                                "name": "run_tests",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "success_status"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Runs Go and Python tests, generating coverage reports.",
                                "todo": "Add option to run specific test suites."
                            },
                            {
                                "name": "generate_build_report",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Generates a comprehensive build report including versions, test coverage, and service details.",
                                "todo": "Add option to export report in different formats (e.g., JSON, HTML)."
                            },
                            {
                                "name": "run_parallel_build",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs Go and Python service builds in parallel.",
                                "todo": "Implement better error handling for parallel execution."
                            },
                            {
                                "name": "main",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Main build function that orchestrates the entire build process.",
                                "todo": "Implement build caching to speed up subsequent builds."
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A comprehensive build script for a multi-service application, handling Go and Python services, Docker image building, testing, and reporting.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "lint.sh",
                        "functions": [
                            {
                                "name": "command_exists",
                                "inputs": [
                                    "command"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exists"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a given command exists in the system PATH.",
                                "todo": "Consider adding error handling for edge cases."
                            },
                            {
                                "name": "lint_go_code",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Lints Go code using golangci-lint, installing it if necessary.",
                                "todo": "Add support for custom golangci-lint configurations."
                            },
                            {
                                "name": "lint_python_code",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Lints Python code using pylint, flake8, black, and mypy, installing them if necessary.",
                                "todo": "Implement parsing of tool-specific configuration files."
                            },
                            {
                                "name": "lint_shell_scripts",
                                "inputs": [
                                    "scripts"
                                ],
                                "input_types": [
                                    "array of strings"
                                ],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Lints shell scripts using shellcheck, installing it if necessary.",
                                "todo": "Add support for custom shellcheck configurations."
                            },
                            {
                                "name": "lint_dockerfile",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Lints Dockerfiles using hadolint, using Docker if hadolint is not installed.",
                                "todo": "Implement caching for Docker image to improve performance."
                            },
                            {
                                "name": "run_all_linters",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs all linters sequentially.",
                                "todo": "Consider adding hooks for pre and post-linting actions."
                            },
                            {
                                "name": "run_parallel_linters",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Runs all linters in parallel.",
                                "todo": "Implement better error handling and reporting for parallel execution."
                            },
                            {
                                "name": "load_custom_config",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Loads custom configurations from various file formats.",
                                "todo": "Add support for more configuration file formats and improve error handling."
                            },
                            {
                                "name": "main",
                                "inputs": [
                                    "arguments"
                                ],
                                "input_types": [
                                    "array of strings"
                                ],
                                "outputs": [
                                    "exit_code"
                                ],
                                "output_types": [
                                    "integer"
                                ],
                                "summary": "Main function that processes command-line arguments and runs the appropriate linters.",
                                "todo": "Implement a plugin system for adding new linters easily."
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A comprehensive linting script for Go, Python, Shell scripts, and Dockerfiles with customizable configurations and parallel execution options.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "deploy.sh",
                        "functions": [
                            {
                                "name": "command_exists",
                                "inputs": [
                                    "command"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exists"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a command exists in the system",
                                "todo": "Consider adding error handling for edge cases"
                            },
                            {
                                "name": "deploy_api_gateway",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys the API Gateway service using Docker",
                                "todo": "Implement rollback mechanism in case of deployment failure"
                            },
                            {
                                "name": "deploy_llm_service",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys the LLM Service using Docker",
                                "todo": "Add support for multiple LLM models"
                            },
                            {
                                "name": "deploy_action_executor",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys the Action Executor service using Docker",
                                "todo": "Implement dynamic resource allocation based on system load"
                            },
                            {
                                "name": "deploy_code_execution_engine",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys the Code Execution Engine service using Docker",
                                "todo": "Add support for additional programming languages"
                            },
                            {
                                "name": "deploy_redis",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys Redis using Docker",
                                "todo": "Implement Redis clustering for high availability"
                            },
                            {
                                "name": "deploy_postgresql",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys PostgreSQL using Docker",
                                "todo": "Add support for PostgreSQL replication"
                            },
                            {
                                "name": "check_deployment_status",
                                "inputs": [
                                    "container_name",
                                    "max_retries",
                                    "retry_interval"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "integer"
                                ],
                                "outputs": [
                                    "status"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks the deployment status of a Docker container",
                                "todo": "Implement more detailed health checks"
                            },
                            {
                                "name": "check_health",
                                "inputs": [
                                    "service_name",
                                    "health_endpoint",
                                    "timeout"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "integer"
                                ],
                                "outputs": [
                                    "health_status"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks the health of a service using its health endpoint",
                                "todo": "Add support for custom health check logic"
                            },
                            {
                                "name": "create_docker_network",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Creates a Docker network for the application",
                                "todo": "Implement network segmentation for improved security"
                            },
                            {
                                "name": "cleanup_existing_containers",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Stops and removes existing containers",
                                "todo": "Add option to preserve data volumes during cleanup"
                            },
                            {
                                "name": "pull_latest_images",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Pulls the latest Docker images for all services",
                                "todo": "Implement image caching to reduce deployment time"
                            },
                            {
                                "name": "check_system_requirements",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Checks if the system meets the minimum requirements for deployment",
                                "todo": "Add checks for network connectivity and firewall settings"
                            },
                            {
                                "name": "configure_environment",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Configures environment variables for the deployment",
                                "todo": "Implement secure storage for sensitive environment variables"
                            },
                            {
                                "name": "perform_rolling_update",
                                "inputs": [
                                    "service",
                                    "new_image"
                                ],
                                "input_types": [
                                    "string",
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Performs a rolling update for a service",
                                "todo": "Implement automatic rollback on update failure"
                            },
                            {
                                "name": "backup_data",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Backs up Redis and PostgreSQL data before deployment",
                                "todo": "Implement incremental backups to reduce backup time"
                            },
                            {
                                "name": "restore_data",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Restores data from backups if available",
                                "todo": "Add option to specify which backup to restore from"
                            },
                            {
                                "name": "main",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Main function that orchestrates the entire deployment process",
                                "todo": "Implement parallel deployment of services to reduce overall deployment time"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A comprehensive deployment script for a microservices-based application using Docker. It handles the deployment of various services including API Gateway, LLM Service, Action Executor, Code Execution Engine, Redis, and PostgreSQL.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "monitoring.sh",
                        "functions": [
                            {
                                "name": "command_exists",
                                "inputs": [
                                    "command"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "exists"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a command exists in the system",
                                "todo": "Consider adding error handling for edge cases"
                            },
                            {
                                "name": "monitor_cpu",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "cpu_usage"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors CPU usage using various system commands",
                                "todo": "Add support for more operating systems"
                            },
                            {
                                "name": "monitor_memory",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "memory_usage"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors memory usage using various system commands",
                                "todo": "Improve accuracy for different memory types"
                            },
                            {
                                "name": "monitor_disk",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "disk_usage"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors disk usage of the root partition",
                                "todo": "Add option to monitor specific partitions"
                            },
                            {
                                "name": "monitor_docker",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "docker_stats"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors Docker container statistics",
                                "todo": "Add option to filter specific containers"
                            },
                            {
                                "name": "monitor_postgresql",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "postgresql_stats"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors PostgreSQL database statistics",
                                "todo": "Add more detailed query statistics"
                            },
                            {
                                "name": "monitor_redis",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "redis_stats"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors Redis server statistics",
                                "todo": "Add option to monitor specific Redis databases"
                            },
                            {
                                "name": "monitor_network",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "network_usage"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors network usage of the specified interface",
                                "todo": "Add support for monitoring multiple interfaces"
                            },
                            {
                                "name": "monitor_load",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "system_load"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors system load average",
                                "todo": "Add interpretation of load values based on CPU cores"
                            },
                            {
                                "name": "monitor_api_gateway",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "status"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors the health of the API Gateway service",
                                "todo": "Add more detailed health checks"
                            },
                            {
                                "name": "monitor_llm_service",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "status"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors the health of the LLM service",
                                "todo": "Add more detailed health checks"
                            },
                            {
                                "name": "monitor_action_executor",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "status"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors the health of the Action Executor service",
                                "todo": "Add more detailed health checks"
                            },
                            {
                                "name": "monitor_code_execution_engine",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "status"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Monitors the health of the Code Execution Engine service",
                                "todo": "Add more detailed health checks"
                            },
                            {
                                "name": "log_monitoring_results",
                                "inputs": [
                                    "message"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Logs monitoring results to a file with timestamp and rotation",
                                "todo": "Add option for different log levels"
                            },
                            {
                                "name": "check_thresholds",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Checks resource usage against predefined thresholds and logs warnings",
                                "todo": "Add customizable alerting mechanisms"
                            },
                            {
                                "name": "format_json_output",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [
                                    "json_data"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Formats monitoring results as JSON output",
                                "todo": "Add more detailed JSON structure for each monitored component"
                            },
                            {
                                "name": "main",
                                "inputs": [
                                    "output_format"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "monitoring_results"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Main function that runs all monitoring checks and outputs results",
                                "todo": "Add option for selective monitoring of specific components"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "A comprehensive system monitoring script for DevLM environment, including resource usage, Docker containers, database stats, and service health checks.",
                        "last_updated_iteration": 5
                    }
                ],
                "directories": {}
            },
            "docs": {
                "files": [],
                "directories": {
                    "api": {
                        "files": [
                            {
                                "name": "api.md",
                                "functions": [
                                    {
                                        "name": "Create Project",
                                        "inputs": [
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer"
                                        ],
                                        "outputs": [
                                            "project_id",
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size",
                                            "created_at",
                                            "updated_at"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer",
                                            "string",
                                            "string"
                                        ],
                                        "summary": "Creates a new project with the given details",
                                        "todo": "Consider adding validation for input parameters"
                                    },
                                    {
                                        "name": "Get Project",
                                        "inputs": [
                                            "project_id"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "project_id",
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size",
                                            "created_at",
                                            "updated_at"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer",
                                            "string",
                                            "string"
                                        ],
                                        "summary": "Retrieves project details by project_id",
                                        "todo": "Implement caching for frequently accessed projects"
                                    },
                                    {
                                        "name": "Update Project",
                                        "inputs": [
                                            "project_id",
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer"
                                        ],
                                        "outputs": [
                                            "project_id",
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size",
                                            "created_at",
                                            "updated_at"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer",
                                            "string",
                                            "string"
                                        ],
                                        "summary": "Updates an existing project with the given details",
                                        "todo": "Add support for partial updates"
                                    },
                                    {
                                        "name": "Delete Project",
                                        "inputs": [
                                            "project_id"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "success",
                                            "message"
                                        ],
                                        "output_types": [
                                            "boolean",
                                            "string"
                                        ],
                                        "summary": "Deletes a project by project_id",
                                        "todo": "Implement soft delete functionality"
                                    },
                                    {
                                        "name": "Analyze Requirements",
                                        "inputs": [
                                            "project_id",
                                            "requirements"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "analysis_results"
                                        ],
                                        "output_types": [
                                            "object"
                                        ],
                                        "summary": "Analyzes project requirements and returns tasks, dependencies, and time estimates",
                                        "todo": "Improve accuracy of time and complexity estimates"
                                    },
                                    {
                                        "name": "Generate Code",
                                        "inputs": [
                                            "project_id",
                                            "task_id",
                                            "language",
                                            "framework",
                                            "code_style"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "generated_code",
                                            "explanation",
                                            "suggestions"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string",
                                            "array"
                                        ],
                                        "summary": "Generates code based on the given task and project specifications",
                                        "todo": "Implement support for more programming languages and frameworks"
                                    },
                                    {
                                        "name": "Improve Code",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "language",
                                            "improvement_focus",
                                            "custom_rules"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "array",
                                            "object"
                                        ],
                                        "outputs": [
                                            "improved_code",
                                            "changes",
                                            "performance_impact",
                                            "readability_score"
                                        ],
                                        "output_types": [
                                            "string",
                                            "array",
                                            "string",
                                            "float"
                                        ],
                                        "summary": "Improves existing code based on specified focus areas and custom rules",
                                        "todo": "Add more advanced code improvement techniques"
                                    },
                                    {
                                        "name": "Execute Code",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "language",
                                            "input",
                                            "timeout",
                                            "memory_limit"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "integer",
                                            "integer"
                                        ],
                                        "outputs": [
                                            "output",
                                            "execution_time",
                                            "memory_usage",
                                            "status",
                                            "error_message"
                                        ],
                                        "output_types": [
                                            "string",
                                            "float",
                                            "float",
                                            "string",
                                            "string"
                                        ],
                                        "summary": "Executes provided code and returns the output along with performance metrics",
                                        "todo": "Implement sandboxing for secure code execution"
                                    },
                                    {
                                        "name": "Run Tests",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "tests",
                                            "language",
                                            "framework"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "array",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "test_results",
                                            "overall_status",
                                            "total_tests",
                                            "passed_tests",
                                            "failed_tests"
                                        ],
                                        "output_types": [
                                            "array",
                                            "string",
                                            "integer",
                                            "integer",
                                            "integer"
                                        ],
                                        "summary": "Runs specified tests on the provided code and returns test results",
                                        "todo": "Add support for more testing frameworks"
                                    },
                                    {
                                        "name": "Read File",
                                        "inputs": [
                                            "project_id",
                                            "file_path",
                                            "chunk_size"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "integer"
                                        ],
                                        "outputs": [
                                            "file_content",
                                            "encoding",
                                            "size",
                                            "last_modified"
                                        ],
                                        "output_types": [
                                            "string",
                                            "string",
                                            "integer",
                                            "string"
                                        ],
                                        "summary": "Reads the content of a file from the project repository",
                                        "todo": "Implement streaming for large files"
                                    },
                                    {
                                        "name": "Write File",
                                        "inputs": [
                                            "project_id",
                                            "file_path",
                                            "content",
                                            "encoding",
                                            "overwrite"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string",
                                            "string",
                                            "string",
                                            "boolean"
                                        ],
                                        "outputs": [
                                            "success",
                                            "message",
                                            "file_path",
                                            "size"
                                        ],
                                        "output_types": [
                                            "boolean",
                                            "string",
                                            "string",
                                            "integer"
                                        ],
                                        "summary": "Writes content to a file in the project repository",
                                        "todo": "Add support for version control integration"
                                    },
                                    {
                                        "name": "Web Search",
                                        "inputs": [
                                            "query",
                                            "num_results",
                                            "search_engine"
                                        ],
                                        "input_types": [
                                            "string",
                                            "integer",
                                            "string"
                                        ],
                                        "outputs": [
                                            "search_results",
                                            "total_results",
                                            "search_time"
                                        ],
                                        "output_types": [
                                            "array",
                                            "integer",
                                            "float"
                                        ],
                                        "summary": "Performs a web search and returns relevant results",
                                        "todo": "Implement caching for frequent searches"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "API documentation for the DevLM project, providing an overview of endpoints for project management, requirement analysis, code generation, improvement, execution, testing, file operations, and web search.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "endpoints.md",
                                "functions": [
                                    {
                                        "name": "base_url",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "url"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Returns the base URL for the API",
                                        "todo": "Consider making this configurable"
                                    },
                                    {
                                        "name": "api_call",
                                        "inputs": [
                                            "method",
                                            "endpoint",
                                            "payload"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "Dict"
                                        ],
                                        "outputs": [
                                            "response"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Makes an API call to the specified endpoint with the given method and payload",
                                        "todo": "Implement proper error handling and logging"
                                    },
                                    {
                                        "name": "create_project",
                                        "inputs": [
                                            "name",
                                            "description",
                                            "language",
                                            "framework",
                                            "repository_url",
                                            "team_size"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str",
                                            "str",
                                            "str",
                                            "int"
                                        ],
                                        "outputs": [
                                            "project_info"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Creates a new project with the given details",
                                        "todo": "Add input validation"
                                    },
                                    {
                                        "name": "get_project",
                                        "inputs": [
                                            "project_id"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "project_info"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Retrieves information about a specific project",
                                        "todo": "Implement caching for frequently accessed projects"
                                    },
                                    {
                                        "name": "update_project",
                                        "inputs": [
                                            "project_id",
                                            "**kwargs"
                                        ],
                                        "input_types": [
                                            "str",
                                            "Dict"
                                        ],
                                        "outputs": [
                                            "updated_project_info"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Updates a project with the provided information",
                                        "todo": "Add support for bulk updates"
                                    },
                                    {
                                        "name": "delete_project",
                                        "inputs": [
                                            "project_id"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "success"
                                        ],
                                        "output_types": [
                                            "bool"
                                        ],
                                        "summary": "Deletes a project after user confirmation",
                                        "todo": "Implement a way to recover deleted projects"
                                    },
                                    {
                                        "name": "analyze_requirements",
                                        "inputs": [
                                            "project_id",
                                            "requirements"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "analysis_results"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Analyzes project requirements",
                                        "todo": "Add support for multiple requirement formats"
                                    },
                                    {
                                        "name": "generate_code",
                                        "inputs": [
                                            "project_id",
                                            "task_id",
                                            "language",
                                            "framework",
                                            "code_style"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str",
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "generated_code"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Generates code based on project, task, and language specifications",
                                        "todo": "Implement code generation templates"
                                    },
                                    {
                                        "name": "improve_code",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "language",
                                            "improvement_focus",
                                            "custom_rules"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str",
                                            "List[str]",
                                            "Dict"
                                        ],
                                        "outputs": [
                                            "improved_code"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Improves existing code based on specified focus areas and custom rules",
                                        "todo": "Add support for more languages and improvement techniques"
                                    },
                                    {
                                        "name": "execute_code",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "language",
                                            "input",
                                            "timeout",
                                            "memory_limit"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "str",
                                            "str",
                                            "int",
                                            "int"
                                        ],
                                        "outputs": [
                                            "execution_results"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Executes code with specified input, timeout, and memory limits",
                                        "todo": "Implement sandboxing for secure code execution"
                                    },
                                    {
                                        "name": "run_tests",
                                        "inputs": [
                                            "project_id",
                                            "code",
                                            "tests",
                                            "language",
                                            "framework"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "List[Dict]",
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "test_results"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Runs tests on the provided code",
                                        "todo": "Add support for parallel test execution"
                                    },
                                    {
                                        "name": "read_file",
                                        "inputs": [
                                            "project_id",
                                            "file_path",
                                            "chunk_size"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "int"
                                        ],
                                        "outputs": [
                                            "file_content"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Reads the content of a file in the project",
                                        "todo": "Implement file streaming for large files"
                                    },
                                    {
                                        "name": "write_file",
                                        "inputs": [
                                            "project_id",
                                            "file_path",
                                            "content",
                                            "encoding",
                                            "overwrite"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "Union[str, bytes]",
                                            "str",
                                            "bool"
                                        ],
                                        "outputs": [
                                            "write_result"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Writes content to a file in the project",
                                        "todo": "Add support for append mode"
                                    },
                                    {
                                        "name": "web_search",
                                        "inputs": [
                                            "query",
                                            "num_results",
                                            "filters",
                                            "search_engine"
                                        ],
                                        "input_types": [
                                            "str",
                                            "int",
                                            "Dict",
                                            "str"
                                        ],
                                        "outputs": [
                                            "search_results"
                                        ],
                                        "output_types": [
                                            "Dict"
                                        ],
                                        "summary": "Performs a web search with the given query and parameters",
                                        "todo": "Implement caching for frequent searches"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains a collection of functions for interacting with a DevLM API, including project management, requirement analysis, code generation, code execution, file operations, and web search capabilities.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "architecture": {
                        "files": [
                            {
                                "name": "architecture.md",
                                "functions": [
                                    {
                                        "name": "API_Gateway",
                                        "inputs": [
                                            "user_request"
                                        ],
                                        "input_types": [
                                            "*http.Request"
                                        ],
                                        "outputs": [
                                            "response",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*http.Response",
                                            "error"
                                        ],
                                        "summary": "Handles incoming requests, validates JWT tokens, enforces rate limiting, and routes requests to appropriate services.",
                                        "todo": "Implement proper error handling and logging"
                                    },
                                    {
                                        "name": "Golang_Backend_Service",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "*http.Request"
                                        ],
                                        "outputs": [
                                            "processedRequest",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*ProcessedRequest",
                                            "error"
                                        ],
                                        "summary": "Processes incoming requests and handles any panics that may occur during execution.",
                                        "todo": "Implement the processRequest function"
                                    },
                                    {
                                        "name": "Python_LLM_Service",
                                        "inputs": [
                                            "task",
                                            "context"
                                        ],
                                        "input_types": [
                                            "str",
                                            "dict"
                                        ],
                                        "outputs": [
                                            "result"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Asynchronous function that interacts with the LLM API to process tasks with given context, using caching for efficiency.",
                                        "todo": "Implement proper error handling and retries"
                                    },
                                    {
                                        "name": "Action_Executor",
                                        "inputs": [
                                            "action",
                                            "parameters"
                                        ],
                                        "input_types": [
                                            "string",
                                            "map[string]interface{}"
                                        ],
                                        "outputs": [
                                            "result",
                                            "error"
                                        ],
                                        "output_types": [
                                            "map[string]interface{}",
                                            "error"
                                        ],
                                        "summary": "Executes various actions such as file operations and web searches based on the given action and parameters.",
                                        "todo": "Add more actions and improve error handling"
                                    },
                                    {
                                        "name": "Code_Execution_Engine",
                                        "inputs": [
                                            "code",
                                            "language"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "result",
                                            "output",
                                            "error"
                                        ],
                                        "output_types": [
                                            "map[string]interface{}",
                                            "string",
                                            "error"
                                        ],
                                        "summary": "Executes code in a specified language using Docker containers with resource limitations.",
                                        "todo": "Implement cleanup of Docker containers after execution"
                                    },
                                    {
                                        "name": "Redis_Cache",
                                        "inputs": [
                                            "key",
                                            "value"
                                        ],
                                        "input_types": [
                                            "string",
                                            "interface{}"
                                        ],
                                        "outputs": [
                                            "cachedValue",
                                            "error"
                                        ],
                                        "output_types": [
                                            "interface{}",
                                            "error"
                                        ],
                                        "summary": "Implements a caching mechanism using Redis, with automatic eviction of old entries.",
                                        "todo": "Implement more sophisticated caching strategies"
                                    },
                                    {
                                        "name": "PostgreSQL_Database",
                                        "inputs": [
                                            "query",
                                            "parameters"
                                        ],
                                        "input_types": [
                                            "string",
                                            "[]interface{}"
                                        ],
                                        "outputs": [
                                            "rows",
                                            "error"
                                        ],
                                        "output_types": [
                                            "pgx.Rows",
                                            "error"
                                        ],
                                        "summary": "Executes SQL queries on the PostgreSQL database.",
                                        "todo": "Implement connection pooling and error handling"
                                    },
                                    {
                                        "name": "CreateTables",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "error"
                                        ],
                                        "output_types": [
                                            "error"
                                        ],
                                        "summary": "Creates the necessary tables in the PostgreSQL database if they don't exist.",
                                        "todo": "Add index creation and optimize table structures"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file outlines the architecture of DevLM, an AI-powered software development assistant that uses Large Language Models (LLMs) to aid in code development. It describes the core components, supporting services, external services, and component interactions.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "components.md",
                                "functions": [
                                    {
                                        "name": "NewAPIGateway",
                                        "inputs": [
                                            "jwtSecret",
                                            "redisAddr",
                                            "backendURL"
                                        ],
                                        "input_types": [
                                            "[]byte",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*APIGateway"
                                        ],
                                        "output_types": [
                                            "*APIGateway"
                                        ],
                                        "summary": "Creates a new API Gateway instance with JWT authentication, Redis client, and rate limiting.",
                                        "todo": "Implement request routing logic in handleAPI method"
                                    },
                                    {
                                        "name": "NewGolangBackendService",
                                        "inputs": [
                                            "llm",
                                            "codeExec",
                                            "actionExec"
                                        ],
                                        "input_types": [
                                            "LLMService",
                                            "CodeExecutionService",
                                            "ActionExecutor"
                                        ],
                                        "outputs": [
                                            "*GolangBackendService"
                                        ],
                                        "output_types": [
                                            "*GolangBackendService"
                                        ],
                                        "summary": "Creates a new Golang Backend Service instance with LLM, Code Execution, and Action Executor services.",
                                        "todo": "Implement additional request processing logic in processRequest method"
                                    },
                                    {
                                        "name": "process_task",
                                        "inputs": [
                                            "task"
                                        ],
                                        "input_types": [
                                            "Task"
                                        ],
                                        "outputs": [
                                            "str"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Processes a task using the LLM service in Python.",
                                        "todo": "Implement proper error handling and retries, and add caching mechanism for efficiency"
                                    },
                                    {
                                        "name": "NewActionExecutor",
                                        "inputs": [
                                            "allowedActions",
                                            "baseFilePath"
                                        ],
                                        "input_types": [
                                            "[]string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "*ActionExecutor"
                                        ],
                                        "output_types": [
                                            "*ActionExecutor"
                                        ],
                                        "summary": "Creates a new Action Executor instance with allowed actions and base file path.",
                                        "todo": "Replace web search with actual search API integration"
                                    },
                                    {
                                        "name": "NewCodeExecutionEngine",
                                        "inputs": [
                                            "tempDir"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "*CodeExecutionEngine",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*CodeExecutionEngine",
                                            "error"
                                        ],
                                        "summary": "Creates a new Code Execution Engine instance using Docker.",
                                        "todo": "Implement cleanup of Docker containers after execution"
                                    },
                                    {
                                        "name": "NewRedisCache",
                                        "inputs": [
                                            "addr"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "*RedisCache"
                                        ],
                                        "output_types": [
                                            "*RedisCache"
                                        ],
                                        "summary": "Creates a new Redis Cache instance.",
                                        "todo": "Complete the implementation of the Redis Cache component"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains implementations of various components for a distributed system, including an API Gateway, Golang Backend Service, Python LLM Service, Action Executor, Code Execution Engine, and Redis Cache.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "data_flow.md",
                                "functions": [
                                    {
                                        "name": "ClientRequest",
                                        "inputs": [
                                            "request"
                                        ],
                                        "input_types": [
                                            "ClientRequestObject"
                                        ],
                                        "outputs": [
                                            "apiGatewayRequest"
                                        ],
                                        "output_types": [
                                            "APIGatewayRequestObject"
                                        ],
                                        "summary": "Initiates the request flow from the client to the API Gateway",
                                        "todo": "Implement request validation and error handling"
                                    },
                                    {
                                        "name": "APIGatewayProcessing",
                                        "inputs": [
                                            "apiGatewayRequest"
                                        ],
                                        "input_types": [
                                            "APIGatewayRequestObject"
                                        ],
                                        "outputs": [
                                            "backendServiceRequest"
                                        ],
                                        "output_types": [
                                            "BackendServiceRequestObject"
                                        ],
                                        "summary": "Processes the request in the API Gateway and forwards it to the Golang Backend Service",
                                        "todo": "Implement authentication and rate limiting"
                                    },
                                    {
                                        "name": "GolangBackendProcessing",
                                        "inputs": [
                                            "backendServiceRequest"
                                        ],
                                        "input_types": [
                                            "BackendServiceRequestObject"
                                        ],
                                        "outputs": [
                                            "llmServiceRequest",
                                            "codeExecutionRequest",
                                            "actionExecutorRequest"
                                        ],
                                        "output_types": [
                                            "LLMServiceRequestObject",
                                            "CodeExecutionRequestObject",
                                            "ActionExecutorRequestObject"
                                        ],
                                        "summary": "Processes the request in the Golang Backend Service and interacts with other components",
                                        "todo": "Implement error handling and logging"
                                    },
                                    {
                                        "name": "PythonLLMProcessing",
                                        "inputs": [
                                            "llmServiceRequest"
                                        ],
                                        "input_types": [
                                            "LLMServiceRequestObject"
                                        ],
                                        "outputs": [
                                            "claudeSonnetRequest",
                                            "backendServiceResponse"
                                        ],
                                        "output_types": [
                                            "ClaudeSonnetRequestObject",
                                            "BackendServiceResponseObject"
                                        ],
                                        "summary": "Processes the request in the Python LLM Service and interacts with Claude Sonnet Instances",
                                        "todo": "Implement load balancing for Claude Sonnet Instances"
                                    },
                                    {
                                        "name": "ClaudeSonnetProcessing",
                                        "inputs": [
                                            "claudeSonnetRequest"
                                        ],
                                        "input_types": [
                                            "ClaudeSonnetRequestObject"
                                        ],
                                        "outputs": [
                                            "llmServiceResponse"
                                        ],
                                        "output_types": [
                                            "LLMServiceResponseObject"
                                        ],
                                        "summary": "Processes the request in Claude Sonnet Instances and returns the response to the Python LLM Service",
                                        "todo": "Implement performance monitoring and optimization"
                                    },
                                    {
                                        "name": "CodeExecutionEngineProcessing",
                                        "inputs": [
                                            "codeExecutionRequest"
                                        ],
                                        "input_types": [
                                            "CodeExecutionRequestObject"
                                        ],
                                        "outputs": [
                                            "backendServiceResponse"
                                        ],
                                        "output_types": [
                                            "BackendServiceResponseObject"
                                        ],
                                        "summary": "Executes code and returns the result to the Golang Backend Service",
                                        "todo": "Implement sandboxing and security measures"
                                    },
                                    {
                                        "name": "ActionExecutorProcessing",
                                        "inputs": [
                                            "actionExecutorRequest"
                                        ],
                                        "input_types": [
                                            "ActionExecutorRequestObject"
                                        ],
                                        "outputs": [
                                            "backendServiceResponse"
                                        ],
                                        "output_types": [
                                            "BackendServiceResponseObject"
                                        ],
                                        "summary": "Executes actions and returns the result to the Golang Backend Service",
                                        "todo": "Implement action validation and error handling"
                                    },
                                    {
                                        "name": "ClientResponse",
                                        "inputs": [
                                            "apiGatewayResponse"
                                        ],
                                        "input_types": [
                                            "APIGatewayResponseObject"
                                        ],
                                        "outputs": [
                                            "clientResponse"
                                        ],
                                        "output_types": [
                                            "ClientResponseObject"
                                        ],
                                        "summary": "Sends the final response from the API Gateway to the client",
                                        "todo": "Implement response compression and caching"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This document outlines the data flow between different components of the DevLM system, including the request flow and component interactions.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "development": {
                        "files": [
                            {
                                "name": "contributing.md",
                                "functions": [
                                    {
                                        "name": "setup_development_environment",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "configured_environment"
                                        ],
                                        "output_types": [
                                            "Environment"
                                        ],
                                        "summary": "Sets up the development environment for DevLM, including installing dependencies, configuring databases, and initializing the project.",
                                        "todo": "Consider automating more parts of the setup process"
                                    },
                                    {
                                        "name": "create_pull_request",
                                        "inputs": [
                                            "feature_branch",
                                            "changes"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array"
                                        ],
                                        "outputs": [
                                            "pull_request"
                                        ],
                                        "output_types": [
                                            "PullRequest"
                                        ],
                                        "summary": "Guides contributors through the process of creating and submitting a pull request for their changes.",
                                        "todo": "Implement a CI check to ensure all items in the PR checklist are completed"
                                    },
                                    {
                                        "name": "report_bug",
                                        "inputs": [
                                            "bug_description",
                                            "reproduction_steps",
                                            "environment_info"
                                        ],
                                        "input_types": [
                                            "string",
                                            "array",
                                            "object"
                                        ],
                                        "outputs": [
                                            "issue"
                                        ],
                                        "output_types": [
                                            "Issue"
                                        ],
                                        "summary": "Provides instructions for reporting bugs, including what information to include and how to use the bug report template.",
                                        "todo": "Create a web form to streamline the bug reporting process"
                                    },
                                    {
                                        "name": "suggest_enhancement",
                                        "inputs": [
                                            "enhancement_description",
                                            "justification"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "issue"
                                        ],
                                        "output_types": [
                                            "Issue"
                                        ],
                                        "summary": "Outlines the process for suggesting enhancements to the project, including how to create a feature request.",
                                        "todo": "Implement a voting system for proposed enhancements"
                                    },
                                    {
                                        "name": "handle_merge_conflicts",
                                        "inputs": [
                                            "conflicting_branch"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "resolved_branch"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Provides step-by-step instructions for resolving merge conflicts in a pull request.",
                                        "todo": "Create a visual guide or screencast for handling merge conflicts"
                                    },
                                    {
                                        "name": "release_process",
                                        "inputs": [
                                            "version",
                                            "changelog"
                                        ],
                                        "input_types": [
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "release"
                                        ],
                                        "output_types": [
                                            "Release"
                                        ],
                                        "summary": "Describes the process for creating and publishing a new release of the project.",
                                        "todo": "Automate the release process using GitHub Actions"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "A comprehensive guide for contributing to the DevLM project, covering setup, development workflow, pull request process, bug reporting, and other important guidelines.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "coding_standards.md",
                                "functions": [
                                    {
                                        "name": "FormatName",
                                        "inputs": [
                                            "name"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "formattedName"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Formats a given name by trimming whitespace and converting it to uppercase.",
                                        "todo": "Consider adding options for different formatting styles"
                                    },
                                    {
                                        "name": "ProcessUsers",
                                        "inputs": [
                                            "users"
                                        ],
                                        "input_types": [
                                            "[]User"
                                        ],
                                        "outputs": [
                                            "processedUsers",
                                            "error"
                                        ],
                                        "output_types": [
                                            "map[int]string",
                                            "error"
                                        ],
                                        "summary": "Processes a list of users, formatting their names and returning a map of user IDs to formatted names.",
                                        "todo": "Add validation for user ID uniqueness"
                                    },
                                    {
                                        "name": "GetUser",
                                        "inputs": [
                                            "w",
                                            "r"
                                        ],
                                        "input_types": [
                                            "http.ResponseWriter",
                                            "*http.Request"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "HTTP handler function to fetch and return user information based on the provided user ID.",
                                        "todo": "Implement response caching for frequently requested users"
                                    },
                                    {
                                        "name": "GetUserByID",
                                        "inputs": [
                                            "ctx",
                                            "id"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "string"
                                        ],
                                        "outputs": [
                                            "user",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Retrieves a user by ID with retry logic and context cancellation support.",
                                        "todo": "Implement exponential backoff for retries"
                                    },
                                    {
                                        "name": "fetchUserFromDatabase",
                                        "inputs": [
                                            "id"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "user",
                                            "error"
                                        ],
                                        "output_types": [
                                            "*User",
                                            "error"
                                        ],
                                        "summary": "Simulates fetching a user from a database.",
                                        "todo": "Replace with actual database implementation"
                                    },
                                    {
                                        "name": "fetchData",
                                        "inputs": [
                                            "ctx",
                                            "url"
                                        ],
                                        "input_types": [
                                            "context.Context",
                                            "string"
                                        ],
                                        "outputs": [
                                            "data",
                                            "error"
                                        ],
                                        "output_types": [
                                            "[]byte",
                                            "error"
                                        ],
                                        "summary": "Fetches data from a given URL with context support and error handling.",
                                        "todo": "Implement response body reading and processing"
                                    },
                                    {
                                        "name": "format_name",
                                        "inputs": [
                                            "name"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "formatted_name"
                                        ],
                                        "output_types": [
                                            "str"
                                        ],
                                        "summary": "Formats a given name by converting it to uppercase.",
                                        "todo": "Add option for different case formats (e.g., title case)"
                                    },
                                    {
                                        "name": "process_users",
                                        "inputs": [
                                            "users"
                                        ],
                                        "input_types": [
                                            "List[User]"
                                        ],
                                        "outputs": [
                                            "processed_users"
                                        ],
                                        "output_types": [
                                            "Dict[int, str]"
                                        ],
                                        "summary": "Processes a list of users, formatting their names and returning a dictionary of user IDs to formatted names.",
                                        "todo": "Implement batch processing for large user lists"
                                    },
                                    {
                                        "name": "retry_with_backoff",
                                        "inputs": [
                                            "max_retries",
                                            "base_delay"
                                        ],
                                        "input_types": [
                                            "int",
                                            "float"
                                        ],
                                        "outputs": [
                                            "decorator"
                                        ],
                                        "output_types": [
                                            "Callable"
                                        ],
                                        "summary": "Decorator function that implements retry logic with exponential backoff.",
                                        "todo": "Add jitter to avoid thundering herd problem"
                                    },
                                    {
                                        "name": "get_user",
                                        "inputs": [
                                            "user_id"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "user"
                                        ],
                                        "output_types": [
                                            "Optional[User]"
                                        ],
                                        "summary": "Retrieves a user by ID from an API endpoint with retry logic.",
                                        "todo": "Implement caching for frequently requested users"
                                    },
                                    {
                                        "name": "fetch_user_data",
                                        "inputs": [
                                            "user_id"
                                        ],
                                        "input_types": [
                                            "int"
                                        ],
                                        "outputs": [
                                            "user_data"
                                        ],
                                        "output_types": [
                                            "Dict[str, Any]"
                                        ],
                                        "summary": "Fetches user data from an API endpoint.",
                                        "todo": "Add support for custom headers and query parameters"
                                    },
                                    {
                                        "name": "process_user",
                                        "inputs": [
                                            "user_id"
                                        ],
                                        "input_types": [
                                            "int"
                                        ],
                                        "outputs": [
                                            "user"
                                        ],
                                        "output_types": [
                                            "User"
                                        ],
                                        "summary": "Fetches and processes user data, creating a User object.",
                                        "todo": "Implement error handling for invalid user data"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file outlines the coding standards for the DevLM Project, covering general guidelines, Golang and Python standards, documentation practices, testing requirements, version control procedures, API design principles, and error handling strategies.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "security.md",
                                "functions": [
                                    {
                                        "name": "use_environment_variables",
                                        "inputs": [
                                            "sensitive_data"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "configured_env"
                                        ],
                                        "output_types": [
                                            "dict"
                                        ],
                                        "summary": "Stores sensitive data in an environment variable and returns the updated environment.",
                                        "todo": "Consider adding encryption for the stored sensitive data."
                                    },
                                    {
                                        "name": "prevent_secret_commits",
                                        "inputs": [
                                            "code_changes"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "sanitized_changes"
                                        ],
                                        "output_types": [
                                            "string"
                                        ],
                                        "summary": "Checks for potential sensitive data in code changes and raises an error if found.",
                                        "todo": "Add more patterns for different types of sensitive data."
                                    },
                                    {
                                        "name": "secure_api_key_storage",
                                        "inputs": [
                                            "api_key"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "encrypted_key",
                                            "key"
                                        ],
                                        "output_types": [
                                            "bytes",
                                            "bytes"
                                        ],
                                        "summary": "Encrypts an API key using Fernet encryption and returns the encrypted key and encryption key.",
                                        "todo": "Implement secure storage for the encryption key."
                                    },
                                    {
                                        "name": "KeyManagementSystem",
                                        "inputs": [
                                            "master_key"
                                        ],
                                        "input_types": [
                                            "bytes"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "A class for managing encryption keys and performing encryption/decryption operations.",
                                        "todo": "Implement key rotation and expiration mechanisms."
                                    },
                                    {
                                        "name": "load_environment_variables",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Loads environment variables from a .env file.",
                                        "todo": "Add support for multiple environment configurations."
                                    },
                                    {
                                        "name": "get_environment_variable",
                                        "inputs": [
                                            "key",
                                            "default"
                                        ],
                                        "input_types": [
                                            "string",
                                            "any"
                                        ],
                                        "outputs": [
                                            "value"
                                        ],
                                        "output_types": [
                                            "any"
                                        ],
                                        "summary": "Retrieves an environment variable value, with an optional default.",
                                        "todo": "Implement caching for frequently accessed variables."
                                    },
                                    {
                                        "name": "set_environment_variable",
                                        "inputs": [
                                            "key",
                                            "value"
                                        ],
                                        "input_types": [
                                            "string",
                                            "any"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Sets an environment variable after validating the key name.",
                                        "todo": "Add support for persisting changes to the .env file."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file provides various security-related functions for handling sensitive data, preventing secret commits, secure API key storage, and managing environment variables.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    },
                    "operations": {
                        "files": [
                            {
                                "name": "deployment.md",
                                "functions": [
                                    {
                                        "name": "clone_repository",
                                        "inputs": [
                                            "repository_url"
                                        ],
                                        "input_types": [
                                            "string"
                                        ],
                                        "outputs": [
                                            "cloned_repository"
                                        ],
                                        "output_types": [
                                            "directory"
                                        ],
                                        "summary": "Clones the DevLM repository to the local machine",
                                        "todo": "Add specific repository URL and instructions for handling authentication if required"
                                    },
                                    {
                                        "name": "local_deployment",
                                        "inputs": [
                                            "repository_directory"
                                        ],
                                        "input_types": [
                                            "directory"
                                        ],
                                        "outputs": [
                                            "running_local_instance"
                                        ],
                                        "output_types": [
                                            "service"
                                        ],
                                        "summary": "Deploys DevLM locally using Docker and Docker Compose",
                                        "todo": "Include detailed steps for Docker Compose setup and configuration"
                                    },
                                    {
                                        "name": "production_deployment",
                                        "inputs": [
                                            "repository_directory",
                                            "kubernetes_cluster"
                                        ],
                                        "input_types": [
                                            "directory",
                                            "kubernetes_cluster"
                                        ],
                                        "outputs": [
                                            "running_production_instance"
                                        ],
                                        "output_types": [
                                            "service"
                                        ],
                                        "summary": "Deploys DevLM to a production environment using Kubernetes",
                                        "todo": "Add Kubernetes manifest files and Helm chart configuration details"
                                    },
                                    {
                                        "name": "check_prerequisites",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "prerequisites_status"
                                        ],
                                        "output_types": [
                                            "boolean"
                                        ],
                                        "summary": "Checks if all required prerequisites are installed and configured",
                                        "todo": "Implement a script to automatically check and install missing prerequisites"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "A comprehensive guide for deploying DevLM, covering local and production deployment steps, prerequisites, and configuration instructions.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "monitoring.md",
                                "functions": [
                                    {
                                        "name": "analyze_user_behavior",
                                        "inputs": [
                                            "log_data"
                                        ],
                                        "input_types": [
                                            "list of dictionaries"
                                        ],
                                        "outputs": [
                                            "df"
                                        ],
                                        "output_types": [
                                            "pandas.DataFrame"
                                        ],
                                        "summary": "Analyzes user behavior by clustering log data using KMeans algorithm",
                                        "todo": "Consider implementing error handling for specific data format issues"
                                    },
                                    {
                                        "name": "visualize_user_behavior",
                                        "inputs": [
                                            "df"
                                        ],
                                        "input_types": [
                                            "pandas.DataFrame"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Creates and saves visualizations of user behavior clusters",
                                        "todo": "Add option to customize output file name and format"
                                    },
                                    {
                                        "name": "scale_deployment",
                                        "inputs": [
                                            "deployment_name",
                                            "namespace",
                                            "replicas"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "int"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Scales a Kubernetes deployment to the specified number of replicas",
                                        "todo": "Implement more sophisticated error handling and logging"
                                    },
                                    {
                                        "name": "get_current_replicas",
                                        "inputs": [
                                            "deployment_name",
                                            "namespace"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str"
                                        ],
                                        "outputs": [
                                            "replicas"
                                        ],
                                        "output_types": [
                                            "int"
                                        ],
                                        "summary": "Retrieves the current number of replicas for a Kubernetes deployment",
                                        "todo": "Add caching to reduce API calls"
                                    },
                                    {
                                        "name": "auto_scale_based_on_metrics",
                                        "inputs": [
                                            "deployment_name",
                                            "namespace",
                                            "metric_func",
                                            "target_value",
                                            "max_replicas"
                                        ],
                                        "input_types": [
                                            "str",
                                            "str",
                                            "function",
                                            "float",
                                            "int"
                                        ],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Automatically scales a deployment based on custom metrics",
                                        "todo": "Implement more advanced scaling algorithms and cooldown periods"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file provides a comprehensive monitoring guide for DevLM, including metrics collection, log aggregation, alerting, visualization, distributed tracing, user behavior analytics, and automated remediation.",
                                "last_updated_iteration": 5
                            },
                            {
                                "name": "troubleshooting.md",
                                "functions": [
                                    {
                                        "name": "check_api_gateway_connection",
                                        "inputs": [
                                            "gateway_url"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "status",
                                            "message"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "str"
                                        ],
                                        "summary": "Checks the connection to the API Gateway and returns the status and a descriptive message.",
                                        "todo": "Consider adding more specific error handling for different types of connection issues."
                                    },
                                    {
                                        "name": "troubleshoot_api_gateway",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Troubleshoots the API Gateway by checking the connection and performing automated remediation steps if necessary.",
                                        "todo": "Implement more advanced automated remediation techniques."
                                    },
                                    {
                                        "name": "check_llm_service",
                                        "inputs": [
                                            "llm_service_url"
                                        ],
                                        "input_types": [
                                            "str"
                                        ],
                                        "outputs": [
                                            "status",
                                            "message"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "str"
                                        ],
                                        "summary": "Checks the status of the LLM Service and returns performance metrics if available.",
                                        "todo": "Add support for checking multiple LLM models or services."
                                    },
                                    {
                                        "name": "troubleshoot_llm_service",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Troubleshoots the LLM Service by checking its status and performing automated remediation steps if necessary.",
                                        "todo": "Implement model-specific troubleshooting steps for different LLM types."
                                    },
                                    {
                                        "name": "check_code_execution_engine",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [
                                            "status",
                                            "message"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "str"
                                        ],
                                        "summary": "Checks the status of the Code Execution Engine container and returns performance metrics.",
                                        "todo": "Add support for multiple Code Execution Engine containers or different containerization technologies."
                                    },
                                    {
                                        "name": "troubleshoot_code_execution_engine",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Troubleshoots the Code Execution Engine by checking its status and performing automated recovery steps if necessary.",
                                        "todo": "Implement more sophisticated container health checks and recovery strategies."
                                    },
                                    {
                                        "name": "check_database_connection",
                                        "inputs": [
                                            "db_config"
                                        ],
                                        "input_types": [
                                            "Dict[str, str]"
                                        ],
                                        "outputs": [
                                            "status",
                                            "message"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "str"
                                        ],
                                        "summary": "Checks the database connection and returns performance metrics and statistics.",
                                        "todo": "Add support for different database types and more detailed performance analysis."
                                    },
                                    {
                                        "name": "troubleshoot_database",
                                        "inputs": [],
                                        "input_types": [],
                                        "outputs": [],
                                        "output_types": [],
                                        "summary": "Troubleshoots the database by checking the connection and performing automated optimization steps if necessary.",
                                        "todo": "Implement more advanced database optimization techniques and support for different database engines."
                                    },
                                    {
                                        "name": "check_redis_connection",
                                        "inputs": [
                                            "redis_config"
                                        ],
                                        "input_types": [
                                            "Dict[str, str]"
                                        ],
                                        "outputs": [
                                            "status",
                                            "message"
                                        ],
                                        "output_types": [
                                            "bool",
                                            "str"
                                        ],
                                        "summary": "Checks the Redis connection and returns performance metrics.",
                                        "todo": "Add support for Redis cluster configurations and more detailed performance analysis."
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file contains functions for troubleshooting various components of a system, including API Gateway, LLM Service, Code Execution Engine, Database, and Redis. It provides methods to check connections, diagnose issues, and perform automated remediation steps.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            },
            "config": {
                "files": [
                    {
                        "name": ".env.example",
                        "functions": [
                            {
                                "name": "DatabaseConfiguration",
                                "inputs": [
                                    "DB_HOST",
                                    "DB_PORT",
                                    "DB_NAME",
                                    "DB_USER",
                                    "DB_PASSWORD",
                                    "DB_MAX_CONNECTIONS",
                                    "DB_CONNECTION_TIMEOUT",
                                    "DB_IDLE_TIMEOUT",
                                    "DB_SSL_MODE",
                                    "DB_POOL_MAX_CONNS",
                                    "DB_POOL_MIN_CONNS",
                                    "DB_CONNECTION_POOL_SIZE"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "string",
                                    "string",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Configures database connection settings for the application",
                                "todo": "Consider adding support for multiple database types"
                            },
                            {
                                "name": "RedisConfiguration",
                                "inputs": [
                                    "REDIS_HOST",
                                    "REDIS_PORT",
                                    "REDIS_PASSWORD",
                                    "REDIS_POOL_SIZE",
                                    "REDIS_MIN_IDLE_CONNECTIONS",
                                    "REDIS_MAX_RETRIES",
                                    "REDIS_IDLE_TIMEOUT",
                                    "REDIS_SENTINEL_MASTER",
                                    "REDIS_SENTINEL_NODES",
                                    "REDIS_CLUSTER_NODES",
                                    "REDIS_SSL_ENABLED",
                                    "REDIS_SSL_CERT_PATH"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "string",
                                    "string",
                                    "string",
                                    "boolean",
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Sets up Redis connection and configuration options",
                                "todo": "Implement support for Redis Cluster and Sentinel modes"
                            },
                            {
                                "name": "LLMAPIConfiguration",
                                "inputs": [
                                    "LLM_API_KEY",
                                    "LLM_API_URL",
                                    "LLM_API_TIMEOUT",
                                    "LLM_API_MAX_RETRIES",
                                    "LLM_API_PROVIDERS",
                                    "LLM_API_FALLBACK_STRATEGY",
                                    "LLM_API_RATE_LIMIT",
                                    "LLM_API_CONCURRENT_REQUESTS",
                                    "LLM_API_KEY_ROTATION_INTERVAL",
                                    "LLM_API_KEY_VAULT_PATH",
                                    "LLM_API_FALLBACK_THRESHOLD",
                                    "LLM_API_CIRCUIT_BREAKER_THRESHOLD"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "integer",
                                    "integer",
                                    "string",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "string",
                                    "integer",
                                    "integer"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Configures the LLM API settings and behavior",
                                "todo": "Implement key rotation and circuit breaker functionality"
                            },
                            {
                                "name": "SearchEngineAPIConfiguration",
                                "inputs": [
                                    "SEARCH_API_KEY",
                                    "SEARCH_API_URL",
                                    "SEARCH_API_TIMEOUT",
                                    "SEARCH_API_MAX_RESULTS",
                                    "SEARCH_API_PROVIDERS",
                                    "SEARCH_API_CACHE_TTL",
                                    "SEARCH_API_RATE_LIMIT",
                                    "SEARCH_API_CUSTOM_PARAMS",
                                    "SEARCH_API_RESULT_FILTER",
                                    "SEARCH_API_CUSTOM_ENGINE_ID"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "integer",
                                    "integer",
                                    "string",
                                    "integer",
                                    "integer",
                                    "string",
                                    "string",
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Sets up the search engine API configuration",
                                "todo": "Add support for multiple search providers and result caching"
                            },
                            {
                                "name": "CodeExecutionEngine",
                                "inputs": [
                                    "SANDBOX_IMAGE",
                                    "MAX_EXECUTION_TIME",
                                    "MAX_MEMORY",
                                    "CPU_LIMIT",
                                    "NETWORK_ACCESS",
                                    "ALLOWED_SYSCALLS",
                                    "SANDBOX_TIMEOUT",
                                    "SANDBOX_CONCURRENT_EXECUTIONS",
                                    "SANDBOX_RESOURCE_MONITORING_INTERVAL",
                                    "SANDBOX_CUSTOM_IMAGES",
                                    "SANDBOX_OUTPUT_LIMIT",
                                    "SANDBOX_DISK_QUOTA"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "boolean",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "string",
                                    "string",
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Configures the code execution sandbox environment",
                                "todo": "Implement resource monitoring and custom image support"
                            },
                            {
                                "name": "APIGateway",
                                "inputs": [
                                    "API_PORT",
                                    "API_SECRET_KEY",
                                    "API_RATE_LIMIT_REQUESTS",
                                    "API_RATE_LIMIT_DURATION",
                                    "API_TIMEOUT",
                                    "API_VERSION",
                                    "API_DOCS_ENABLED",
                                    "API_CORS_ENABLED",
                                    "API_VERSIONING_STRATEGY",
                                    "API_DEPRECATION_HEADER",
                                    "API_DEPRECATION_DATE_HEADER"
                                ],
                                "input_types": [
                                    "integer",
                                    "string",
                                    "integer",
                                    "integer",
                                    "integer",
                                    "string",
                                    "boolean",
                                    "boolean",
                                    "string",
                                    "string",
                                    "string"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Sets up the API gateway configuration",
                                "todo": "Implement API versioning and deprecation strategies"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "This file contains environment variables for configuring various aspects of the DevLM application, including database settings, Redis configuration, API keys, security settings, performance tuning, and feature flags.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "config.yaml",
                        "functions": [
                            {
                                "name": "load_config",
                                "inputs": [
                                    "file_path"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Loads the configuration from the YAML file and returns it as a dictionary.",
                                "todo": "Implement error handling for file not found or invalid YAML format."
                            },
                            {
                                "name": "validate_config",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "is_valid",
                                    "errors"
                                ],
                                "output_types": [
                                    "boolean",
                                    "list"
                                ],
                                "summary": "Validates the configuration dictionary against a schema and returns whether it's valid and any errors found.",
                                "todo": "Create a comprehensive schema for all configuration options."
                            },
                            {
                                "name": "apply_config",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Applies the configuration to the various components of the DevLM project.",
                                "todo": "Implement rollback mechanism in case of partial application failure."
                            },
                            {
                                "name": "update_config",
                                "inputs": [
                                    "config",
                                    "updates"
                                ],
                                "input_types": [
                                    "dict",
                                    "dict"
                                ],
                                "outputs": [
                                    "updated_config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Updates the configuration with new values and returns the updated configuration.",
                                "todo": "Add support for partial updates and nested key updates."
                            },
                            {
                                "name": "export_config",
                                "inputs": [
                                    "config",
                                    "format"
                                ],
                                "input_types": [
                                    "dict",
                                    "string"
                                ],
                                "outputs": [
                                    "exported_config"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Exports the configuration to a specified format (e.g., YAML, JSON, ENV).",
                                "todo": "Implement support for additional export formats."
                            }
                        ],
                        "status": "in_progress",
                        "summary": "Configuration file for the DevLM project, containing settings for various components such as database, Redis, LLM API, search API, code execution, API gateway, logging, file system, security, performance, feature flags, monitoring, LLM instances, and backup.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "config.production.yaml",
                        "functions": [
                            {
                                "name": "load_config",
                                "inputs": [
                                    "file_path"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Loads the production configuration from the YAML file",
                                "todo": "Implement error handling for missing or invalid configuration values"
                            },
                            {
                                "name": "validate_config",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "is_valid",
                                    "errors"
                                ],
                                "output_types": [
                                    "boolean",
                                    "list"
                                ],
                                "summary": "Validates the loaded configuration for completeness and correctness",
                                "todo": "Add comprehensive validation rules for all configuration sections"
                            },
                            {
                                "name": "apply_config",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Applies the loaded configuration to the DevLM system",
                                "todo": "Implement rollback mechanism in case of partial application failure"
                            },
                            {
                                "name": "rotate_api_keys",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "new_config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Rotates API keys for LLM providers according to the specified interval",
                                "todo": "Implement secure key rotation using Vault integration"
                            },
                            {
                                "name": "manage_feature_flags",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "enabled_features"
                                ],
                                "output_types": [
                                    "list"
                                ],
                                "summary": "Manages feature flags based on the configuration and LaunchDarkly integration",
                                "todo": "Implement caching mechanism for feature flag states to reduce API calls"
                            },
                            {
                                "name": "setup_monitoring",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Sets up monitoring and alerting based on the configuration",
                                "todo": "Integrate with Prometheus for custom metrics collection"
                            },
                            {
                                "name": "configure_llm_instances",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "instances"
                                ],
                                "output_types": [
                                    "list"
                                ],
                                "summary": "Configures and initializes LLM instances based on the configuration",
                                "todo": "Implement auto-scaling logic for LLM instances"
                            },
                            {
                                "name": "setup_backup_schedule",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Sets up the backup schedule and retention policy",
                                "todo": "Implement verification and restore testing procedures"
                            },
                            {
                                "name": "configure_email_system",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Configures the email system with SMTP settings and templates",
                                "todo": "Implement email provider failover mechanism"
                            },
                            {
                                "name": "setup_sentry_integration",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Sets up Sentry integration for error tracking and performance monitoring",
                                "todo": "Implement custom error grouping and filtering rules"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "Production configuration file for DevLM, containing settings for database, Redis, LLM API, search API, code execution, API gateway, logging, file system, security, performance, feature flags, monitoring, LLM instances, backup, email, and Sentry.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "config.staging.yaml",
                        "functions": [
                            {
                                "name": "database_connection",
                                "inputs": [
                                    "host",
                                    "port",
                                    "name",
                                    "user",
                                    "password"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "string",
                                    "string",
                                    "string"
                                ],
                                "outputs": [
                                    "connection"
                                ],
                                "output_types": [
                                    "DatabaseConnection"
                                ],
                                "summary": "Establishes a connection to the staging database using the provided configuration settings",
                                "todo": "Implement connection pooling and read replica functionality"
                            },
                            {
                                "name": "redis_connection",
                                "inputs": [
                                    "host",
                                    "port",
                                    "password"
                                ],
                                "input_types": [
                                    "string",
                                    "integer",
                                    "string"
                                ],
                                "outputs": [
                                    "connection"
                                ],
                                "output_types": [
                                    "RedisConnection"
                                ],
                                "summary": "Creates a connection to the Redis instance using the specified configuration",
                                "todo": "Implement SSL and sentinel support"
                            },
                            {
                                "name": "llm_api_request",
                                "inputs": [
                                    "provider",
                                    "prompt",
                                    "max_tokens"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "integer"
                                ],
                                "outputs": [
                                    "response"
                                ],
                                "output_types": [
                                    "LLMResponse"
                                ],
                                "summary": "Sends a request to the specified LLM API provider with the given prompt and parameters",
                                "todo": "Implement key rotation and fallback strategy"
                            },
                            {
                                "name": "search_api_request",
                                "inputs": [
                                    "query",
                                    "max_results"
                                ],
                                "input_types": [
                                    "string",
                                    "integer"
                                ],
                                "outputs": [
                                    "search_results"
                                ],
                                "output_types": [
                                    "SearchResults"
                                ],
                                "summary": "Performs a search query using the configured search API providers",
                                "todo": "Implement result filtering and custom search engine support"
                            },
                            {
                                "name": "execute_code",
                                "inputs": [
                                    "code",
                                    "language"
                                ],
                                "input_types": [
                                    "string",
                                    "string"
                                ],
                                "outputs": [
                                    "execution_result"
                                ],
                                "output_types": [
                                    "ExecutionResult"
                                ],
                                "summary": "Executes the provided code in a sandboxed environment with specified resource limits",
                                "todo": "Implement output streaming and dependency management"
                            },
                            {
                                "name": "api_gateway_route",
                                "inputs": [
                                    "request"
                                ],
                                "input_types": [
                                    "HTTPRequest"
                                ],
                                "outputs": [
                                    "response"
                                ],
                                "output_types": [
                                    "HTTPResponse"
                                ],
                                "summary": "Routes incoming API requests, applies rate limiting, and handles authentication",
                                "todo": "Implement circuit breaker and caching mechanisms"
                            },
                            {
                                "name": "log_event",
                                "inputs": [
                                    "level",
                                    "message",
                                    "metadata"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "object"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Logs events with specified level, message, and metadata to configured outputs",
                                "todo": "Implement log shipping and structured logging"
                            },
                            {
                                "name": "file_system_operation",
                                "inputs": [
                                    "operation",
                                    "path",
                                    "data"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "binary"
                                ],
                                "outputs": [
                                    "result"
                                ],
                                "output_types": [
                                    "FileOperationResult"
                                ],
                                "summary": "Performs file system operations with integrity checks, encryption, and access control",
                                "todo": "Implement file versioning and quota management"
                            },
                            {
                                "name": "security_check",
                                "inputs": [
                                    "request",
                                    "user"
                                ],
                                "input_types": [
                                    "HTTPRequest",
                                    "User"
                                ],
                                "outputs": [
                                    "is_allowed"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Performs security checks including origin validation, rate limiting, and two-factor authentication",
                                "todo": "Implement content security policy and API key management"
                            },
                            {
                                "name": "optimize_performance",
                                "inputs": [
                                    "current_metrics"
                                ],
                                "input_types": [
                                    "PerformanceMetrics"
                                ],
                                "outputs": [
                                    "optimized_config"
                                ],
                                "output_types": [
                                    "PerformanceConfig"
                                ],
                                "summary": "Analyzes current performance metrics and adjusts configuration for optimal performance",
                                "todo": "Implement adaptive concurrency and query optimization"
                            },
                            {
                                "name": "check_feature_flag",
                                "inputs": [
                                    "flag_name",
                                    "user_context"
                                ],
                                "input_types": [
                                    "string",
                                    "UserContext"
                                ],
                                "outputs": [
                                    "is_enabled"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Checks if a feature flag is enabled for the given user context",
                                "todo": "Implement remote updates and targeting rules"
                            },
                            {
                                "name": "collect_metrics",
                                "inputs": [
                                    "metric_name",
                                    "value",
                                    "labels"
                                ],
                                "input_types": [
                                    "string",
                                    "number",
                                    "object"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Collects and stores custom metrics for monitoring purposes",
                                "todo": "Implement anomaly detection and custom dashboards"
                            },
                            {
                                "name": "manage_llm_instances",
                                "inputs": [
                                    "action",
                                    "instance_name"
                                ],
                                "input_types": [
                                    "string",
                                    "string"
                                ],
                                "outputs": [
                                    "result"
                                ],
                                "output_types": [
                                    "LLMInstanceResult"
                                ],
                                "summary": "Manages LLM instances, including scaling and load balancing",
                                "todo": "Implement warm-up strategies and instance health checks"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "This YAML file contains comprehensive configuration settings for the staging environment of a DevLM application. It includes detailed configurations for database, Redis, LLM API, search API, code execution, API gateway, logging, file system, security, performance, feature flags, monitoring, and LLM instances.",
                        "last_updated_iteration": 5
                    },
                    {
                        "name": "llm_config.yaml",
                        "functions": [
                            {
                                "name": "load_config",
                                "inputs": [
                                    "file_path"
                                ],
                                "input_types": [
                                    "string"
                                ],
                                "outputs": [
                                    "config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Loads the YAML configuration file and returns it as a dictionary.",
                                "todo": "Implement error handling for file not found or invalid YAML format."
                            },
                            {
                                "name": "initialize_llm",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "llm_instance"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Initializes the LLM instance based on the provided configuration.",
                                "todo": "Implement support for multiple LLM providers and model versions."
                            },
                            {
                                "name": "perform_task",
                                "inputs": [
                                    "task_name",
                                    "input_data"
                                ],
                                "input_types": [
                                    "string",
                                    "dict"
                                ],
                                "outputs": [
                                    "result"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Executes a specific task using the LLM based on the task configuration.",
                                "todo": "Implement task-specific error handling and result validation."
                            },
                            {
                                "name": "rotate_api_keys",
                                "inputs": [
                                    "config"
                                ],
                                "input_types": [
                                    "dict"
                                ],
                                "outputs": [
                                    "updated_config"
                                ],
                                "output_types": [
                                    "dict"
                                ],
                                "summary": "Rotates the API keys based on the configured rotation interval and key sources.",
                                "todo": "Implement secure key storage and retrieval from vault and environment variables."
                            },
                            {
                                "name": "handle_error",
                                "inputs": [
                                    "error",
                                    "config"
                                ],
                                "input_types": [
                                    "object",
                                    "dict"
                                ],
                                "outputs": [
                                    "retry_successful"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Handles errors based on the error handling configuration, including retries and backoff.",
                                "todo": "Implement advanced error grouping and filtering based on configured rules."
                            },
                            {
                                "name": "cache_response",
                                "inputs": [
                                    "key",
                                    "value",
                                    "config"
                                ],
                                "input_types": [
                                    "string",
                                    "string",
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Caches the LLM response based on the caching configuration.",
                                "todo": "Implement support for multiple caching backends (Redis, Memcached, in-memory)."
                            },
                            {
                                "name": "stream_response",
                                "inputs": [
                                    "response",
                                    "config"
                                ],
                                "input_types": [
                                    "string",
                                    "dict"
                                ],
                                "outputs": [
                                    "generator"
                                ],
                                "output_types": [
                                    "generator"
                                ],
                                "summary": "Streams the LLM response in chunks based on the streaming configuration.",
                                "todo": "Implement adaptive chunk size based on network conditions."
                            },
                            {
                                "name": "optimize_prompt",
                                "inputs": [
                                    "prompt",
                                    "config"
                                ],
                                "input_types": [
                                    "string",
                                    "dict"
                                ],
                                "outputs": [
                                    "optimized_prompt"
                                ],
                                "output_types": [
                                    "string"
                                ],
                                "summary": "Optimizes the input prompt using configured techniques like few-shot learning and chain of thought.",
                                "todo": "Implement dynamic selection of optimization techniques based on task type."
                            },
                            {
                                "name": "log_metrics",
                                "inputs": [
                                    "metrics",
                                    "config"
                                ],
                                "input_types": [
                                    "dict",
                                    "dict"
                                ],
                                "outputs": [
                                    "success"
                                ],
                                "output_types": [
                                    "boolean"
                                ],
                                "summary": "Logs various metrics related to LLM usage and performance.",
                                "todo": "Implement integration with external monitoring and alerting systems."
                            },
                            {
                                "name": "validate_input",
                                "inputs": [
                                    "input_data",
                                    "config"
                                ],
                                "input_types": [
                                    "string",
                                    "dict"
                                ],
                                "outputs": [
                                    "is_valid",
                                    "sanitized_input"
                                ],
                                "output_types": [
                                    "boolean",
                                    "string"
                                ],
                                "summary": "Validates and sanitizes input data based on security configuration.",
                                "todo": "Implement more advanced input validation techniques and custom validation rules."
                            }
                        ],
                        "status": "in_progress",
                        "summary": "This YAML file contains comprehensive configuration settings for a Large Language Model (LLM) system. It covers various aspects such as LLM settings, API configuration, instance management, load balancing, task-specific configurations, error handling, caching, streaming, prompt optimization, monitoring, security, model versioning, performance tuning, fallback options, fine-tuning, cost management, compliance, internationalization, webhooks, custom functions, auto-scaling, model evaluation, continuous learning, API versioning, prompt library, token usage tracking, backup and recovery, thread management, response formatting, ethical AI considerations, file system operations, external service integrations, and email notifications.",
                        "last_updated_iteration": 5
                    }
                ],
                "directories": {}
            },
            "api": {
                "files": [
                    {
                        "name": "openapi.yaml",
                        "functions": [
                            {
                                "name": "createProject",
                                "inputs": [
                                    "ProjectCreate"
                                ],
                                "input_types": [
                                    "object"
                                ],
                                "outputs": [
                                    "Project"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Creates a new project with the given details.",
                                "todo": "Implement input validation and error handling"
                            },
                            {
                                "name": "getProject",
                                "inputs": [
                                    "projectId"
                                ],
                                "input_types": [
                                    "string (uuid)"
                                ],
                                "outputs": [
                                    "Project"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Retrieves project details for the given project ID.",
                                "todo": "Implement caching mechanism as specified in x-cache-control"
                            },
                            {
                                "name": "updateRequirements",
                                "inputs": [
                                    "projectId",
                                    "RequirementsUpdate"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "object"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Updates the requirements for the specified project.",
                                "todo": "Implement version conflict resolution"
                            },
                            {
                                "name": "analyzeRequirements",
                                "inputs": [
                                    "projectId"
                                ],
                                "input_types": [
                                    "string (uuid)"
                                ],
                                "outputs": [
                                    "AnalysisResult"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Analyzes the requirements of the specified project.",
                                "todo": "Implement AI-powered analysis logic"
                            },
                            {
                                "name": "generateCode",
                                "inputs": [
                                    "projectId",
                                    "CodeGenerationRequest"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "object"
                                ],
                                "outputs": [
                                    "GeneratedCode"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Generates code based on the project requirements and specified parameters.",
                                "todo": "Implement code generation logic for different languages and frameworks"
                            },
                            {
                                "name": "executeCode",
                                "inputs": [
                                    "projectId"
                                ],
                                "input_types": [
                                    "string (uuid)"
                                ],
                                "outputs": [
                                    "ExecutionResult"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Executes the generated code for the specified project.",
                                "todo": "Implement secure code execution environment"
                            },
                            {
                                "name": "getProjectFiles",
                                "inputs": [
                                    "projectId",
                                    "cursor",
                                    "limit",
                                    "fileType"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "string",
                                    "integer",
                                    "string"
                                ],
                                "outputs": [
                                    "ProjectFiles"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Retrieves a list of files for the specified project with pagination.",
                                "todo": "Implement efficient file listing and pagination"
                            },
                            {
                                "name": "getFileContent",
                                "inputs": [
                                    "projectId",
                                    "fileName"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "string"
                                ],
                                "outputs": [
                                    "FileContent"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Retrieves the content of a specific file in the project.",
                                "todo": "Implement file content caching for improved performance"
                            },
                            {
                                "name": "updateFileContent",
                                "inputs": [
                                    "projectId",
                                    "fileName",
                                    "FileContentUpdate"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "string",
                                    "object"
                                ],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Updates the content of a specific file in the project.",
                                "todo": "Implement file locking mechanism to prevent conflicts"
                            },
                            {
                                "name": "performWebSearch",
                                "inputs": [
                                    "projectId",
                                    "WebSearchRequest"
                                ],
                                "input_types": [
                                    "string (uuid)",
                                    "object"
                                ],
                                "outputs": [
                                    "WebSearchResult"
                                ],
                                "output_types": [
                                    "object"
                                ],
                                "summary": "Performs a web search for additional information related to the project.",
                                "todo": "Implement integration with multiple search engines and sources"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "OpenAPI specification for the DevLM API, an AI-powered software development assistant. It defines various endpoints for project management, code generation, and analysis.",
                        "last_updated_iteration": 5
                    }
                ],
                "directories": {}
            },
            "build": {
                "files": [
                    {
                        "name": "Makefile",
                        "functions": [
                            {
                                "name": "build",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Builds all Go and Python services",
                                "todo": "Consider adding error handling for build failures"
                            },
                            {
                                "name": "test",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs tests for all Go and Python services",
                                "todo": "Add integration tests"
                            },
                            {
                                "name": "clean",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Removes built binaries, virtual environments, and Docker resources",
                                "todo": "Implement selective cleaning options"
                            },
                            {
                                "name": "run",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs all services using Docker Compose",
                                "todo": "Add option to run specific services"
                            },
                            {
                                "name": "docker-build",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Builds Docker images for all services",
                                "todo": "Optimize Docker image sizes"
                            },
                            {
                                "name": "lint",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs linters for all services and file types",
                                "todo": "Add more language-specific linters"
                            },
                            {
                                "name": "format",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Formats code for all services and file types",
                                "todo": "Add pre-commit hooks for automatic formatting"
                            },
                            {
                                "name": "migrate",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs database migrations",
                                "todo": "Implement rollback functionality"
                            },
                            {
                                "name": "docs",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Generates API and project documentation",
                                "todo": "Automate documentation deployment"
                            },
                            {
                                "name": "setup",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Sets up development environment",
                                "todo": "Add version checks for installed dependencies"
                            },
                            {
                                "name": "perf-test",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs performance tests",
                                "todo": "Implement more comprehensive performance scenarios"
                            },
                            {
                                "name": "ci",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Runs Continuous Integration tasks",
                                "todo": "Add more security scans"
                            },
                            {
                                "name": "deploy",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Deploys the application to production",
                                "todo": "Implement blue-green deployment strategy"
                            },
                            {
                                "name": "monitor",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Starts monitoring dashboard",
                                "todo": "Add more detailed metrics and logging"
                            },
                            {
                                "name": "backup",
                                "inputs": [],
                                "input_types": [],
                                "outputs": [],
                                "output_types": [],
                                "summary": "Creates a backup of the database and config files",
                                "todo": "Implement incremental backups"
                            }
                        ],
                        "status": "in_progress",
                        "summary": "This Makefile is for the DevLM project, providing various commands for building, testing, running, and managing the project's services. It includes targets for Go and Python services, Docker operations, linting, formatting, database migrations, documentation generation, and more.",
                        "last_updated_iteration": 5
                    }
                ],
                "directories": {}
            },
            "": {
                "files": [
                    {
                        "name": "README.md",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "CHANGELOG.md",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "LICENSE",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "go.mod",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "go.sum",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "requirements.txt",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": ".gitignore",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": "docker-compose.yml",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": ".golangci.yml",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": ".pre-commit-config.yaml",
                        "functions": [],
                        "status": "not_started"
                    },
                    {
                        "name": ".github/workflows/ci.yml",
                        "functions": [],
                        "status": "not_started"
                    }
                ],
                "directories": {}
            },
            ".github": {
                "files": [],
                "directories": {
                    "workflows": {
                        "files": [
                            {
                                "name": "ci.yml",
                                "functions": [
                                    {
                                        "name": "lint",
                                        "inputs": [
                                            "source_code"
                                        ],
                                        "input_types": [
                                            "repository_contents"
                                        ],
                                        "outputs": [
                                            "lint_results"
                                        ],
                                        "output_types": [
                                            "pass_fail"
                                        ],
                                        "summary": "Runs various linters and code formatters on Go, Python, and JavaScript code",
                                        "todo": "Consider adding more language-specific linters if needed"
                                    },
                                    {
                                        "name": "test",
                                        "inputs": [
                                            "source_code",
                                            "go_version",
                                            "python_version"
                                        ],
                                        "input_types": [
                                            "repository_contents",
                                            "string",
                                            "string"
                                        ],
                                        "outputs": [
                                            "test_results",
                                            "coverage_reports"
                                        ],
                                        "output_types": [
                                            "pass_fail",
                                            "coverage_data"
                                        ],
                                        "summary": "Runs unit and integration tests for Go and Python components, and uploads coverage reports",
                                        "todo": "Add more comprehensive integration tests"
                                    },
                                    {
                                        "name": "build",
                                        "inputs": [
                                            "source_code"
                                        ],
                                        "input_types": [
                                            "repository_contents"
                                        ],
                                        "outputs": [
                                            "binaries",
                                            "docker_images"
                                        ],
                                        "output_types": [
                                            "executable_files",
                                            "container_images"
                                        ],
                                        "summary": "Builds Go binaries, Python service, and Docker images for all components",
                                        "todo": "Optimize Docker build process for faster builds"
                                    },
                                    {
                                        "name": "deploy",
                                        "inputs": [
                                            "docker_images",
                                            "kubernetes_config"
                                        ],
                                        "input_types": [
                                            "container_images",
                                            "kubeconfig"
                                        ],
                                        "outputs": [
                                            "deployment_status"
                                        ],
                                        "output_types": [
                                            "pass_fail"
                                        ],
                                        "summary": "Deploys the built Docker images to a Kubernetes cluster in the staging environment",
                                        "todo": "Implement canary deployment strategy"
                                    }
                                ],
                                "status": "in_progress",
                                "summary": "This file defines a Continuous Integration (CI) workflow for a multi-language project using GitHub Actions. It includes linting, testing, building, and deploying stages for Go and Python components.",
                                "last_updated_iteration": 5
                            }
                        ],
                        "directories": {}
                    }
                }
            }
        }
    }
}