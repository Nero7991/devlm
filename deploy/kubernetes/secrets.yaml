apiVersion: v1
kind: Secret
metadata:
  name: devlm-secrets
  namespace: devlm
type: Opaque
stringData:
  # Database Configuration
  DB_HOST: "<REPLACE_WITH_DB_HOST>"
  DB_PORT: "<REPLACE_WITH_DB_PORT>"
  DB_NAME: "<REPLACE_WITH_DB_NAME>"
  DB_USER: "<REPLACE_WITH_DB_USER>"
  DB_PASSWORD: "<REPLACE_WITH_DB_PASSWORD>"
  DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

  # Redis Configuration
  REDIS_HOST: "<REPLACE_WITH_REDIS_HOST>"
  REDIS_PORT: "<REPLACE_WITH_REDIS_PORT>"
  REDIS_PASSWORD: "<REPLACE_WITH_REDIS_PASSWORD>"
  REDIS_URL: "redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}"

  # API Configuration
  API_SECRET_KEY: "<REPLACE_WITH_64_BYTE_RANDOM_STRING>"
  API_RATE_LIMIT: "100"
  API_RATE_LIMIT_PERIOD: "60"
  API_VERSION: "v1"
  API_DOCS_URL: "https://docs.devlm.example.com"

  # Service URLs
  API_SERVICE_URL: "http://devlm-api-service:8080"
  WORKER_SERVICE_URL: "http://devlm-worker-service:8081"
  LLM_SERVICE_URL: "http://devlm-llm-service:8082"
  FALLBACK_API_SERVICE_URL: "http://fallback-api-service:8080"
  FALLBACK_WORKER_SERVICE_URL: "http://fallback-worker-service:8081"
  FALLBACK_LLM_SERVICE_URL: "http://fallback-llm-service:8082"

  # Security Configuration
  JWT_SECRET: "<REPLACE_WITH_64_BYTE_RANDOM_STRING>"
  JWT_EXPIRATION: "3600"
  ENCRYPTION_KEY: "<REPLACE_WITH_32_BYTE_ENCRYPTION_KEY>"
  SSL_CERT: "<REPLACE_WITH_BASE64_ENCODED_SSL_CERT>"
  SSL_KEY: "<REPLACE_WITH_BASE64_ENCODED_SSL_KEY>"
  TFA_SECRET_KEY: "<REPLACE_WITH_TFA_SECRET_KEY>"

  # External Services Configuration
  LLM_API_KEY: "<REPLACE_WITH_LLM_API_KEY>"
  SEARCH_API_KEY: "<REPLACE_WITH_SEARCH_API_KEY>"
  GITHUB_API_KEY: "<REPLACE_WITH_GITHUB_API_KEY>"
  GITLAB_API_KEY: "<REPLACE_WITH_GITLAB_API_KEY>"
  EXTERNAL_SERVICES_API_KEY: "<REPLACE_WITH_EXTERNAL_SERVICES_API_KEY>"

  # Backup Configuration
  BACKUP_S3_BUCKET: "<REPLACE_WITH_S3_BUCKET_NAME>"
  BACKUP_AWS_ACCESS_KEY_ID: "<REPLACE_WITH_AWS_ACCESS_KEY_ID>"
  BACKUP_AWS_SECRET_ACCESS_KEY: "<REPLACE_WITH_AWS_SECRET_ACCESS_KEY>"

  # Monitoring and Alerting
  PROMETHEUS_ENDPOINT: "http://prometheus:9090"
  ALERTMANAGER_ENDPOINT: "http://alertmanager:9093"

  # Email Configuration
  SMTP_HOST: "<REPLACE_WITH_SMTP_HOST>"
  SMTP_PORT: "<REPLACE_WITH_SMTP_PORT>"
  SMTP_USERNAME: "<REPLACE_WITH_SMTP_USERNAME>"
  SMTP_PASSWORD: "<REPLACE_WITH_SMTP_PASSWORD>"
  EMAIL_FROM_ADDRESS: "<REPLACE_WITH_EMAIL_FROM_ADDRESS>"

  # Feature Flags
  ENABLE_EXPERIMENTAL_FEATURES: "false"
  ENABLE_BETA_API: "false"

  # OAuth Configuration
  OAUTH_GOOGLE_CLIENT_ID: "<REPLACE_WITH_GOOGLE_CLIENT_ID>"
  OAUTH_GOOGLE_CLIENT_SECRET: "<REPLACE_WITH_GOOGLE_CLIENT_SECRET>"
  OAUTH_GITHUB_CLIENT_ID: "<REPLACE_WITH_GITHUB_CLIENT_ID>"
  OAUTH_GITHUB_CLIENT_SECRET: "<REPLACE_WITH_GITHUB_CLIENT_SECRET>"

  # Machine Learning Configuration
  ML_MODEL_VERSION: "1.0.0"
  ML_MODEL_ENDPOINT: "<REPLACE_WITH_ML_MODEL_ENDPOINT>"

  # Distributed Tracing Configuration
  JAEGER_AGENT_HOST: "<REPLACE_WITH_JAEGER_AGENT_HOST>"
  JAEGER_AGENT_PORT: "<REPLACE_WITH_JAEGER_AGENT_PORT>"

  # Content Delivery Network Configuration
  CDN_BASE_URL: "<REPLACE_WITH_CDN_BASE_URL>"
  CDN_API_KEY: "<REPLACE_WITH_CDN_API_KEY>"

  # Additional Configurations
  LOG_LEVEL: "INFO"
  MAX_UPLOAD_SIZE: "10485760"
  CORS_ALLOWED_ORIGINS: "https://devlm.example.com,https://api.devlm.example.com"
  CACHE_TTL: "300"
  GITHUB_WEBHOOK_SECRET: "<REPLACE_WITH_GITHUB_WEBHOOK_SECRET>"
  SECRET_ROTATION_SCHEDULE: "90"
  API_THROTTLE_RATE: "1000"
  API_THROTTLE_PERIOD: "3600"
  SECURE_STORAGE_ENCRYPTION_KEY: "<REPLACE_WITH_32_BYTE_ENCRYPTION_KEY>"
  SECURE_STORAGE_S3_BUCKET: "<REPLACE_WITH_S3_BUCKET_NAME>"
  SLACK_WEBHOOK_URL: "<REPLACE_WITH_SLACK_WEBHOOK_URL>"
  TEAMS_WEBHOOK_URL: "<REPLACE_WITH_TEAMS_WEBHOOK_URL>"

  # Secret Rotation Configuration
  SECRET_ROTATION_ENABLED: "true"
  SECRET_ROTATION_INTERVAL: "30d"
  SECRET_ROTATION_SCRIPT: "/scripts/rotate_secrets.sh"

  # Encryption Configuration for etcd
  ETCD_ENCRYPTION_KEY: "<REPLACE_WITH_32_BYTE_ENCRYPTION_KEY>"
  ETCD_ENCRYPTION_PROVIDER: "aescbc"

  # External Secret Management Configuration
  USE_EXTERNAL_SECRETS: "false"
  EXTERNAL_SECRETS_PROVIDER: "vault"
  EXTERNAL_SECRETS_ENDPOINT: "https://vault.example.com"
  EXTERNAL_SECRETS_TOKEN: "<REPLACE_WITH_VAULT_TOKEN>"

  # Inter-Service Communication Encryption
  INTER_SERVICE_ENCRYPTION_KEY: "<REPLACE_WITH_32_BYTE_ENCRYPTION_KEY>"
  INTER_SERVICE_ENCRYPTION_ALGORITHM: "AES-256-GCM"

  # Alert Configuration for Secret Expiration
  SECRET_EXPIRATION_ALERT_THRESHOLD: "15d"
  SECRET_EXPIRATION_ALERT_ENDPOINT: "https://alerts.example.com/secret-expiration"

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: devlm
spec:
  schedule: "0 0 */30 * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: secret-rotation
            image: devlm/secret-rotation:latest
            command: ["/bin/sh"]
            args: ["-c", "$(SECRET_ROTATION_SCRIPT)"]
            env:
            - name: SECRET_ROTATION_SCRIPT
              valueFrom:
                secretKeyRef:
                  name: devlm-secrets
                  key: SECRET_ROTATION_SCRIPT
          restartPolicy: OnFailure

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sealedsecrets.bitnami.com
spec:
  group: bitnami.com
  names:
    kind: SealedSecret
    plural: sealedsecrets
    singular: sealedsecret
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sealed-secrets-controller
  template:
    metadata:
      labels:
        app: sealed-secrets-controller
    spec:
      containers:
      - name: sealed-secrets-controller
        image: quay.io/bitnami/sealed-secrets-controller:v0.18.0
        args:
        - "--update-status"
        - "--key-prefix=sealed-secrets-key"
        ports:
        - containerPort: 8080
          name: http

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
rules:
- apiGroups:
  - bitnami.com
  resources:
  - sealedsecrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system